%{
#include "parser.tab.hpp"
using namespace std;

int yylex(void);
void yyerror (const char *s) {fprintf (stderr, "%s\n", s);}

extern int yylineno;
extern char* yytext;
vector <string> prog;
int lineno = 1;
astnode *theprogram;

ofstream symbolTable;					//for symtab_print					
std::ostream* fp = &cout; 
		
umap< string, symtab_t* > symtab_top;
symtab_t *symtab =  init_symtab_top();	//universal block + symtab "0" aka global
int currscope = 0;
string fullscope = "0";
%}

// error-verbose
%define parse.error verbose

// These must go into paser.tab.h
%code requires{
    #include <bits/stdc++.h>
	#include "src/ast.h"
	#include "src/symtab.h"
	using namespace std;
}

%union {
	Data* data;
	astnode *node;
}

%token <data> PACKAGE IMPORT FUNC BREAK CASE CONST CONTINUE DEFAULT
%token <data> ELSE FOR GO IF RANGE RETURN STRUCT SWITCH TYPE VAR VAR_TYPE
%token <data> BOOL_CONST NIL_VAL // REVIEW -  Usage of NIL_VAL
%token <data> IDENTIFIER
%token <data> BYTE STRING
%token <data> ELLIPSIS
%token <data> SHL SHR INC DEC
%token <data> INTEGER
%token <data> FLOAT
%left  <data> ADD SUB MUL QUO REM
%right <data> ASSIGN AND NOT DEFINE AND_NOT
%left  <data> OR XOR ARROW
%right <data> ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN QUO_ASSIGN REM_ASSIGN
%right <data> AND_ASSIGN OR_ASSIGN XOR_ASSIGN
%right <data> SHL_ASSIGN SHR_ASSIGN AND_NOT_ASSIGN COLON
%left  <data> LAND LOR EQL NEQ LEQ GEQ SEMICOLON
%left  <data> GTR LSS LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK COMMA PERIOD

%type <node> StartFile Expression Expression1 Expression2 Expression3 Expression4 Expression5
%type <node> Block StatementList Statement SimpleStmt int_lit
%type <node> EmptyStmt IncDecStmt OPENB CLOSEB SYMTABS SYMTABE 
%type <node> Assignment Declaration ConstDecl VarSpec string_lit Signature Result Parameters ParameterDecl ParameterDeclStar
%type <node> ConstSpec MethodDecl Receiver TopLevelDecl TopLevelDeclStar LabeledStmt
%type <node> ReturnStmt BreakStmt ContinueStmt StructType
%type <node> FunctionDecl TypeList Function FunctionBody FunctionCall FunctionStmt FunctionType FunctionName
%type <node> ForStmt ForClause InitStmt ArgumentList Arguments
%type <node> PostStmt Condition UnaryExpr PrimaryExpr AliasDecl TypeDef FunctionLit
%type <node> Selector Index TypeDecl TypeSpecList TypeSpec VarDecl
%type <node> TypeAssertion ExpressionList ArrayType
%type <node> assign_op rel_op add_op mul_op unary_op Tag byte_lit float_lit
%type <node> Operand Literal BasicLit OperandName ImportSpec IfStmt
%type <node> ImportPath PackageClause PackageName ImportDecl ImportDeclStar ImportSpecStar
%type <node> FieldDeclStar FieldDecl Type TypeLit ArrayLength TypeName
%type <node> PointerType IdentifierList IdentifierLIST BaseType AlternatePackageName
%type <node> StructLiteral KeyValList

%%

/* START OF FILE */
StartFile:
    PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar { theprogram = new astnode("StartFile",false, {$1,$3,$4});}
    ;

Block:
	LBRACE OPENB StatementList CLOSEB RBRACE { $$ = newId($3, "Block"); }
	;

OPENB:
	/*empty*/ {
		$$ = new astnode();
		 currscope++;
		 fullscope = fullscope + "/" + to_string(currscope);
		 //cout<<fullscope<<endl;
	}
	;

CLOSEB:
	/*empty*/ {
		$$ = new astnode();
		 fullscope = fullscope.substr(0, fullscope.find_last_of("/") );
		 //cout<<fullscope<<endl;
	}
	;

SYMTABS: 
	/*empty*/ {
		currscope++;
		fullscope = fullscope + "/" + to_string(currscope);
		symtab = new symtab_t;
		symtab_top[fullscope] = symtab;
		//cout<<fullscope<<endl;
	}
	;
	
SYMTABE:
	/*empty*/ {
		print_symtab();
		delete symtab;
		symtab = symtab_top["0"];
		fullscope = "0";
	}
	;

StatementList:
    StatementList Statement SEMICOLON { $$ = new astnode("StatementList", false, {$1, $2});}
    | Statement SEMICOLON { $$ = newId($1, "StatementList"); }
    ;

Statement:
	Declaration {$$ = newId($1, "Declaration");}
	| LabeledStmt {$$ = newId($1, "Declaration");}
	| SimpleStmt {$$ = newId($1, "Declaration");}
	| ReturnStmt {$$ = newId($1, "Declaration");}
	| BreakStmt {$$ = newId($1, "Declaration");}
	| ContinueStmt {$$ = newId($1, "Declaration");}
	| Block {$$ = newId($1, "Declaration");}
	| IfStmt {$$ = newId($1, "Declaration");}
	| ForStmt {$$ = newId($1, "Declaration");}
	| FunctionCall {$$ = newId($1, "Declaration");}
	| FunctionStmt {$$ = newId($1, "Declaration");}
	;

SimpleStmt:
	EmptyStmt {$$ = newId($1, "SimpleStmt");}
	| IncDecStmt {$$ = newId($1, "SimpleStmt");}
	| Assignment {$$ = newId($1, "SimpleStmt");}
	;

EmptyStmt:
	/*empty*/ { $$ = new astnode(); }
	;

LabeledStmt:
	IDENTIFIER COLON Statement {$$ = new astnode("LabeledStmt", false, {new astnode(IDENTIFIER, $1), new astnode(COLON), $3});}
	;

IncDecStmt:
	Expression INC {
		$$ = new astnode("IncDecStmt", false, {$1, new astnode(INC, $2)});
			string tac;
			tac.append(to_string(lineno));
			tac.append(",");
			tac.append("+");
			tac.append(",");
			tac.append($1->id);
			tac.append(",");
			tac.append($1->id);
			tac.append(",");
			tac.append("1");
			tac.append("\n");
			prog.push_back(tac);
			lineno++;
		}
	| Expression DEC {
		$$ = new astnode("IncDecStmt", false, {$1, new astnode(INC, $2)});
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append("-");
		tac.append(",");
		tac.append($1->id);
		tac.append(",");
		tac.append($1->id);
		tac.append(",");
		tac.append("1");
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
	}
	;

Assignment:
	ExpressionList assign_op ExpressionList {
		$$ = new astnode("Assignment", false, {$1,$2, $3});

		string temp1 = $1;
		string temp2 = $3;
		vector <string> expr1 = split(temp, ',');
		vector <string> expr2 = split(temp1, ',');

		// if there are unequal number of elements in either side of the assignment
		if(expr1.size() != expr2.size()){
			cout<<"Error: Incompatible assignment"<<endl;
			// probably shouldn't be putting exit(0) here not sure though
			exit(0);
		}

		// if it is a valid assignment
		else {
			string operator = $2->value;

			if (operator == "+=") {
				operator = "+";
			}
			else if (operator == "-=") {
				operator = "-";
			}
			else if (operator == "*=") {
				operator = "*";
			}
			else if (operator == "/=") {
				operator = "/";
			}
			else if (operator == "%=") {
				operator = "%";
			}

			if (operator == "=") {
				for (int i = 0; i < expr1.size(); i++) {
					string tac;
					tac.append(to_string(lineno));
					tac.append(",");
					tac.append("=");
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr2[i]);
					tac.append(",");
					tac.append("1");
					tac.append("\n");
					prog.push_back(tac);
					lineno++;
				}
			}
			else {
				for (int i = 0; i< expr1.size(); i++) {
					string tac;
					tac.append(to_string(lineno));
					tac.append(",");
					tac.append(operator);
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr2[i]);
					tac.append(",");
					tac.append("1");
					tac.append("\n");
					prog.push_back(tac);
					lineno++;
				}
			}
		}
	}
	;

VarDecl:
		VAR VarSpec {$$ = new astnode("VarDecl", false, {new astnode(VAR, $1), $2});}
		;

VarSpec:
		IdentifierList Type ASSIGN ExpressionList {$$ = new astnode("VarSpec", false, {$1, $2, new astnode(ASSIGN, $3),  $4});
			symadd_list($1, $2->type, IDENTIFIER);

			string temp1 = $1->id;
			string temp2 = $4->id;
			vector <string> expr1 = temp1.split(temp1, ',');
			vector <string> expr2 = temp2.split(temp2, ',');

			if (expr1.size() != expr2.size()) {
				cout<<"Error: Incompatible assignment"<<endl;
				exit(0);
			}

			else {
				for (int i = 0; i < expr1.size(); i++) {
					string tac;
					tac.append(to_string(lineno));
					tac.append(",");
					tac.append($3->id);
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr2[i]);
					tac.append("\n");
					prog.push_back(tac);
					lineno++;
				}
			}
		}
		| IdentifierList Type {$$ = new astnode("VarSpec", false, {$1, $2});
			symadd_list($1, $2->type, IDENTIFIER);

			string temp1 = $1->id;
			string temp2 = $2->id;

			char temp_char = temp2[0];

			if (temp_char == '[') {
				int index = 1;
				while (temp2[index] != ']') {
					index++;
				}
				string length = temp2.substr(1, index-1);
				string tac = to_string(lineno);
				tac.append(",array,");
				tac.append(temp1);
				tac.append(",");
				tac.append(length);
				tac.append("\n");
				prog.push_back(tac);
				lineno++;
			}
		}
		;

Declaration:
	ConstDecl {
		$$ = newId($1, "Declaration");
		// nahi kr rha abhi toh
	}
	| TypeDecl {
		$$ = newId($1, "Declaration");
		// nahi kr rha abhi toh
	}
	| VarDecl {
		$$ = newId($1, "Declaration");
		// nahi kr rha abhi toh
	}
	;


FunctionDecl:
		FUNC IDENTIFIER SYMTABS Function SYMTABE { $$ = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, $2), $4});
			symadd($2->v_str, $4->type);
		}
		| FUNC IDENTIFIER SYMTABS Signature SYMTABE { $$ = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, $2), $4});
			symadd($2->v_str, $4->type);		
		}
		;

FunctionName:
		IDENTIFIER
		;
/* taking care of that params scope same as fcn block using mid rule + normal end rule actions */
Function:
		Signature {fullscope=fullscope.substr(0,fullscope.find_last_of("/"));currscope--;} FunctionBody {
			fullscope = fullscope +"/"+ to_string(currscope); 
			$$ = new astnode("Function", false, {$1, $3});
		}
		;

FunctionBody:
		Block {$$ = newId($1, "FunctionBody");}
		;

FunctionStmt:
		VarDecl DEFINE FunctionCall {$$ = new astnode("FunctionStmt", false, {$1, $3});}
		| IDENTIFIER DEFINE FunctionCall {$$ = new astnode("FunctionStmt", false, {new astnode(IDENTIFIER, $1), $3});}
		;

FunctionCall:	PrimaryExpr LPAREN ArgumentList RPAREN {$$ = new astnode("FunctionCall", false, {$1, $3});}
		;

ArgumentList:
		ArgumentList COMMA Arguments {$$ = new astnode("ArgumentList", false, {$1, $3});}
		| Arguments {$$ = newId($1, "ArgumentList");}
		| /*empty*/ { $$ = new astnode();}
		;

Arguments:	PrimaryExpr {$$ = newId($1, "Arguments");}
		| FunctionCall {$$ = newId($1, "Arguments");}
		;

Signature:
	Parameters {$$ = newId($1, "Signature"); }
	| Parameters Result {$$ = new astnode("Signature", false, {$1, $2});}
	;

Result:
	LPAREN TypeList RPAREN {$$ = newId($2, "Result");}
	| Type {$$ = newId($1, "Result");}
	;

Parameters:
	LPAREN RPAREN {$$ = new astnode(LPAREN);}
	| LPAREN ParameterDeclStar RPAREN {$$ = newId($2, "Parameters");}
	| LPAREN ParameterDeclStar COMMA RPAREN {$$ = newId($2, "Parameters");} /* --COMMA WHY?-- */
	;

ParameterDeclStar:
	ParameterDecl {$$ = newId($1, "ParameterDeclStar");}
	| ParameterDeclStar COMMA ParameterDecl {$$ = new astnode("ParameterDeclStar", false, {$1, $3});}
	;

ParameterDecl:
	IdentifierList Type {
		symadd_list($1, $2->type, IDENTIFIER);
		$$ = new astnode("ParameterDecl", false, {$1, $2});
	}
	| IdentifierList ELLIPSIS  Type {$$ = new astnode("ParameterDecl", false, {$1, new astnode(ELLIPSIS,$2), $3});}; 	/* no support for now ELLIPSIS*/
	| ELLIPSIS Type {$$ = new astnode("ParameterDecl", false, {new astnode(ELLIPSIS, $1), $2});} 						/* no support for now ELLIPSIS*/
	;

TypeList:
    TypeList COMMA Type {$$ = new astnode("TypeList", false, {$1, $3});}
    | Type {$$ = new astnode("TypeList", false, {$1});}
    ;

IdentifierList:
		IDENTIFIER IdentifierLIST {$$ = new astnode("IdentifierList", false, {new astnode(IDENTIFIER, $1), $2});}
		| IDENTIFIER {$$ = new astnode(IDENTIFIER, $1);}
		;

IdentifierLIST:	IdentifierLIST COMMA IDENTIFIER { $$ = new astnode("IdentifierLIST", false, {$1, new astnode(IDENTIFIER, $3)});}
		| COMMA IDENTIFIER {$$ = new astnode(IDENTIFIER, $2);}
		;

MethodDecl:
	FUNC Receiver IDENTIFIER Function {$$ = new astnode("MethodDecl", false, {$2, $4});};
	| FUNC Receiver IDENTIFIER Signature {$$ = new astnode("MethodDecl", false, {$2, $4});}
	;

Receiver:
	Parameters {$$ = newId($1, "Receiver");}
	;

TopLevelDeclStar:
    TopLevelDeclStar SEMICOLON/*here colon*/ TopLevelDecl {$$ = new astnode("TopLevelDeclStar", false, {$1, $3});}
    | TopLevelDecl {$$ = newId($1, "TopLevelDeclStar");}
    ;

TopLevelDecl:
	Declaration {$$ = newId($1, "TopLevelDecl");}
	| FunctionDecl {$$ = newId($1, "TopLevelDecl");}
	| MethodDecl {$$ = newId($1, "TopLevelDecl");}
	;

TypeLit:
	ArrayType {$$ = newId($1, "TypeLit");}
	| StructType {$$ = newId($1, "TypeLit");}
	| PointerType {$$ = newId($1, "TypeLit");}
	| FunctionType {$$ = newId($1, "TypeLit");}
	;

Type:
	TypeName {$$ = newId($1, "Type");}
	| TypeLit {$$ = newId($1, "Type");}
	;

Operand:
	Literal {$$ = newId($1, "Operand");}
	| OperandName {$$ = newId($1, "Operand");}
	| LPAREN Expression RPAREN {$$ = newId($2, "Operand");}
	;

OperandName:
	IDENTIFIER {$$ = new astnode(IDENTIFIER);}
	;

ReturnStmt:
	RETURN Expression {$$ = newId($2, "ReturnStmt");}
	| RETURN {$$ = new astnode(RETURN);}
	;

BreakStmt:
	BREAK IDENTIFIER {$$ = new astnode("BreakStmt", false, {new astnode(BREAK, $1), new astnode(IDENTIFIER, $2)});}
	| BREAK {$$ = new astnode(BREAK);}
	;

ContinueStmt:
	CONTINUE IDENTIFIER {$$ = new astnode("ContinueStmt", false, {new astnode(BREAK, $1), new astnode(IDENTIFIER, $2)});}
	| CONTINUE {$$ = new astnode(CONTINUE);}
	;

IfStmt:
	IF OPENB Expression Block CLOSEB {$$ = new astnode("IfStmt", false, {$3, $4});}
	|IF OPENB SimpleStmt SEMICOLON Expression Block CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5, $6});}
	|IF OPENB SimpleStmt SEMICOLON Expression Block ELSE IfStmt CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5, $6, $8});}
	|IF OPENB SimpleStmt SEMICOLON Expression Block ELSE  Block CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5, $6, $8});}
	|IF OPENB Expression Block ELSE IfStmt CLOSEB {$$ = new astnode("IfStmt", false, {$3, $4, $6});}
	|IF OPENB Expression Block ELSE  Block CLOSEB {$$ = new astnode("IfStmt", false, {$3, $4, $6});}
	;

ForStmt:
	FOR OPENB Condition Block CLOSEB {$$ = new astnode("ForStmt", false, {$3, $4});}
	|FOR OPENB ForClause Block CLOSEB {$$ = new astnode("ForStmt", false, {$3, $4});}
	;

Condition:
	Expression {$$ = newId($1, "Condition");}
	;

ForClause:
	InitStmt SEMICOLON Condition SEMICOLON PostStmt {$$ = new astnode("ForClause", false, {$1, $3, $5});}
	;

InitStmt:
	SimpleStmt {$$ = newId($1, "InitStmt");}
	;

PostStmt:
	SimpleStmt {$$ = newId($1, "InitStmt");}
	;

int_lit:
	INTEGER  { $$ = new astnode(INTEGER,$1);}
	;

float_lit:
	  FLOAT { $$ = new astnode(FLOAT,$1);}
	  ;

TypeName:
	IDENTIFIER { $$ = new astnode(IDENTIFIER,$1);}
	| VAR_TYPE { $$ = new astnode(VAR_TYPE,$1);}
	;

ArrayType:
	LBRACK ArrayLength RBRACK Type { $$ = new astnode("",false,{$2,$4}); }
	;

ArrayLength:
	Expression { $$ = newId($1, "ArrayLength"); }
	;

StructType:
    STRUCT LBRACE FieldDeclStar RBRACE { $$ = newId($3, "StructType"); }
    | STRUCT LBRACE RBRACE { $$ = new astnode(STRUCT, $1); }
    ;

FieldDeclStar:
    FieldDecl SEMICOLON { $$ = newId($1, "FieldDeclStar"); }
    | FieldDeclStar FieldDecl SEMICOLON { $$ = new astnode("FieldDeclStar",false,{$1,$2}); }
    ;

FieldDecl:
	IdentifierList Type { $$ = new astnode("FieldDecl",false,{$1,$2}); }
	| IdentifierList Type Tag { $$ = new astnode("FieldDecl",false,{$1,$2,$3}); }
	;

Tag:
	STRING { $$ = new astnode(new DefinedType("string"), STRING, $1);}
	;

PointerType:
	MUL BaseType { $$ = new astnode(new PointerType($2->type),"PointerType",false,{$2}); }
	;
BaseType:
	Type { $$ = new astnode($1->type, "BaseType",false,{$1}); }
	;

// NOTE- Fill type information properly
FunctionType:
	FUNC Signature { $$ = newId($2, "FunctionType"); }
	;

ConstDecl:
		CONST ConstSpec { $$ = newId($2, "ConstDecl"); }
		;

ConstSpec:
		IDENTIFIER Type ASSIGN Expression { $$ = new astnode("ConstSpec",false,{$2,$4}); 
			symadd($1->v_str, $2->type);
			//cout<<"SCOPE"<<any_scope("test")<<endl;
		}
		| IDENTIFIER Type { $$ = newId($2, "ConstSpec"); 
			symadd($1->v_str, $2->type);
			//cout<<"SCOPE"<<any_scope("test")<<endl;
		}
		;

ExpressionList:
		ExpressionList COMMA Expression { $$ = new astnode("ExpressionList",false,{$1,$3}); }
		| Expression { $$ = newId($1, "ExpressionList"); }
		;

TypeDecl:
		TYPE  TypeSpec { $$ = new astnode("TypeDecl",false,{new astnode(TYPE,$1),$2}); }
		| TYPE LPAREN TypeSpecList RPAREN { $$ = new astnode("TypeDecl",false,{new astnode(TYPE,$1), $3}); }
		;

TypeSpecList:
		TypeSpecList TypeSpec SEMICOLON { $$ = new astnode("TypeSpecList",false,{$1,$2}); }
		| TypeSpec SEMICOLON { $$ = newId($1, "TypeSpecList"); }
		;
TypeSpec:
		AliasDecl { $$ = newId($1, "TypeSpec"); }
		| TypeDef { $$ = newId($1, "TypeSpec"); }
		;

AliasDecl:
		IDENTIFIER ASSIGN Type { $$ = new astnode("AliasDecl",false,{new astnode(IDENTIFIER,$1), new astnode(ASSIGN,$2), $3}); }
		;

TypeDef:
		IDENTIFIER Type { $$ = new astnode("TypeDef",false,{new astnode(IDENTIFIER,$1), $2}); }
		;

Literal:
	BasicLit { $$ = newId($1, "Literal"); }
	| FunctionLit { $$ = newId($1, "Literal"); }
	;

string_lit:
	STRING { new astnode(new PointerType(new DefinedType("string")) , STRING, $1);}
	;

byte_lit:
	BYTE  { $$ = new astnode(new DefinedType("byte") , BYTE, $1);}
	;

BasicLit:
	int_lit { $$ = newId($1, "BasicLit"); }
	| float_lit { $$ = newId($1, "BasicLit"); }
	| string_lit { $$ = newId($1, "BasicLit"); }
	| byte_lit { $$ = newId($1, "BasicLit"); }
	;

FunctionLit:
	FUNC Function { $$ = new astnode("FunctionLit",false,{new astnode(FUNC,$1), $2}); }
	;

PrimaryExpr:
	Operand { $$ = newId($1, "PrimaryExpr"); }
	| PrimaryExpr Selector { $$ = new astnode("PrimaryExpr",false,{$1,$2}); }
	| PrimaryExpr Index { $$ = new astnode("PrimaryExpr",false,{$1,$2}); }
	| PrimaryExpr TypeAssertion { $$ = new astnode("PrimaryExpr",false,{$1,$2}); }
	| OperandName StructLiteral { $$ = new astnode("PrimaryExpr",false,{$1,$2}); }
	;

StructLiteral:
    LBRACE KeyValList RBRACE { $$ = newId($2, "StructLiteral"); }
    ;

KeyValList:
    	/* empty */ { $$ = new astnode(); }
 	| Expression COLON Expression { $$ = new astnode("",false,{$1,$3}); }
	| KeyValList COMMA Expression COLON Expression { $$ = new astnode("",false,{$1,$3,$5}); }
	;

Selector:
	PERIOD IDENTIFIER { $$ = new astnode("Selector",false,{new astnode(PERIOD,$1), new astnode(IDENTIFIER,$2)}); }
	;
Index:
	LBRACK Expression RBRACK { $$ = newId($2, "Index"); }
	;


TypeAssertion:
	PERIOD LPAREN Type RPAREN { $$ = new astnode("TypeAssertion",false,{new astnode(PERIOD, $1), $3}); }
	;

// The below expression{number} is written because of the conflict between the
// expression when the binary operations are used with a single rule

// TODO - Fill Type fields after type resolution
// TODO - Shorten this expression tree
Expression:
    Expression1 { $$ = newId($1,"Expression");}
    ;

Expression1:
    Expression1 LOR Expression2 { $$ = new astnode("Expression1",false,{$1,new astnode(LOR),$3}); }
    | Expression2 { newId($1,"Expression1"); }
    ;

Expression2:
    Expression2 LAND Expression3 { $$ = new astnode("Expression2",false,{$1,new astnode(LAND),$3}); }
    | Expression3 { newId($1,"Expression2"); }
    ;

Expression3:
    Expression3 rel_op Expression4 { $$ = new astnode("Expression3",false,{$1,$2,$3}); }
    | Expression4 { newId($1,"Expression3"); }
    ;

Expression4:
    Expression4 add_op Expression5 { $$ = new astnode("Expression4",false,{$1,$2,$3}); }
    | Expression5 { newId($1,"Expression4"); }
    ;

Expression5:
    Expression5 mul_op PrimaryExpr { $$ = new astnode("Expression5",false,{$1,$2,$3}); }
    | UnaryExpr { $$ = newId($1, "Expression5"); }
    ;

UnaryExpr:
	PrimaryExpr { $$ = newId($1,"UnaryExpr"); }
	| unary_op PrimaryExpr { $$ = new astnode("UnaryExpr",false,{$1,$2}); }
	//UnaryExpr
	;


rel_op:
	EQL   { $$ = new astnode(EQL);}
	| NEQ { $$ = new astnode(NEQ);}
	| LSS { $$ = new astnode(LSS);}
	| LEQ { $$ = new astnode(LEQ);}
	| GTR { $$ = new astnode(GTR);}
	| GEQ { $$ = new astnode(GEQ);}
	;

add_op:
	ADD { $$ = new astnode(ADD);}
	| SUB { $$ = new astnode(SUB);}
	| OR  { $$ = new astnode(OR);}
	| XOR { $$ = new astnode(XOR);}
	;

mul_op:
	MUL   { $$ = new astnode(MUL);}
	| QUO { $$ = new astnode(QUO);}
	| REM { $$ = new astnode(REM);}
	| SHL { $$ = new astnode(SHL);}
	| SHR { $$ = new astnode(SHR);}
	| AND { $$ = new astnode(AND);}
	| AND_NOT  { $$ = new astnode(AND_NOT);}
	;

unary_op:
	ADD  { $$ = new astnode(ADD);}
	| SUB { $$ = new astnode(SUB);}
	| NOT { $$ = new astnode(NOT);}
	| XOR { $$ = new astnode(XOR);}
	| MUL { $$ = new astnode(MUL);}
	| AND { $$ = new astnode(AND);}
	;

assign_op:
	ASSIGN { $$ = new astnode(ASSIGN);}
	| ADD_ASSIGN { $$ = new astnode(ADD_ASSIGN);}
	| SUB_ASSIGN { $$ = new astnode(SUB_ASSIGN);}
	| MUL_ASSIGN { $$ = new astnode(MUL_ASSIGN);}
	| QUO_ASSIGN { $$ = new astnode(QUO_ASSIGN);}
	| REM_ASSIGN { $$ = new astnode(REM_ASSIGN);}
	;

PackageClause:
	PACKAGE PackageName { $$ = new astnode("PackageClause", false, {new astnode(PACKAGE), $2});}
	;

PackageName:
	IDENTIFIER { $$ = new astnode(new DefinedType("fillTypeUsingSymbolTable"),IDENTIFIER);}
	;

ImportDeclStar:
    ImportDeclStar ImportDecl { $$ = new astnode("ImportDeclStar", false,{$1,$2});}
    | ImportDecl { $$ = newId($1, "ImportDeclStar"); }
    | /*empty*/ { $$ = new astnode(); }
    ;

ImportDecl:
	IMPORT ImportSpec SEMICOLON { $$ = new astnode("ImportDecl", false, {new astnode(IMPORT),$2}); }
	| IMPORT LPAREN ImportSpecStar RPAREN { $$ = new astnode("ImportDecl", false, {new astnode(IMPORT), $3}); }
	;

ImportSpecStar:
	ImportSpecStar ImportSpec SEMICOLON { $$ = new astnode("ImportSpecStar", false, {$1,$2}); }
	| ImportSpec SEMICOLON { $$ = newId($1, "ImportSpecStar"); }
	;

ImportSpec:
	 PERIOD ImportPath { $$ = new astnode("ImportSpec", false, {new astnode(PERIOD), $2}); }
	| AlternatePackageName ImportPath { $$ = new astnode("ImportSpec", false, {$1,$2}); }
	| AlternatePackageName { $$ = newId($1,"ImportSpec"); }
	;

ImportPath:
	string_lit  { $$ = newId($1,"ImportPath");}
	;

AlternatePackageName:
	string_lit { $$ = newId($1, "AlternatePackageName");}
	;

%%


int nodeId = 0;
void prettyPrint(ofstream& astFile, astnode* root){
	astFile << nodeId << " [label=\"" << root->id << "\"]" << endl;
	int parentId = nodeId;
	for(auto child : root->children){
		astFile << parentId << "->" << ++nodeId << endl;
		prettyPrint(astFile , child);
	}
}

int main (int argc, char **argv) {
	int fileNo = atoi(argv[1]);
	symbolTable.open("symbolTable" + to_string(fileNo) + ".txt");
	fp =  & symbolTable;
	
	yyparse ( );
	
	print_symtab();
	symbolTable.close();
	
	ofstream astFile;
	astFile.open("ast" + to_string(fileNo) + ".dot" );
	if(!astFile) {
		cout << "couldn't open file" << endl;
		exit(1);
	}
	astFile << "digraph \"src/parser.ypp\" \n { \n node [fontname = courier, shape = box, colorscheme = paired6] \n edge [fontname = courier]" << endl;
	prettyPrint(astFile, theprogram);
	astFile << "}" << endl;
	astFile.close();
}
