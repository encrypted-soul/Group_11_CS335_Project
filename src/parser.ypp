%{
#include <bits/stdc++.h>
#include "parser.tab.hpp"
#include "src/symtab.h"
using namespace std;

// 1. check sym when used, 2. Array X / struct / pointer type 3. Expression type

int yylex(void);
void yyerror (const char *s) {fprintf (stderr, "%s\n", s);}

extern int yylineno;
extern char* yytext;
vector <string> prog;
int lineno = 1;
int tempno = 1;
int temp_str_no = 0;
int labelno = 1;
astnode *theprogram;
ofstream symbolTable;					//for symtab_print
std::ostream* fp ;//= &cout;

umap< string, symtab_t* > symtab_top;
symtab_t *symtab =  init_symtab_top();	//universal block + symtab "0" aka global
int currscope = 0;
string fullscope = "0";
int curr_fcnscope = 0;
string get_tempvar(){
	string str_t = "t";
	string ans =  str_t.append(to_string(tempno));
	tempno++;
	return ans;
}


string get_temp_strvar(){
	string str_t = "t_temporary_string";
	string ans =  str_t.append(to_string(temp_str_no));
	temp_str_no++;
	return ans;
}

string get_label(){
	string str_l = "label";
	string ans =  str_l.append(to_string(labelno));
	labelno++;
	return ans;
}

stack <string> if_endlabels;
stack <string> if_bwlabels;

stack <string> for_initlabels;
stack <string> for_endlabels;
stack <string> for_blocklabels;
stack <string> for_postlabels;
stack <string> for_breaklabels;	//not used
stack <string> for_continuelabels;

string argumentlist_str;
stack <int> is_argument_list_empty;
int temp_var_counter = 0;

//splitting strings separated by comma
vector<string> split(const string &s, char delim) {
    stringstream ss(s);
    string item;
    vector<string> tokens;
    while (getline(ss, item, delim)) {
        tokens.push_back(item);
    }
    return tokens;
}
%}

// error-verbose
%define parse.error verbose

// These must go into paser.tab.h
%code requires{
    #include <bits/stdc++.h>
    #include "src/ast.h"
	#include "src/symtab.h"
	using namespace std;
}

%union {
	Data* data;
	astnode *node;
}

%token <data> PACKAGE IMPORT FUNC BREAK CASE CONST CONTINUE DEFAULT
%token <data> ELSE FOR GO IF RANGE RETURN STRUCT SWITCH TYPE VAR VAR_TYPE
%token <data> BOOL_CONST NIL_VAL // REVIEW -  Usage of NIL_VAL
%token <data> IDENTIFIER
%token <data> BYTE STRING
%token <data> ELLIPSIS
%token <data> SHL SHR INC DEC
%token <data> INTEGER
%token <data> FLOAT
%left  <data> ADD SUB MUL QUO REM
%right <data> ASSIGN AND NOT DEFINE AND_NOT
%left  <data> OR XOR ARROW
%right <data> ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN QUO_ASSIGN REM_ASSIGN
%right <data> AND_ASSIGN OR_ASSIGN XOR_ASSIGN
%right <data> SHL_ASSIGN SHR_ASSIGN AND_NOT_ASSIGN COLON
%left  <data> LAND LOR EQL NEQ LEQ GEQ SEMICOLON
%left  <data> GTR LSS LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK COMMA PERIOD

%type <node> StartFile Expression Expression1 Expression2 Expression3 Expression4 Expression5
%type <node> Block StatementList Statement SimpleStmt int_lit Label FunctionName
%type <node> EmptyStmt IncDecStmt OPENB CLOSEB SYMTABS SYMTABE
%type <node> Assignment Declaration ConstDecl VarSpec string_lit Signature Result Parameters ParameterDecl ParameterDeclStar
%type <node> ConstSpec TopLevelDecl TopLevelDeclStar LabeledStmt // MethodDecl Receiver
%type <node> ReturnStmt BreakStmt ContinueStmt StructType
%type <node> FunctionDecl TypeList FunctionBody FunctionCall FunctionStmt FunctionType /* FunctionName Function */
%type <node> ForStmt ForClause InitStmt ArgumentList Arguments
%type <node> PostStmt Condition UnaryExpr PrimaryExpr AliasDecl TypeDef // FunctionLit
%type <node> Selector Index TypeDecl TypeSpecList TypeSpec VarDecl
%type <node> TypeAssertion ExpressionList ArrayType
%type <node> assign_op rel_op add_op mul_op unary_op byte_lit float_lit //Tag
%type <node> Operand Literal BasicLit OperandName ImportSpec IfStmt
%type <node> ImportPath PackageClause PackageName ImportDecl ImportDeclStar ImportSpecStar
%type <node> FieldDeclStar FieldDecl Type TypeLit ArrayLength TypeName
%type <node> PointerType IdentifierList IdentifierLIST BaseType 		//AlternatePackageName
%type <node> StructLiteral KeyValList

%%

/* START OF FILE */
StartFile:
    PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar {
		// cout << "I am inside the program" << endl;
		theprogram = new astnode("StartFile",false, {$1,$3,$4});}
    ;

Block:
	LBRACE OPENB StatementList CLOSEB RBRACE { $$ = newId($3, "Block"); }
	;

OPENB:
	/*empty*/ {
		$$ = new astnode();
		 currscope++;
		 fullscope = fullscope + "/" + to_string(currscope);
		 //cout<<fullscope<<endl;
	}
	;

CLOSEB:
	/*empty*/ {
		$$ = new astnode();
		 fullscope = fullscope.substr(0, fullscope.find_last_of("/") );
		 //cout<<fullscope<<endl;
	}
	;

SYMTABS:
	/*empty*/ {
		currscope++;
		fullscope = fullscope + "/" + to_string(currscope);

		curr_fcnscope = currscope;
		symtab = new symtab_t;
		symtab_top[fullscope] = symtab;
		//cout<<fullscope<<endl;
	}
	;

SYMTABE:
	/*empty*/ {
		fullscope = fullscope +"/"+ to_string(curr_fcnscope);	//$$ = new astnode($1->type,"Function", false, {$1, $3});

		//Type* a = symtype("a");
		//if( a==NULL ) *fp<<fullscope<<"-NULL-"<<endl;

		print_symtab();
		delete symtab;
		symtab = symtab_top["0"];
		fullscope = "0";
	}
	;

StatementList:
    StatementList Statement SEMICOLON { $$ = new astnode("StatementList", false, {$1, $2});}
    | Statement SEMICOLON { $$ = newId($1, "StatementList"); }
    ;

Statement:
	Declaration {$$ = newId($1, "Declaration");}
	| LabeledStmt {$$ = newId($1, "Declaration");}
	| SimpleStmt {$$ = newId($1, "Declaration");}
	| ReturnStmt {$$ = newId($1, "Declaration");}
	| BreakStmt {$$ = newId($1, "Declaration");}
	| ContinueStmt {$$ = newId($1, "Declaration");}
	| Block {$$ = newId($1, "Declaration");}
	| IfStmt {$$ = newId($1, "Declaration");}
	| ForStmt {$$ = newId($1, "Declaration");}
	| FunctionCall {$$ = newId($1, "Declaration");}
	| FunctionStmt {$$ = newId($1, "Declaration");}
	;

SimpleStmt:
	EmptyStmt {$$ = newId($1, "SimpleStmt");}
	| IncDecStmt {$$ = newId($1, "SimpleStmt");}
	| Assignment {$$ = newId($1, "SimpleStmt");}
	;

EmptyStmt:
	/*empty*/ { $$ = new astnode(); }
	;

LabeledStmt:
	Label COLON Statement {$$ = new astnode("LabeledStmt", false, {$1, new astnode(COLON), $3});}
	;

Label:
	IDENTIFIER {
		$$ = new astnode(IDENTIFIER, $1);
		$$->data=$1;

	}
	;

IncDecStmt:
	Expression INC {
		$$ = new astnode("IncDecStmt", false, {$1, new astnode(INC, $2)});
			string tac;
			tac.append(to_string(lineno));
			tac.append(",");
			tac.append("+");
			tac.append(",");
			tac.append($1->data->value);
			tac.append(",");
			tac.append($1->data->value);
			tac.append(",");
			tac.append("1");
			tac.append("\n");
			prog.push_back(tac);
			lineno++;
		}
	| Expression DEC {
		$$ = new astnode("IncDecStmt", false, {$1, new astnode(DEC, $2)});
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append("-");
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append("1");
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
	}
	;

Assignment:
	ExpressionList assign_op ExpressionList {
		$$ = new astnode("Assignment", false, {$1,$2, $3});
		string temp1 = $1->data->value;
		string temp2 = $3->data->value;
		vector <string> expr1 = split(temp1, ',');
		vector <string> expr2 = split(temp2, ',');

		// if there are unequal number of elements in either side of the assignment
		//cout << temp1 << " " << temp2 << endl;
		if(expr1.size() != expr2.size()){
			cout<<"Error: Incompatible assignment"<<endl;
			// probably shouldn't be putting exit(0) here not sure though
			exit(0);
		}

		// if it is a valid assignment
		else {
			string op = $2->data->value;

			if (op == "+=") {
				op = "+";
			}
			else if (op == "-=") {
				op = "-";
			}
			else if (op == "*=") {
				op = "*";
			}
			else if (op == "/=") {
				op = "/";
			}
			else if (op == "%=") {
				op = "%";
			}

			if (op == "=") {
				for (int i = 0; i < expr1.size(); i++) {
					string tac;
					tac.append(to_string(lineno));
					tac.append(",");
					tac.append("=");
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr2[i]);
					tac.append("\n");
					prog.push_back(tac);
					lineno++;
				}
			}
			else {
				for (int i = 0; i< expr1.size(); i++) {
					string tac;
					tac.append(to_string(lineno));
					tac.append(",");
					tac.append(op );
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr2[i]);
					tac.append("\n");
					prog.push_back(tac);
					lineno++;
				}
			}
		}
	}
	;

VarDecl:
		VAR VarSpec {$$ = new astnode("VarDecl", false, {new astnode(VAR, $1), $2});}
		;

VarSpec:
		IdentifierList Type ASSIGN ExpressionList { $$ = new astnode($2->type,"VarSpec", false, {$1, $2, new astnode(ASSIGN, $3),  $4});
			string temp1 = $1->data->value;
			string temp2 = $4->data->value;
			vector <string> expr1 = split(temp1, ',');
			vector <string> expr2 = split(temp2, ',');

			if (expr1.size() != expr2.size()) {
				cout<<"Error: Incompatible assignment"<<endl;
				exit(0);
			}
			else {
				symadd_list($1, $2->type, IDENTIFIER);
				for (int i = 0; i < expr1.size(); i++) {
					string tac;
					tac.append(to_string(lineno));
					tac.append(",");
					tac.append($3->value);
					tac.append(",");
					tac.append(expr1[i]);
					tac.append(",");
					tac.append(expr2[i]);
					tac.append("\n");
					prog.push_back(tac);
					lineno++;
				}
			}
		}
		| IdentifierList Type {$$ = new astnode($2->type,"VarSpec", false, {$1, $2});
			symadd_list($1, $2->type, IDENTIFIER);
			string temp1 = $1->data->value;
			string temp2 = $2->data->value;

			Type* typeInfo = $2->type;

			if (typeInfo->typeClass == ARRAY_TYPE) {
				ArrayType* arrayTypeInfo = (ArrayType*) typeInfo;
				string length = to_string(arrayTypeInfo->arrayLength);
				string tac = to_string(lineno);
				tac.append(",array,");
				tac.append(temp1);
				tac.append(",");
				tac.append(length);
				tac.append("\n");
				prog.push_back(tac);
				lineno++;
			}
		}
		;

Declaration:
	ConstDecl {
		$$ = newId($1, "Declaration");
		// nahi kr rha abhi toh
	}
	| TypeDecl {
		$$ = newId($1, "Declaration");
		// nahi kr rha abhi toh
	}
	| VarDecl {
		$$ = newId($1, "Declaration");
		// nahi kr rha abhi toh
	}
	;

///
FunctionDecl:
/*		FUNC FunctionName SYMTABS Function SYMTABE { $$ = new astnode("FunctionDecl", false, {$2, $4});
			//symadd($2->data->value, $4->type);
		}
*/
		FUNC FunctionName SYMTABS Signature {
				//this is a mid rule
				fullscope=fullscope.substr(0,fullscope.find_last_of("/"));currscope--;
				symtab_t* temp = symtab;
				symtab = symtab_top["0"];
				symadd($2->data->value, $4->type);
				symtab = temp;

		} FunctionBody SYMTABE {
			$$ = new astnode("FunctionDecl", false, {$2, $4, $6});
			prog.push_back(to_string(lineno)+",exit\n");//n  Ashok
			lineno++;
		}
		| FUNC FunctionName SYMTABS Signature SYMTABE { $$ = new astnode("FunctionDecl", false, {$2, $4});
			symadd($2->data->value, $4->type);
		}
		;


FunctionName:
		IDENTIFIER {$$ = new astnode(IDENTIFIER, $1);
			// TODO:: Ashutosh -- done
			$$->data=$1;
			//symadd($1->value, new FunctionType( ))

			string temp_str = $1->value;
			if(temp_str !="main") {
				string tac = to_string(lineno) + ",function," + $1->value + "\n";
				prog.push_back(tac);
				lineno++;
			}
			else{
				string tac = to_string(lineno) + ",label," + $1->value + "_prog\n";
				prog.push_back(tac);
				lineno++;
			}

		}
		;

/* taking care of that params scope same as fcn block using mid rule + normal end rule actions
Function:
		Signature {fullscope=fullscope.substr(0,fullscope.find_last_of("/"));currscope--;} FunctionBody {
			fullscope = fullscope +"/"+ to_string(currscope);
			$$ = new astnode($1->type,"Function", false, {$1, $3});
		}
		;
*/
FunctionBody:
		Block {$$ = newId($1, "FunctionBody");}
		;

FunctionStmt:
		VarDecl DEFINE FunctionCall {$$ = new astnode("FunctionStmt", false, {$1, $3});
			string tac;
			tac = to_string(lineno) + "," + "getreturn," + $1->data->value + "\n";
			prog.push_back(tac);
			lineno++;
		}
		| IDENTIFIER DEFINE FunctionCall {$$ = new astnode("FunctionStmt", false, {new astnode(IDENTIFIER, $1), $3});
			string tac;
			tac = to_string(lineno) + "," + "getreturn," + $1->value + "\n";
			prog.push_back(tac);
			lineno++;
		}
		;

FunctionCall:
		PrimaryExpr LPAREN ArgumentList RPAREN {
			$$ = new astnode("FunctionCall", false, {$1, $3});
			string str1 = $1->data->value;
			string str2 = "print";
			string str3 = "fmt.Println";
			string str4 = "fmt.Scanln";
			if(is_argument_list_empty.top() != 1) {
				string temp_str = $3->data->value;
				vector <string> vec_arguments = split(temp_str, ',');
					if(str1 != str2 && str1 !=str3 && str1!=str4){
						//param here
						for(int i=0;i<vec_arguments.size();i++){
							string tac;
							tac = to_string(lineno) + ",param," + vec_arguments[i] + "\n";
							prog.push_back(tac);
							lineno++;
						}
						string tac;
						tac = to_string(lineno) + ",call," + $1->data->value + "," + to_string(vec_arguments.size()) + "\n";
						prog.push_back(tac);
						lineno++;
					} else {
						if(str1==str2 || str1==str3){
							for(int i=0;i<vec_arguments.size();i++){
								string tac;
								tac = to_string(lineno) + ",print," + vec_arguments[i] + "\n";
								prog.push_back(tac);
								lineno++;
							}
						}
						if(str1 ==str4){
							for(int i=0; i<vec_arguments.size();i++){
								string tac = to_string(lineno)+",scan,"+vec_arguments[i]+"\n";
								prog.push_back(tac);
								lineno++;
							}
						}
					}
			}
			else {
				is_argument_list_empty.pop();
				string tac;
				tac = to_string(lineno) + ",call," + $1->data->value + ",0" + "\n";
				prog.push_back(tac);
				lineno++;

			}
		}
		;

ArgumentList:
		ArgumentList COMMA Arguments {$$ = new astnode("ArgumentList", false, {$1, $3});
			argumentlist_str = $1->data->value + "," + $3->data->value;
			$$->data->value = argumentlist_str;
		}
		| Arguments {$$ = newId($1, "ArgumentList");}
		| /*empty*/ { $$ = new astnode();
			is_argument_list_empty.push(1);
		}
		;

Arguments:	PrimaryExpr {$$ = newId($1, "Arguments");}
		| FunctionCall {$$ = newId($1, "Arguments");}
		;

Signature:
	Parameters {
		$$ = newId($1, "Signature");
	}
	| Parameters Result {
		vector <Type*> params = (static_cast<FunctionType*> ($1->type)) -> args;
		$$ = new astnode(new FunctionType(params,$2->type), "Signature", false, {$1, $2});}
	;

Result:
	LPAREN TypeList RPAREN {$$ = newId($2, "Result");}	/*no support atm */
	| Type {$$ = newId($1, "Result");}
	;

Parameters:
	LPAREN RPAREN {
		vector <Type*> a;
		$$ = new astnode(new FunctionType(a, NULL), LPAREN);
		$$->data->value = "";
	}
	| LPAREN ParameterDeclStar RPAREN {
		$$ = newId($2, "Parameters");
		string temp_str = $2->data->value;
		vector <string> vec_params = split(temp_str, ',');

		string tac_args = to_string(lineno) + ",args_num," + to_string(vec_params.size()) + "\n";
		prog.push_back(tac_args);
		lineno++;

		for(int i= vec_params.size()-1;i>=0;i--){
			string tac = to_string(lineno) + ",pop," + vec_params[i] + "," + to_string(vec_params.size()-i) + "\n";
			prog.push_back(tac);
			lineno++;
		}
	}
	| LPAREN ParameterDeclStar COMMA RPAREN {$$ = newId($2, "Parameters");} /* --COMMA WHY?-- */
	;

ParameterDeclStar:
	ParameterDecl {$$ = newId($1, "ParameterDeclStar");}
	| ParameterDeclStar COMMA ParameterDecl {
		vector<Type*> paramd = (static_cast<FunctionType*> ($3->type))->args;
		vector<Type*> paramstar = (static_cast<FunctionType*> ($1->type)) -> args;
		paramstar.insert( paramstar.end(), paramd.begin(), paramd.end());
		//(static_cast<FunctionType*> $$->type) -> args = paramstar;

		$$ = new astnode(new FunctionType(paramstar, NULL), "ParameterDeclStar", false, {$1, $3});

		string temp_str = $1->data->value + "," + $3->data->value;
		$$->data->value = temp_str;
	}
	;

ParameterDecl:
	IdentifierList Type {
		int num_ele = symadd_list($1, $2->type, IDENTIFIER);
		vector <Type*> tmp;
		for( int i=0; i<num_ele; i++) tmp.push_back($2->type);
		$$ = new astnode(new FunctionType(tmp, NULL) ,"ParameterDecl", false, {$1, $2});
	}
	| IdentifierList ELLIPSIS  Type {$$ = new astnode("ParameterDecl", false, {$1, new astnode(ELLIPSIS,$2), $3});}; 	/* no support for now ELLIPSIS*/
	| ELLIPSIS Type {$$ = new astnode("ParameterDecl", false, {new astnode(ELLIPSIS, $1), $2});} 						/* no support for now ELLIPSIS*/
	;

TypeList:
    TypeList COMMA Type {$$ = new astnode("TypeList", false, {$1, $3});}
    | Type {$$ = new astnode("TypeList", false, {$1});}
    ;

IdentifierList:
		IDENTIFIER IdentifierLIST {$$ = new astnode("IdentifierList", false, {new astnode(IDENTIFIER, $1), $2});
			string temp_str = $1->value + $2->data->value;
			$$->data->value = temp_str;
		}
		| IDENTIFIER {$$ = new astnode(IDENTIFIER, $1);
			$$->data = $1;
		}
		;

IdentifierLIST:	IdentifierLIST COMMA IDENTIFIER { $$ = new astnode("IdentifierLIST", false, {$1, new astnode(IDENTIFIER, $3)});
			string temp_str = $1->data->value + "," + $3->value;
			$$->data->value = temp_str;
		}
		| COMMA IDENTIFIER {//$$ = new astnode(IDENTIFIER, $2);
			$$ = new astnode("IdentifierLIST", false, {new astnode(IDENTIFIER, $2)});
			string temp_str = "," + $2->value;
			$$->data->value = temp_str;
		}
		;
/*
MethodDecl:
	FUNC Receiver IDENTIFIER Function {$$ = new astnode("MethodDecl", false, {$2, $4});};
	| FUNC Receiver IDENTIFIER Signature {$$ = new astnode("MethodDecl", false, {$2, $4});}
	;


Receiver:
	Parameters {$$ = newId($1, "Receiver");}
	;
*/

TopLevelDeclStar:
    TopLevelDeclStar SEMICOLON/*here colon*/ TopLevelDecl {$$ = new astnode("TopLevelDeclStar", false, {$1, $3});}
    | TopLevelDecl {$$ = newId($1, "TopLevelDeclStar");}
    ;

TopLevelDecl:
	Declaration {$$ = newId($1, "TopLevelDecl");}
	| FunctionDecl {$$ = newId($1, "TopLevelDecl");}
/*	| MethodDecl {$$ = newId($1, "TopLevelDecl");}  */
	;

TypeLit:
	ArrayType {$$ = newId($1, "TypeLit");}
	| StructType {$$ = newId($1, "TypeLit");}
	| PointerType {$$ = newId($1, "TypeLit");}
	| FunctionType {$$ = newId($1, "TypeLit");}
	;

Type:
	TypeName {$$ = newId($1, "Type");}
	| TypeLit {$$ = newId($1, "Type");}
	;

Operand:
	Literal {$$ = newId($1, "Operand");}
	| OperandName {
		$$ = newId($1, "Operand");
		Type *optype = symtype($1->data->value);
		if( optype == NULL ) { cout<<"ERROR: line "<<lineno<<" Undefined symbol "<< $1->data->value<<endl;}

	}
	| LPAREN Expression RPAREN {$$ = newId($2, "Operand");}
	;

OperandName:
	IDENTIFIER {$$ = new astnode(IDENTIFIER);
		$$->data = $1;
	}
	;

ReturnStmt:
	RETURN Expression {$$ = newId($2, "ReturnStmt");
		string tac = to_string(lineno) + ",return," + $2->data->value + "\n";
		lineno++;
		prog.push_back(tac);
	}
	| RETURN {$$ = new astnode(RETURN);
		string tac = to_string(lineno) + ",exit" + "\n";
		prog.push_back(tac);
		lineno++;
		$$->data->value = "";
	}
	;

BreakStmt:
	BREAK IDENTIFIER {$$ = new astnode("BreakStmt", false, {new astnode(BREAK, $1), new astnode(IDENTIFIER, $2)});}
	| BREAK {$$ = new astnode(BREAK);
		string tac = to_string(lineno) + ",goto," + for_endlabels.top() + "\n";
		prog.push_back(tac);
		lineno++;
	}
	;

ContinueStmt:
	CONTINUE IDENTIFIER {$$ = new astnode("ContinueStmt", false, {new astnode(BREAK, $1), new astnode(IDENTIFIER, $2)});}
	| CONTINUE {$$ = new astnode(CONTINUE);}
	;

IfStmt:
	IF OPENB Expression if_mark1 Block if_mark2 CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5});}
	|IF OPENB SimpleStmt SEMICOLON Expression if_mark1 Block CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5, $7});}
	|IF OPENB SimpleStmt SEMICOLON Expression if_mark1 Block if_markend1 ELSE IfStmt CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5, $7, $10});}
	|IF OPENB SimpleStmt SEMICOLON Expression if_mark1 Block if_markend1 ELSE  Block CLOSEB {$$ = new astnode("IfStmt", false, {$3, $5, $7, $10});}
	|IF OPENB Expression if_mark1 Block if_markend1 ELSE if_mark22 IfStmt if_markend2 CLOSEB if_markend {$$ = new astnode("IfStmt", false, {$3, $5, $9});}
	|IF OPENB Expression if_mark1 Block if_markend1 ELSE  if_mark22 Block if_markend2 CLOSEB if_markend {$$ = new astnode("IfStmt", false, {$3, $5, $9});}
	;

if_mark1: {
	string tac;
	tac = to_string(lineno) + ",ifgoto,=,";
	string togo_label = get_label();
	tac = "t"+to_string(tempno-1)+",1,"+togo_label+"\n";
	prog.push_back(tac);
	lineno++;
	//
	tac=to_string(lineno) + "," + "goto," ;
	string topush_label = get_label();
	if_bwlabels.push(topush_label);
	tac = tac + topush_label+"\n";//TO correct
	prog.push_back(tac);
	lineno++;
	//
	tac=to_string(lineno) + ",label," + togo_label + "\n";
	prog.push_back(tac);
	lineno++;
};

if_mark2: {
	string tac;
	tac=to_string(lineno) + ",label,";
	string toget_label = if_bwlabels.top();
	if_bwlabels.pop();
	tac = tac + toget_label+"\n";//TO correct
	prog.push_back(tac);
	lineno++;
};

if_markend1: {
		string tac;
		//
		tac=to_string(lineno) + ",goto,";
		string topush_label = get_label();
		if_endlabels.push(topush_label);
		tac = tac + topush_label+"\n";//TO correct
		prog.push_back(tac);
		lineno++;
		//
	};

if_mark22: {
		string tac;
		tac=to_string(lineno) + ",label,";
		string toget_label = if_bwlabels.top();
		if_bwlabels.pop();
		tac = tac + toget_label+"\n";//TO correct
		prog.push_back(tac);
		lineno++;
	};

if_markend2: {
		string tac;
		tac=to_string(lineno) + ",goto,";
		string toget_label = if_endlabels.top();
		tac = tac + toget_label+"\n";//TO correct
		prog.push_back(tac);
		lineno++;
	};
if_markend: {
		string tac;
		tac=to_string(lineno) + ",label,";
		string togo_label = if_endlabels.top();	//top of second stack
		if_endlabels.pop();				//pop here
		tac = tac + togo_label+"\n";//TO correct
		prog.push_back(tac);
		lineno++;
	};

ForStmt:
	FOR OPENB for_initmark Condition for_mark1 Block for_mark2 CLOSEB for_markend1 {$$ = new astnode("ForStmt", false, {$4, $6});}
	|FOR OPENB for_initmark ForClause Block for_mark22 CLOSEB for_markend1 {$$ = new astnode("ForStmt", false, {$4, $5});}
	;

Condition:
	Expression {$$ = newId($1, "Condition");}
	;

ForClause:
	InitStmt for_clause_mark1 SEMICOLON Condition for_clause_mark2 SEMICOLON PostStmt for_clause_mark3 {$$ = new astnode("ForClause", false, {$1, $4, $7});}
	;

InitStmt:
	SimpleStmt {$$ = newId($1, "InitStmt");}
	;

PostStmt:
	SimpleStmt {$$ = newId($1, "InitStmt");}
	;

for_clause_mark1:{
		for_initlabels.pop();
		for_continuelabels.pop();
		string tac;
		tac = to_string(lineno);
		string for_initlabel = get_label();
		tac = tac + ",label,"+for_initlabel+"\n";
		for_initlabels.push(for_initlabel);
		prog.push_back(tac);
		lineno++;

	};

for_clause_mark2: {
		//
		string tac;
		tac=to_string(lineno) + ",ifgoto,=,";
		string togo_label = get_label();
		tac = tac + "t"+to_string(tempno-1)+",1,"+togo_label+"\n";
		prog.push_back(tac);
		lineno++;
		//
		tac=to_string(lineno) + ",goto,";
		string for_endlabel = get_label();
		tac = tac + for_endlabel+"\n";
		for_endlabels.push(for_endlabel);
		prog.push_back(tac);
		lineno++;
		//
		tac=to_string(lineno) + ",label," + togo_label+"\n";
		prog.push_back(tac);
		lineno++;
		//
		//
		tac=to_string(lineno) + ",goto,";
		string for_blocklabel = get_label();
		tac = tac + for_blocklabel+"\n";
		for_blocklabels.push(for_blocklabel);
		prog.push_back(tac);
		lineno++;
		//
		tac=to_string(lineno) + ",label,";
		string for_postlabel = get_label();
		tac = tac + for_postlabel+"\n";
		for_postlabels.push(for_postlabel);
		for_continuelabels.push(for_postlabel);
		prog.push_back(tac);
		lineno++;

	};

for_clause_mark3:
		{
		//
		string tac;
		tac=to_string(lineno) + ",goto,";
		string togo_label = for_initlabels.top();
		for_initlabels.pop();
		//for_continuelabels.pop();
		tac = tac + togo_label+"\n";
		prog.push_back(tac);
		lineno++;
		//
		tac=to_string(lineno) + ",label,";
		string for_blocklabel = for_blocklabels.top();
		tac = tac + for_blocklabel+"\n";
		for_blocklabels.pop();
		prog.push_back(tac);
		lineno++;
	};

for_mark22: {
		string tac;
		tac=to_string(lineno) + ",goto,";
		string togo_postlabel = for_postlabels.top();
		for_postlabels.pop();
		tac = tac + togo_postlabel+"\n";
		prog.push_back(tac);
		lineno++;
	};

//for - 1
for_initmark:{
		string tac;
		tac = to_string(lineno);
		string for_initlabel = get_label();
		tac = tac + ",label,"+for_initlabel+"\n";
		for_initlabels.push(for_initlabel);
		for_continuelabels.push(for_initlabel);
		prog.push_back(tac);
		lineno++;
	};

for_mark1: {
		//
		string tac;
		tac=to_string(lineno) + ",ifgoto,=,";
		string togo_label = get_label();
		tac = tac + "t"+to_string(tempno-1)+",1,"+togo_label+"\n";
		prog.push_back(tac);
		lineno++;
		//
		tac=to_string(lineno) + ",goto,";
		string for_endlabel = get_label();
		tac = tac + for_endlabel+"\n";
		for_endlabels.push(for_endlabel);
		prog.push_back(tac);
		lineno++;
		//
		tac=to_string(lineno) + ",label," + togo_label + "\n";
		prog.push_back(tac);
		lineno++;
	};

for_mark2: {
		string tac;
		tac=to_string(lineno) + ",goto,";
		string togo_label = for_initlabels.top();
		for_initlabels.pop();
		//for_continuelabels.pop();
		tac = tac + togo_label+"\n";
		prog.push_back(tac);
		lineno++;
	};

for_markend1: {
		string tac;
		tac=to_string(lineno) + ",label,";
		string for_endlabel = for_endlabels.top();
		for_endlabels.pop();
		for_continuelabels.pop();
		tac = tac + for_endlabel+"\n";
		prog.push_back(tac);
		lineno++;
	};

int_lit:
	INTEGER  { $$ = new astnode(new DefinedType("int"), INTEGER, $1);
		$$->data = $1;
	}
	;

float_lit:
	  FLOAT { $$ = new astnode(new DefinedType("float"), FLOAT, $1);
	  	$$->data = $1;
	  }
	  ;

TypeName:
	IDENTIFIER { $$ = new astnode(IDENTIFIER,$1);
		$$->data = $1;
	}
	| VAR_TYPE { $$ = new astnode(new DefinedType($1->value), VAR_TYPE, $1);
		$$->data = $1;
	}
	;
ArrayType:
	LBRACK ArrayLength RBRACK Type {
		//atm assuming arraylenth = +ve integer only
		$$ = new astnode( new ArrayType( stoi($2->data->value), $4->type), "ArrayType" ,false, {$2,$4});
		string temp_str = $1->value + $2->data->value + $3->value + $4->data->value;
		$$->data->value = temp_str;
	}
	;

ArrayLength:
	Expression { $$ = newId($1, "ArrayLength"); }
	;

StructType:
    STRUCT LBRACE FieldDeclStar RBRACE { $$ = newId($3, "StructType"); }
    | STRUCT LBRACE RBRACE { $$ = new astnode(STRUCT, $1); }
    ;

FieldDeclStar:
    FieldDecl SEMICOLON { $$ = newId($1, "FieldDeclStar"); }
    | FieldDeclStar FieldDecl SEMICOLON {
    	umap<string, Type*> tmp_declstar = static_cast<StructType*>($1->type)->membs;
    	umap<string, Type*> tmp_decl = static_cast<StructType*>($2->type)->membs;
    	tmp_declstar.insert( tmp_decl.begin(), tmp_decl.end() );
    	$$ = new astnode( new StructType("" , tmp_declstar) ,"FieldDeclStar",false,{$1,$2});
    }
    ;

FieldDecl:
	IdentifierList Type {
		vector<string> memb_names = split( $1->data->value, ',');
		umap <string, Type*> tmp;

		for( auto i : memb_names ) {
			tmp[i] = $2->type;
		}
		$$ = new astnode(new StructType("", tmp), "FieldDecl", false,{$1,$2});

	}
	/*	| IdentifierList Type Tag { $$ = new astnode("FieldDecl",false,{$1,$2,$3}); }	*/
	;

/*
Tag:
	STRING { $$ = new astnode(new DefinedType("string"), STRING, $1);
		$$->data = $1;
	}
	;
*/

PointerType:
	MUL BaseType { $$ = new astnode(new PntrType($2->type),"PointerType",false,{$2});
		string temp_str = $1->value + $2->data->value;
		$$->data->value = temp_str;
	}
	;
BaseType:
	Type { $$ = new astnode($1->type, "BaseType", false,{$1}); }
	;

// NOTE- Fill type information properly
FunctionType:
	FUNC Signature { $$ = newId($2, "FunctionType"); }
	;

ConstDecl:
		CONST ConstSpec { $$ = newId($2, "ConstDecl"); $$->type->cons=true; }
		;

ConstSpec:
		IDENTIFIER Type ASSIGN Expression { $$ = new astnode( $2->type ,"ConstSpec",false,{$2,$4});
			symadd($1->value, $2->type);
			//cout<<"SCOPE"<<any_scope("test")<<endl;
			$$->data = $1;
			string tac = to_string(lineno);
			tac.append(",=,");
			tac.append($1->value);
			tac.append(",");
			tac.append($4->data->value);
			tac.append("\n");
			prog.push_back(tac);
			lineno++;
		}
		| IDENTIFIER Type { $$ = newId($2, "ConstSpec");
			symadd($1->value, $2->type);
			$$->data = $1;
		}
		;

ExpressionList:
		ExpressionList COMMA Expression { $$ = new astnode("ExpressionList",false,{$1,$3});
			$$->data->value = $1->data->value + "," + $3->data->value;
		}
		| Expression { $$ = newId($1, "ExpressionList"); }
		;

TypeDecl:
		TYPE  TypeSpec { $$ = new astnode("TypeDecl",false,{new astnode(TYPE,$1),$2}); }
		| TYPE LPAREN TypeSpecList RPAREN { $$ = new astnode("TypeDecl",false,{new astnode(TYPE,$1), $3}); } /* LATER (sh) */
		;

TypeSpecList:
		TypeSpecList TypeSpec SEMICOLON { $$ = new astnode("TypeSpecList",false,{$1,$2}); }
		| TypeSpec SEMICOLON { $$ = newId($1, "TypeSpecList"); }
		;
TypeSpec:
		AliasDecl { $$ = newId($1, "TypeSpec"); }
		| TypeDef { $$ = newId($1, "TypeSpec"); }
		;

AliasDecl:
		IDENTIFIER ASSIGN Type { $$ = new astnode("AliasDecl",false,{new astnode(IDENTIFIER,$1), new astnode(ASSIGN,$2), $3}); }
		;

TypeDef:
		IDENTIFIER Type {
			$$ = new astnode("TypeDef",false,{new astnode(IDENTIFIER,$1), $2});
			static_cast<StructType*>($2->type) ->structName = $1->value;
			symadd($1->value, $2->type);
		}
		;

Literal:
	BasicLit { $$ = newId($1, "Literal"); }
/*	| FunctionLit { $$ = newId($1, "Literal"); } */
	;

string_lit:
	STRING {
		// cout << "I am a string lite" << endl;
		$$ = new astnode(new DefinedType("string") , STRING, $1);
		$$->data = $1;
	}
	;

byte_lit:
	BYTE  {
		$$ = new astnode(new DefinedType("byte") , BYTE, $1);
		$$->data = $1;
	}
	;

BasicLit:
	int_lit { $$ = newId($1, "BasicLit"); }
	| float_lit { $$ = newId($1, "BasicLit"); }
	| string_lit {
		$$ = newId($1, "BasicLit");
		string temp_str = $1->data->value;
		string temp_var = get_temp_strvar();
		string tac = to_string(lineno) + ",string," + temp_var + "," + temp_str + "\n";
		prog.push_back(tac);
		lineno++;
		$$->data->value = temp_var;
	}
	| byte_lit { $$ = newId($1, "BasicLit"); }
	;

/*
FunctionLit:
	FUNC Function { $$ = new astnode("FunctionLit",false,{new astnode(FUNC,$1), $2}); }
	;
*/

PrimaryExpr:
	Operand { $$ = newId($1, "PrimaryExpr"); }
	| PrimaryExpr Selector { $$ = new astnode("PrimaryExpr",false,{$1,$2});
		$$->data->value = $1->data->value + $2->data->value;
	}
	| PrimaryExpr Index { $$ = new astnode("PrimaryExpr",false,{$1,$2});
		$$->data->value = $1->data->value + $2->data->value;
	}
	| PrimaryExpr TypeAssertion { $$ = new astnode("PrimaryExpr",false,{$1,$2}); }
	| OperandName StructLiteral { $$ = new astnode("PrimaryExpr",false,{$1,$2}); }
	;

StructLiteral:
    LBRACE KeyValList RBRACE { $$ = newId($2, "StructLiteral"); }
    ;

KeyValList:
    	/* empty */ { $$ = new astnode(); }
 	| Expression COLON Expression { $$ = new astnode("",false,{$1,$3}); }
	| KeyValList COMMA Expression COLON Expression { $$ = new astnode("",false,{$1,$3,$5}); }
	;

Selector:
	PERIOD IDENTIFIER { $$ = new astnode("Selector",false,{new astnode(PERIOD,$1), new astnode(IDENTIFIER,$2)});
		string temp_str = $1->value + $2->value;
		$$->data->value = temp_str;
	}
	;
Index:
	LBRACK Expression RBRACK { $$ = newId($2, "Index");
		string temp_str = "[" + $2->data->value + "]";
		$$->data->value = temp_str;
	}
	;


TypeAssertion:
	PERIOD LPAREN Type RPAREN { $$ = new astnode("TypeAssertion",false,{new astnode(PERIOD, $1), $3}); }
	;

// The below expression{number} is written because of the conflict between the
// expression when the binary operations are used with a single rule

// TODO - Fill Type fields after type resolution
// TODO - Shorten this expression tree
Expression:
    Expression1 { $$ = newId($1,"Expression");}
    ;

Expression1:
    Expression1 LOR Expression2 { $$ = new astnode("Expression1",false,{$1,new astnode(LOR),$3});
	    string temp_var = get_tempvar();
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append($2->value);
		tac.append(",");
		tac.append(temp_var);
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append($3->data->value);
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
		$$->data->value = temp_var;
	}
    | Expression2 { newId($1,"Expression1"); }
    ;

Expression2:
    Expression2 LAND Expression3 { $$ = new astnode("Expression2",false,{$1,new astnode(LAND),$3});
		string temp_var = get_tempvar();
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append($2->value);
		tac.append(",");
		tac.append(temp_var);
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append($3->data->value);
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
		$$->data->value = temp_var;
	}
    | Expression3 { newId($1,"Expression2"); }
    ;

Expression3:
    Expression3 rel_op Expression4 { $$ = new astnode("Expression3",false,{$1,$2,$3});

		string temp_var = get_tempvar();
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append($2->data->value);
		tac.append(",");
		tac.append(temp_var);
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append($3->data->value);
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
		$$->data->value = temp_var;

	}
    | Expression4 { newId($1,"Expression3"); }
    ;

Expression4:
    Expression4 add_op Expression5 { $$ = new astnode("Expression4",false,{$1,$2,$3});
		string temp_var = get_tempvar();
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append($2->data->value);
		tac.append(",");
		tac.append(temp_var);
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append($3->data->value);
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
		$$->data->value = temp_var;
	}
    | Expression5 { newId($1,"Expression4"); }
    ;

Expression5:
    Expression5 mul_op PrimaryExpr { $$ = new astnode("Expression5",false,{$1,$2,$3});
		string temp_var = get_tempvar();
		string tac;
		tac.append(to_string(lineno));
		tac.append(",");
		tac.append($2->data->value);
		tac.append(",");
		tac.append(temp_var);
		tac.append(",");
		tac.append($1->data->value);
		tac.append(",");
		tac.append($3->data->value);
		tac.append("\n");
		prog.push_back(tac);
		lineno++;
		$$->data->value = temp_var;
	}
    | UnaryExpr { $$ = newId($1, "Expression5"); }
    ;

UnaryExpr:
	PrimaryExpr { $$ = newId($1,"UnaryExpr"); }
	| unary_op PrimaryExpr { $$ = new astnode("UnaryExpr",false,{$1,$2});
		//TODO
		string temp_str = $1->data->value + $2->data->value;
		$$->data->value = temp_str;
		//for now its pushing -5, *6 sort of things
	}
	//UnaryExpr
	;


rel_op:
	EQL   { $$ = new astnode(EQL, $1);
		$$->data = $1;
	}
	| NEQ { $$ = new astnode(NEQ, $1);
	 	$$->data = $1;
	}
	| LSS { $$ = new astnode(LSS, $1);
	 	$$->data = $1;
	}
	| LEQ { $$ = new astnode(LEQ, $1);
	 	$$->data = $1;
	}
	| GTR { $$ = new astnode(GTR, $1);
	 	$$->data = $1;
	}
	| GEQ { $$ = new astnode(GEQ, $1);
	 	$$->data = $1;
	}
	;

add_op:
	ADD { $$ = new astnode(ADD, $1);
		$$->data = $1;
	}
	| SUB { $$ = new astnode(SUB, $1);
		$$->data = $1;
	}
	| OR  { $$ = new astnode(OR, $1);
		$$->data = $1;
	}
	| XOR { $$ = new astnode(XOR, $1);
		$$->data = $1;
	}
	;

mul_op:
	MUL   { $$ = new astnode(MUL, $1);
		$$->data = $1;
	}
	| QUO { $$ = new astnode(QUO, $1);
		$$->data = $1;
	}
	| REM { $$ = new astnode(REM, $1);
		$$->data = $1;
	}
	| SHL { $$ = new astnode(SHL, $1);
		$$->data = $1;
	}
	| SHR { $$ = new astnode(SHR, $1);
		$$->data = $1;
	}
	| AND { $$ = new astnode(AND, $1);
		$$->data = $1;
	}
	| AND_NOT  { $$ = new astnode(AND_NOT, $1);
		$$->data = $1;
	}
	;

unary_op:
	ADD  { $$ = new astnode(ADD, $1);
		$$->data = $1;
	}
	| SUB { $$ = new astnode(SUB, $1);
		$$->data = $1;
	}
	| NOT { $$ = new astnode(NOT, $1);
		$$->data = $1;
	}
	| XOR { $$ = new astnode(XOR, $1);
		$$->data = $1;
	}
	| MUL { $$ = new astnode(MUL, $1);
		$$->data = $1;
	}
	| AND { $$ = new astnode(AND, $1);
		$$->data = $1;
	}
	;

assign_op:
	ASSIGN { $$ = new astnode(ASSIGN, $1);
		$$->data = $1;
	}
	| ADD_ASSIGN { $$ = new astnode(ADD_ASSIGN, $1);
		$$->data = $1;
	}
	| SUB_ASSIGN { $$ = new astnode(SUB_ASSIGN, $1);
		$$->data = $1;
	}
	| MUL_ASSIGN { $$ = new astnode(MUL_ASSIGN, $1);
		$$->data = $1;
	}
	| QUO_ASSIGN { $$ = new astnode(QUO_ASSIGN, $1);
		$$->data = $1;
	}
	| REM_ASSIGN { $$ = new astnode(REM_ASSIGN, $1);
		$$->data = $1;
	}
	;

PackageClause:
	PACKAGE PackageName { $$ = new astnode("PackageClause", false, {new astnode(PACKAGE), $2});
		string tac = to_string(lineno) + ",goto," + $2->data->value + "_prog\n";
		prog.push_back(tac);
		lineno++;
	}
	;

PackageName:
	IDENTIFIER { $$ = new astnode(new DefinedType("fillTypeUsingSymbolTable"),IDENTIFIER, $1);
		$$->data = $1;
	}
	;

ImportDeclStar:
    ImportDeclStar ImportDecl { $$ = new astnode("ImportDeclStar", false,{$1,$2});}
    | ImportDecl { $$ = newId($1, "ImportDeclStar"); }
    | /*empty*/ { $$ = new astnode(); }
    ;

ImportDecl:
	IMPORT ImportSpec SEMICOLON {
		// cout << "I am inside import decl" << endl;
		$$ = new astnode("ImportDecl", false, {new astnode(IMPORT),$2}); }
	| IMPORT LPAREN ImportSpecStar RPAREN { $$ = new astnode("ImportDecl", false, {new astnode(IMPORT), $3}); }
	;

ImportSpecStar:
	ImportSpecStar ImportSpec SEMICOLON { $$ = new astnode("ImportSpecStar", false, {$1,$2}); }
	| ImportSpec SEMICOLON { $$ = newId($1, "ImportSpecStar"); }
	;

ImportSpec:
    ImportPath {
		// cout << "I am inside import spec" << endl;
		$$ = newId($1,"ImportSpec"); }

	;

ImportPath:
	string_lit  { $$ = newId($1,"ImportPath"); symadd(prep_str($1->data->value) , $1->type);}
	;

/*
AlternatePackageName:
	string_lit {
		// cout << "I am insdiee the alternatepackagename" << endl;
		$$ = newId($1, "AlternatePackageName");
		// cout << "hello world" <<endl;
		}
	;
*/
%%


int nodeId = 0;
void prettyPrint(ofstream& astFile, astnode* root){
	astFile << nodeId << " [label=\"" << root->id << "\"]" << endl;
	int parentId = nodeId;
	for(auto child : root->children){
		astFile << parentId << "->" << ++nodeId << endl;
		prettyPrint(astFile , child);
	}
}

int main (int argc, char **argv) {

	is_argument_list_empty.push(0);

	int fileNo = atoi(argv[1]);
	symbolTable.open("symbolTable" + to_string(fileNo) + ".txt");
	fp =  & symbolTable;

	yyparse ( );

	print_symtab();
	symbolTable.close();

	ofstream astFile;
	astFile.open("ast" + to_string(fileNo) + ".dot" );
	if(!astFile) {
		cout << "couldn't open file" << endl;
		exit(1);
	}
	astFile << "digraph \"src/parser.ypp\" \n { \n node [fontname = courier, shape = box, colorscheme = paired6] \n edge [fontname = courier]" << endl;
	prettyPrint(astFile, theprogram);
	astFile << "}" << endl;
	astFile.close();

	fstream temp_stream;
	temp_stream.open("temporary.ir",ios_base::out);
	for(int i=0;i<prog.size();i++){
		temp_stream << prog[i];
	}
}
