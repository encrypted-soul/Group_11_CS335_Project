commit 64d1dcd4aa65161560034b09a3d1e1ecfa00cab3
Author: Abhay Mishra <mishraabhay9179913420@gmail.com>
Date:   Tue Mar 29 00:17:41 2022 +0530

    AST: Optimised ast added

diff --git a/.Makefile.swo b/.Makefile.swo
deleted file mode 100644
index 74c37a3..0000000
Binary files a/.Makefile.swo and /dev/null differ
diff --git a/Makefile b/Makefile
index 64c6736..e39db44 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@ all:
 	bison --graph src/parser.ypp
 	flex src/lex.l
 	mkdir -p bin
-	g++ -std=c++17 src/data.cpp src/type.cpp src/ast.cpp src/symtab.cpp lex.yy.c parser.tab.cpp -o bin/parser
+	g++ -std=c++17 src/data.cpp src/type.cpp src/ast.cpp lex.yy.c parser.tab.cpp -o bin/parser
 	chmod +x bin/parser

 generate_parser:
diff --git a/ast.dot b/ast.dot
new file mode 100644
index 0000000..0047fa3
--- /dev/null
+++ b/ast.dot
@@ -0,0 +1,174 @@
+digraph "src/parser.ypp"
+ {
+ node [fontname = courier, shape = box, colorscheme = paired6]
+ edge [fontname = courier]
+0 [label="StartFile"]
+0->1
+1 [label="PackageClause"]
+1->2
+2 [label="258"]
+1->3
+3 [label="279"]
+0->4
+4 [label=""]
+0->5
+5 [label="TopLevelDeclStar"]
+5->6
+6 [label="279"]
+5->7
+7 [label="Function"]
+7->8
+8 [label="Signature"]
+7->9
+9 [label="FunctionBody"]
+9->10
+10 [label="StatementList"]
+10->11
+11 [label="StatementList"]
+11->12
+12 [label="StatementList"]
+12->13
+13 [label="StatementList"]
+13->14
+14 [label="StatementList"]
+14->15
+15 [label="StatementList"]
+15->16
+16 [label="275"]
+15->17
+17 [label="VarSpec"]
+17->18
+18 [label="279"]
+17->19
+19 [label="Type"]
+17->20
+20 [label="294"]
+17->21
+21 [label="ExpressionList"]
+14->22
+22 [label="Declaration"]
+22->23
+23 [label="275"]
+22->24
+24 [label="VarSpec"]
+24->25
+25 [label="279"]
+24->26
+26 [label="Type"]
+26->27
+27 [label="ArrayLength"]
+26->28
+28 [label="Type"]
+13->29
+29 [label="Declaration"]
+29->30
+30 [label="ExpressionList"]
+30->31
+31 [label="PrimaryExpr"]
+30->32
+32 [label="Index"]
+29->33
+33 [label="294"]
+29->34
+34 [label="ExpressionList"]
+12->35
+35 [label="Declaration"]
+35->36
+36 [label="ExpressionList"]
+36->37
+37 [label="PrimaryExpr"]
+36->38
+38 [label="Index"]
+35->39
+39 [label="294"]
+35->40
+40 [label="ExpressionList"]
+11->41
+41 [label="Declaration"]
+41->42
+42 [label="ExpressionList"]
+42->43
+43 [label="PrimaryExpr"]
+42->44
+44 [label="Index"]
+41->45
+45 [label="294"]
+41->46
+46 [label="ExpressionList"]
+10->47
+47 [label="Declaration"]
+47->48
+48 [label="Expression"]
+48->49
+49 [label="Expression3"]
+48->50
+50 [label="318"]
+48->51
+51 [label="Expression4"]
+47->52
+52 [label="Block"]
+52->53
+53 [label="ExpressionList"]
+53->54
+54 [label="PrimaryExpr"]
+53->55
+55 [label="Index"]
+52->56
+56 [label="294"]
+52->57
+57 [label="ExpressionList"]
+57->58
+58 [label="Expression4"]
+58->59
+59 [label="PrimaryExpr"]
+58->60
+60 [label="Index"]
+57->61
+61 [label="289"]
+57->62
+62 [label="Expression5"]
+9->63
+63 [label="Declaration"]
+63->64
+64 [label="Expression"]
+64->65
+65 [label="Expression3"]
+64->66
+66 [label="319"]
+64->67
+67 [label="Expression4"]
+63->68
+68 [label="Block"]
+68->69
+69 [label="ExpressionList"]
+69->70
+70 [label="PrimaryExpr"]
+69->71
+71 [label="Index"]
+68->72
+72 [label="294"]
+68->73
+73 [label="ExpressionList"]
+73->74
+74 [label="Expression4"]
+74->75
+75 [label="PrimaryExpr"]
+74->76
+76 [label="Index"]
+73->77
+77 [label="290"]
+73->78
+78 [label="Expression5"]
+63->79
+79 [label="Block"]
+79->80
+80 [label="ExpressionList"]
+80->81
+81 [label="PrimaryExpr"]
+80->82
+82 [label="Index"]
+79->83
+83 [label="294"]
+79->84
+84 [label="ExpressionList"]
+}
diff --git a/ast.png b/ast.png
new file mode 100644
index 0000000..e79e6b7
Binary files /dev/null and b/ast.png differ
diff --git a/bin/parser b/bin/parser
index ee57fa8..1c6e499 100755
Binary files a/bin/parser and b/bin/parser differ
diff --git a/new_parser.gv b/new_parser.gv
deleted file mode 100644
index a6d8264..0000000
--- a/new_parser.gv
+++ /dev/null
@@ -1,2229 +0,0 @@
-// Generated by GNU Bison 3.8.
-// Report bugs to <bug-bison@gnu.org>.
-// Home page: <https://www.gnu.org/software/bison/>.
-
-digraph "src/parser.ypp"
-{
-  node [fontname = courier, shape = box, colorscheme = paired6]
-  edge [fontname = courier]
-
-  0 [label="0"]
-  0 -> 1 [style=solid label="PACKAGE"]
-  0 -> 2 [style=dashed label="StartFile"]
-  0 -> 3 [style=dashed label="PackageClause"]
-  1 [label="1"]
-  1 -> 4 [style=solid label="IDENTIFIER"]
-  1 -> 5 [style=dashed label="PackageName"]
-  2 [label="2"]
-  2 -> 6 [style=solid label="$end"]
-  3 [label="3"]
-  3 -> 7 [style=solid label="SEMICOLON"]
-  4 [label="4"]
-  4 -> "4R191" [style=solid]
- "4R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
-  5 [label="5"]
-  5 -> "5R190" [style=solid]
- "5R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
-  6 [label="6"]
-  6 -> "6R0" [style=solid]
- "6R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
-  7 [label="7"]
-  7 -> 8 [style=solid label="IMPORT"]
-  7 -> 9 [style=dashed label="ImportDeclStar"]
-  7 -> 10 [style=dashed label="ImportDecl"]
-  7 -> "7R194d" [label="[IMPORT]", style=solid]
- "7R194d" [label="R194", fillcolor=5, shape=diamond, style=filled]
-  7 -> "7R194" [style=solid]
- "7R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
-  8 [label="8"]
-  8 -> 11 [style=solid label="STRING"]
-  8 -> 12 [style=solid label="LPAREN"]
-  8 -> 13 [style=solid label="PERIOD"]
-  8 -> 14 [style=dashed label="string_lit"]
-  8 -> 15 [style=dashed label="ImportSpec"]
-  8 -> 16 [style=dashed label="AlternatePackageName"]
-  9 [label="9"]
-  9 -> 8 [style=solid label="IMPORT"]
-  9 -> 17 [style=solid label="FUNC"]
-  9 -> 18 [style=solid label="CONST"]
-  9 -> 19 [style=solid label="TYPE"]
-  9 -> 20 [style=solid label="VAR"]
-  9 -> 21 [style=dashed label="VarDecl"]
-  9 -> 22 [style=dashed label="Declaration"]
-  9 -> 23 [style=dashed label="FunctionDecl"]
-  9 -> 24 [style=dashed label="MethodDecl"]
-  9 -> 25 [style=dashed label="TopLevelDeclStar"]
-  9 -> 26 [style=dashed label="TopLevelDecl"]
-  9 -> 27 [style=dashed label="ConstDecl"]
-  9 -> 28 [style=dashed label="TypeDecl"]
-  9 -> 29 [style=dashed label="ImportDecl"]
-  10 [label="10"]
-  10 -> "10R193" [style=solid]
- "10R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
-  11 [label="11"]
-  11 -> "11R129" [style=solid]
- "11R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
-  12 [label="12"]
-  12 -> 11 [style=solid label="STRING"]
-  12 -> 13 [style=solid label="PERIOD"]
-  12 -> 14 [style=dashed label="string_lit"]
-  12 -> 30 [style=dashed label="ImportSpecStar"]
-  12 -> 31 [style=dashed label="ImportSpec"]
-  12 -> 16 [style=dashed label="AlternatePackageName"]
-  13 [label="13"]
-  13 -> 11 [style=solid label="STRING"]
-  13 -> 32 [style=dashed label="string_lit"]
-  13 -> 33 [style=dashed label="ImportPath"]
-  14 [label="14"]
-  14 -> "14R203" [style=solid]
- "14R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
-  15 [label="15"]
-  15 -> 34 [style=solid label="SEMICOLON"]
-  16 [label="16"]
-  16 -> 11 [style=solid label="STRING"]
-  16 -> 32 [style=dashed label="string_lit"]
-  16 -> 35 [style=dashed label="ImportPath"]
-  16 -> "16R201" [style=solid]
- "16R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
-  17 [label="17"]
-  17 -> 36 [style=solid label="IDENTIFIER"]
-  17 -> 37 [style=solid label="LPAREN"]
-  17 -> 38 [style=dashed label="Parameters"]
-  17 -> 39 [style=dashed label="Receiver"]
-  18 [label="18"]
-  18 -> 40 [style=solid label="IDENTIFIER"]
-  18 -> 41 [style=dashed label="ConstSpec"]
-  19 [label="19"]
-  19 -> 42 [style=solid label="IDENTIFIER"]
-  19 -> 43 [style=solid label="LPAREN"]
-  19 -> 44 [style=dashed label="TypeSpec"]
-  19 -> 45 [style=dashed label="AliasDecl"]
-  19 -> 46 [style=dashed label="TypeDef"]
-  20 [label="20"]
-  20 -> 47 [style=solid label="IDENTIFIER"]
-  20 -> 48 [style=dashed label="VarSpec"]
-  20 -> 49 [style=dashed label="IdentifierList"]
-  21 [label="21"]
-  21 -> "21R31" [style=solid]
- "21R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
-  22 [label="22"]
-  22 -> "22R67" [style=solid]
- "22R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
-  23 [label="23"]
-  23 -> "23R68" [style=solid]
- "23R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
-  24 [label="24"]
-  24 -> "24R69" [style=solid]
- "24R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
-  25 [label="25"]
-  25 -> 50 [style=solid label="SEMICOLON"]
-  25 -> "25R1" [style=solid]
- "25R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
-  26 [label="26"]
-  26 -> "26R66" [style=solid]
- "26R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
-  27 [label="27"]
-  27 -> "27R29" [style=solid]
- "27R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
-  28 [label="28"]
-  28 -> "28R30" [style=solid]
- "28R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
-  29 [label="29"]
-  29 -> "29R192" [style=solid]
- "29R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
-  30 [label="30"]
-  30 -> 11 [style=solid label="STRING"]
-  30 -> 51 [style=solid label="RPAREN"]
-  30 -> 13 [style=solid label="PERIOD"]
-  30 -> 14 [style=dashed label="string_lit"]
-  30 -> 52 [style=dashed label="ImportSpec"]
-  30 -> 16 [style=dashed label="AlternatePackageName"]
-  31 [label="31"]
-  31 -> 53 [style=solid label="SEMICOLON"]
-  32 [label="32"]
-  32 -> "32R202" [style=solid]
- "32R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
-  33 [label="33"]
-  33 -> "33R199" [style=solid]
- "33R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
-  34 [label="34"]
-  34 -> "34R195" [style=solid]
- "34R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
-  35 [label="35"]
-  35 -> "35R200" [style=solid]
- "35R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
-  36 [label="36"]
-  36 -> 54 [style=dashed label="OPENB"]
-  36 -> "36R3" [style=solid]
- "36R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  37 [label="37"]
-  37 -> 47 [style=solid label="IDENTIFIER"]
-  37 -> 55 [style=solid label="ELLIPSIS"]
-  37 -> 56 [style=solid label="RPAREN"]
-  37 -> 57 [style=dashed label="ParameterDeclStar"]
-  37 -> 58 [style=dashed label="ParameterDecl"]
-  37 -> 59 [style=dashed label="IdentifierList"]
-  38 [label="38"]
-  38 -> "38R64" [style=solid]
- "38R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
-  39 [label="39"]
-  39 -> 60 [style=solid label="IDENTIFIER"]
-  40 [label="40"]
-  40 -> 61 [style=solid label="FUNC"]
-  40 -> 62 [style=solid label="STRUCT"]
-  40 -> 63 [style=solid label="VAR_TYPE"]
-  40 -> 64 [style=solid label="IDENTIFIER"]
-  40 -> 65 [style=solid label="MUL"]
-  40 -> 66 [style=solid label="LBRACK"]
-  40 -> 67 [style=dashed label="TypeLit"]
-  40 -> 68 [style=dashed label="Type"]
-  40 -> 69 [style=dashed label="TypeName"]
-  40 -> 70 [style=dashed label="ArrayType"]
-  40 -> 71 [style=dashed label="StructType"]
-  40 -> 72 [style=dashed label="PointerType"]
-  40 -> 73 [style=dashed label="FunctionType"]
-  41 [label="41"]
-  41 -> "41R114" [style=solid]
- "41R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
-  42 [label="42"]
-  42 -> 61 [style=solid label="FUNC"]
-  42 -> 62 [style=solid label="STRUCT"]
-  42 -> 63 [style=solid label="VAR_TYPE"]
-  42 -> 64 [style=solid label="IDENTIFIER"]
-  42 -> 65 [style=solid label="MUL"]
-  42 -> 74 [style=solid label="ASSIGN"]
-  42 -> 66 [style=solid label="LBRACK"]
-  42 -> 67 [style=dashed label="TypeLit"]
-  42 -> 75 [style=dashed label="Type"]
-  42 -> 69 [style=dashed label="TypeName"]
-  42 -> 70 [style=dashed label="ArrayType"]
-  42 -> 71 [style=dashed label="StructType"]
-  42 -> 72 [style=dashed label="PointerType"]
-  42 -> 73 [style=dashed label="FunctionType"]
-  43 [label="43"]
-  43 -> 42 [style=solid label="IDENTIFIER"]
-  43 -> 76 [style=dashed label="TypeSpecList"]
-  43 -> 77 [style=dashed label="TypeSpec"]
-  43 -> 45 [style=dashed label="AliasDecl"]
-  43 -> 46 [style=dashed label="TypeDef"]
-  44 [label="44"]
-  44 -> "44R119" [style=solid]
- "44R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
-  45 [label="45"]
-  45 -> "45R123" [style=solid]
- "45R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
-  46 [label="46"]
-  46 -> "46R124" [style=solid]
- "46R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
-  47 [label="47"]
-  47 -> 78 [style=solid label="COMMA"]
-  47 -> 79 [style=dashed label="IdentifierLIST"]
-  47 -> "47R59" [style=solid]
- "47R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
-  48 [label="48"]
-  48 -> "48R26" [style=solid]
- "48R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
-  49 [label="49"]
-  49 -> 61 [style=solid label="FUNC"]
-  49 -> 62 [style=solid label="STRUCT"]
-  49 -> 63 [style=solid label="VAR_TYPE"]
-  49 -> 64 [style=solid label="IDENTIFIER"]
-  49 -> 65 [style=solid label="MUL"]
-  49 -> 66 [style=solid label="LBRACK"]
-  49 -> 67 [style=dashed label="TypeLit"]
-  49 -> 80 [style=dashed label="Type"]
-  49 -> 69 [style=dashed label="TypeName"]
-  49 -> 70 [style=dashed label="ArrayType"]
-  49 -> 71 [style=dashed label="StructType"]
-  49 -> 72 [style=dashed label="PointerType"]
-  49 -> 73 [style=dashed label="FunctionType"]
-  50 [label="50"]
-  50 -> 17 [style=solid label="FUNC"]
-  50 -> 18 [style=solid label="CONST"]
-  50 -> 19 [style=solid label="TYPE"]
-  50 -> 20 [style=solid label="VAR"]
-  50 -> 21 [style=dashed label="VarDecl"]
-  50 -> 22 [style=dashed label="Declaration"]
-  50 -> 23 [style=dashed label="FunctionDecl"]
-  50 -> 24 [style=dashed label="MethodDecl"]
-  50 -> 81 [style=dashed label="TopLevelDecl"]
-  50 -> 27 [style=dashed label="ConstDecl"]
-  50 -> 28 [style=dashed label="TypeDecl"]
-  51 [label="51"]
-  51 -> "51R196" [style=solid]
- "51R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
-  52 [label="52"]
-  52 -> 82 [style=solid label="SEMICOLON"]
-  53 [label="53"]
-  53 -> "53R198" [style=solid]
- "53R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
-  54 [label="54"]
-  54 -> 37 [style=solid label="LPAREN"]
-  54 -> 83 [style=dashed label="Function"]
-  54 -> 84 [style=dashed label="Signature"]
-  54 -> 85 [style=dashed label="Parameters"]
-  55 [label="55"]
-  55 -> 61 [style=solid label="FUNC"]
-  55 -> 62 [style=solid label="STRUCT"]
-  55 -> 63 [style=solid label="VAR_TYPE"]
-  55 -> 64 [style=solid label="IDENTIFIER"]
-  55 -> 65 [style=solid label="MUL"]
-  55 -> 66 [style=solid label="LBRACK"]
-  55 -> 67 [style=dashed label="TypeLit"]
-  55 -> 86 [style=dashed label="Type"]
-  55 -> 69 [style=dashed label="TypeName"]
-  55 -> 70 [style=dashed label="ArrayType"]
-  55 -> 71 [style=dashed label="StructType"]
-  55 -> 72 [style=dashed label="PointerType"]
-  55 -> 73 [style=dashed label="FunctionType"]
-  56 [label="56"]
-  56 -> "56R48" [style=solid]
- "56R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
-  57 [label="57"]
-  57 -> 87 [style=solid label="RPAREN"]
-  57 -> 88 [style=solid label="COMMA"]
-  58 [label="58"]
-  58 -> "58R51" [style=solid]
- "58R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
-  59 [label="59"]
-  59 -> 61 [style=solid label="FUNC"]
-  59 -> 62 [style=solid label="STRUCT"]
-  59 -> 63 [style=solid label="VAR_TYPE"]
-  59 -> 64 [style=solid label="IDENTIFIER"]
-  59 -> 89 [style=solid label="ELLIPSIS"]
-  59 -> 65 [style=solid label="MUL"]
-  59 -> 66 [style=solid label="LBRACK"]
-  59 -> 67 [style=dashed label="TypeLit"]
-  59 -> 90 [style=dashed label="Type"]
-  59 -> 69 [style=dashed label="TypeName"]
-  59 -> 70 [style=dashed label="ArrayType"]
-  59 -> 71 [style=dashed label="StructType"]
-  59 -> 72 [style=dashed label="PointerType"]
-  59 -> 73 [style=dashed label="FunctionType"]
-  60 [label="60"]
-  60 -> 37 [style=solid label="LPAREN"]
-  60 -> 91 [style=dashed label="Function"]
-  60 -> 92 [style=dashed label="Signature"]
-  60 -> 85 [style=dashed label="Parameters"]
-  61 [label="61"]
-  61 -> 37 [style=solid label="LPAREN"]
-  61 -> 93 [style=dashed label="Signature"]
-  61 -> 85 [style=dashed label="Parameters"]
-  62 [label="62"]
-  62 -> 94 [style=solid label="LBRACE"]
-  63 [label="63"]
-  63 -> "63R101" [style=solid]
- "63R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
-  64 [label="64"]
-  64 -> "64R100" [style=solid]
- "64R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
-  65 [label="65"]
-  65 -> 61 [style=solid label="FUNC"]
-  65 -> 62 [style=solid label="STRUCT"]
-  65 -> 63 [style=solid label="VAR_TYPE"]
-  65 -> 64 [style=solid label="IDENTIFIER"]
-  65 -> 65 [style=solid label="MUL"]
-  65 -> 66 [style=solid label="LBRACK"]
-  65 -> 67 [style=dashed label="TypeLit"]
-  65 -> 95 [style=dashed label="Type"]
-  65 -> 69 [style=dashed label="TypeName"]
-  65 -> 70 [style=dashed label="ArrayType"]
-  65 -> 71 [style=dashed label="StructType"]
-  65 -> 72 [style=dashed label="PointerType"]
-  65 -> 96 [style=dashed label="BaseType"]
-  65 -> 73 [style=dashed label="FunctionType"]
-  66 [label="66"]
-  66 -> 97 [style=solid label="FUNC"]
-  66 -> 98 [style=solid label="IDENTIFIER"]
-  66 -> 99 [style=solid label="BYTE"]
-  66 -> 11 [style=solid label="STRING"]
-  66 -> 100 [style=solid label="INTEGER"]
-  66 -> 101 [style=solid label="FLOAT"]
-  66 -> 102 [style=solid label="ADD"]
-  66 -> 103 [style=solid label="SUB"]
-  66 -> 104 [style=solid label="MUL"]
-  66 -> 105 [style=solid label="AND"]
-  66 -> 106 [style=solid label="NOT"]
-  66 -> 107 [style=solid label="XOR"]
-  66 -> 108 [style=solid label="LPAREN"]
-  66 -> 109 [style=dashed label="Operand"]
-  66 -> 110 [style=dashed label="OperandName"]
-  66 -> 111 [style=dashed label="int_lit"]
-  66 -> 112 [style=dashed label="float_lit"]
-  66 -> 113 [style=dashed label="ArrayLength"]
-  66 -> 114 [style=dashed label="Literal"]
-  66 -> 115 [style=dashed label="string_lit"]
-  66 -> 116 [style=dashed label="byte_lit"]
-  66 -> 117 [style=dashed label="BasicLit"]
-  66 -> 118 [style=dashed label="FunctionLit"]
-  66 -> 119 [style=dashed label="PrimaryExpr"]
-  66 -> 120 [style=dashed label="Expression"]
-  66 -> 121 [style=dashed label="Expression1"]
-  66 -> 122 [style=dashed label="Expression2"]
-  66 -> 123 [style=dashed label="Expression3"]
-  66 -> 124 [style=dashed label="Expression4"]
-  66 -> 125 [style=dashed label="Expression5"]
-  66 -> 126 [style=dashed label="UnaryExpr"]
-  66 -> 127 [style=dashed label="unary_op"]
-  67 [label="67"]
-  67 -> "67R75" [style=solid]
- "67R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
-  68 [label="68"]
-  68 -> 128 [style=solid label="ASSIGN"]
-  68 -> "68R116" [style=solid]
- "68R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
-  69 [label="69"]
-  69 -> "69R74" [style=solid]
- "69R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
-  70 [label="70"]
-  70 -> "70R70" [style=solid]
- "70R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
-  71 [label="71"]
-  71 -> "71R71" [style=solid]
- "71R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
-  72 [label="72"]
-  72 -> "72R72" [style=solid]
- "72R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
-  73 [label="73"]
-  73 -> "73R73" [style=solid]
- "73R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
-  74 [label="74"]
-  74 -> 61 [style=solid label="FUNC"]
-  74 -> 62 [style=solid label="STRUCT"]
-  74 -> 63 [style=solid label="VAR_TYPE"]
-  74 -> 64 [style=solid label="IDENTIFIER"]
-  74 -> 65 [style=solid label="MUL"]
-  74 -> 66 [style=solid label="LBRACK"]
-  74 -> 67 [style=dashed label="TypeLit"]
-  74 -> 129 [style=dashed label="Type"]
-  74 -> 69 [style=dashed label="TypeName"]
-  74 -> 70 [style=dashed label="ArrayType"]
-  74 -> 71 [style=dashed label="StructType"]
-  74 -> 72 [style=dashed label="PointerType"]
-  74 -> 73 [style=dashed label="FunctionType"]
-  75 [label="75"]
-  75 -> "75R126" [style=solid]
- "75R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
-  76 [label="76"]
-  76 -> 42 [style=solid label="IDENTIFIER"]
-  76 -> 130 [style=solid label="RPAREN"]
-  76 -> 131 [style=dashed label="TypeSpec"]
-  76 -> 45 [style=dashed label="AliasDecl"]
-  76 -> 46 [style=dashed label="TypeDef"]
-  77 [label="77"]
-  77 -> 132 [style=solid label="SEMICOLON"]
-  78 [label="78"]
-  78 -> 133 [style=solid label="IDENTIFIER"]
-  79 [label="79"]
-  79 -> 134 [style=solid label="COMMA"]
-  79 -> "79R58" [style=solid]
- "79R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
-  80 [label="80"]
-  80 -> 135 [style=solid label="ASSIGN"]
-  80 -> "80R28" [style=solid]
- "80R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
-  81 [label="81"]
-  81 -> "81R65" [style=solid]
- "81R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
-  82 [label="82"]
-  82 -> "82R197" [style=solid]
- "82R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
-  83 [label="83"]
-  83 -> 136 [style=dashed label="CLOSEB"]
-  83 -> "83R4" [style=solid]
- "83R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  84 [label="84"]
-  84 -> 137 [style=solid label="LBRACE"]
-  84 -> 138 [style=dashed label="Block"]
-  84 -> 139 [style=dashed label="CLOSEB"]
-  84 -> 140 [style=dashed label="FunctionBody"]
-  84 -> "84R4" [style=solid]
- "84R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  85 [label="85"]
-  85 -> 61 [style=solid label="FUNC"]
-  85 -> 62 [style=solid label="STRUCT"]
-  85 -> 63 [style=solid label="VAR_TYPE"]
-  85 -> 64 [style=solid label="IDENTIFIER"]
-  85 -> 65 [style=solid label="MUL"]
-  85 -> 141 [style=solid label="LPAREN"]
-  85 -> 66 [style=solid label="LBRACK"]
-  85 -> 142 [style=dashed label="Result"]
-  85 -> 67 [style=dashed label="TypeLit"]
-  85 -> 143 [style=dashed label="Type"]
-  85 -> 69 [style=dashed label="TypeName"]
-  85 -> 70 [style=dashed label="ArrayType"]
-  85 -> 71 [style=dashed label="StructType"]
-  85 -> 72 [style=dashed label="PointerType"]
-  85 -> 73 [style=dashed label="FunctionType"]
-  85 -> "85R44" [style=solid]
- "85R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
-  86 [label="86"]
-  86 -> "86R55" [style=solid]
- "86R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
-  87 [label="87"]
-  87 -> "87R49" [style=solid]
- "87R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
-  88 [label="88"]
-  88 -> 47 [style=solid label="IDENTIFIER"]
-  88 -> 55 [style=solid label="ELLIPSIS"]
-  88 -> 144 [style=solid label="RPAREN"]
-  88 -> 145 [style=dashed label="ParameterDecl"]
-  88 -> 59 [style=dashed label="IdentifierList"]
-  89 [label="89"]
-  89 -> 61 [style=solid label="FUNC"]
-  89 -> 62 [style=solid label="STRUCT"]
-  89 -> 63 [style=solid label="VAR_TYPE"]
-  89 -> 64 [style=solid label="IDENTIFIER"]
-  89 -> 65 [style=solid label="MUL"]
-  89 -> 66 [style=solid label="LBRACK"]
-  89 -> 67 [style=dashed label="TypeLit"]
-  89 -> 146 [style=dashed label="Type"]
-  89 -> 69 [style=dashed label="TypeName"]
-  89 -> 70 [style=dashed label="ArrayType"]
-  89 -> 71 [style=dashed label="StructType"]
-  89 -> 72 [style=dashed label="PointerType"]
-  89 -> 73 [style=dashed label="FunctionType"]
-  90 [label="90"]
-  90 -> "90R53" [style=solid]
- "90R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
-  91 [label="91"]
-  91 -> "91R62" [style=solid]
- "91R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
-  92 [label="92"]
-  92 -> 137 [style=solid label="LBRACE"]
-  92 -> 138 [style=dashed label="Block"]
-  92 -> 140 [style=dashed label="FunctionBody"]
-  92 -> "92R63" [style=solid]
- "92R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
-  93 [label="93"]
-  93 -> "93R113" [style=solid]
- "93R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
-  94 [label="94"]
-  94 -> 47 [style=solid label="IDENTIFIER"]
-  94 -> 147 [style=solid label="RBRACE"]
-  94 -> 148 [style=dashed label="IdentifierList"]
-  94 -> 149 [style=dashed label="FieldDeclStar"]
-  94 -> 150 [style=dashed label="FieldDecl"]
-  95 [label="95"]
-  95 -> "95R112" [style=solid]
- "95R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
-  96 [label="96"]
-  96 -> "96R111" [style=solid]
- "96R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
-  97 [label="97"]
-  97 -> 37 [style=solid label="LPAREN"]
-  97 -> 151 [style=dashed label="Function"]
-  97 -> 152 [style=dashed label="Signature"]
-  97 -> 85 [style=dashed label="Parameters"]
-  98 [label="98"]
-  98 -> "98R79" [style=solid]
- "98R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
-  99 [label="99"]
-  99 -> "99R130" [style=solid]
- "99R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
-  100 [label="100"]
-  100 -> "100R98" [style=solid]
- "100R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
-  101 [label="101"]
-  101 -> "101R99" [style=solid]
- "101R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
-  102 [label="102"]
-  102 -> "102R178" [style=solid]
- "102R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
-  103 [label="103"]
-  103 -> "103R179" [style=solid]
- "103R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
-  104 [label="104"]
-  104 -> "104R182" [style=solid]
- "104R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
-  105 [label="105"]
-  105 -> "105R183" [style=solid]
- "105R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
-  106 [label="106"]
-  106 -> "106R180" [style=solid]
- "106R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
-  107 [label="107"]
-  107 -> "107R181" [style=solid]
- "107R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
-  108 [label="108"]
-  108 -> 97 [style=solid label="FUNC"]
-  108 -> 98 [style=solid label="IDENTIFIER"]
-  108 -> 99 [style=solid label="BYTE"]
-  108 -> 11 [style=solid label="STRING"]
-  108 -> 100 [style=solid label="INTEGER"]
-  108 -> 101 [style=solid label="FLOAT"]
-  108 -> 102 [style=solid label="ADD"]
-  108 -> 103 [style=solid label="SUB"]
-  108 -> 104 [style=solid label="MUL"]
-  108 -> 105 [style=solid label="AND"]
-  108 -> 106 [style=solid label="NOT"]
-  108 -> 107 [style=solid label="XOR"]
-  108 -> 108 [style=solid label="LPAREN"]
-  108 -> 109 [style=dashed label="Operand"]
-  108 -> 110 [style=dashed label="OperandName"]
-  108 -> 111 [style=dashed label="int_lit"]
-  108 -> 112 [style=dashed label="float_lit"]
-  108 -> 114 [style=dashed label="Literal"]
-  108 -> 115 [style=dashed label="string_lit"]
-  108 -> 116 [style=dashed label="byte_lit"]
-  108 -> 117 [style=dashed label="BasicLit"]
-  108 -> 118 [style=dashed label="FunctionLit"]
-  108 -> 119 [style=dashed label="PrimaryExpr"]
-  108 -> 153 [style=dashed label="Expression"]
-  108 -> 121 [style=dashed label="Expression1"]
-  108 -> 122 [style=dashed label="Expression2"]
-  108 -> 123 [style=dashed label="Expression3"]
-  108 -> 124 [style=dashed label="Expression4"]
-  108 -> 125 [style=dashed label="Expression5"]
-  108 -> 126 [style=dashed label="UnaryExpr"]
-  108 -> 127 [style=dashed label="unary_op"]
-  109 [label="109"]
-  109 -> "109R136" [style=solid]
- "109R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
-  110 [label="110"]
-  110 -> 154 [style=solid label="LBRACE"]
-  110 -> 155 [style=dashed label="StructLiteral"]
-  110 -> "110R77d" [label="[LBRACE]", style=solid]
- "110R77d" [label="R77", fillcolor=5, shape=diamond, style=filled]
-  110 -> "110R77" [style=solid]
- "110R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
-  111 [label="111"]
-  111 -> "111R131" [style=solid]
- "111R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
-  112 [label="112"]
-  112 -> "112R132" [style=solid]
- "112R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
-  113 [label="113"]
-  113 -> 156 [style=solid label="RBRACK"]
-  114 [label="114"]
-  114 -> "114R76" [style=solid]
- "114R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
-  115 [label="115"]
-  115 -> "115R133" [style=solid]
- "115R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
-  116 [label="116"]
-  116 -> "116R134" [style=solid]
- "116R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
-  117 [label="117"]
-  117 -> "117R127" [style=solid]
- "117R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
-  118 [label="118"]
-  118 -> "118R128" [style=solid]
- "118R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
-  119 [label="119"]
-  119 -> 157 [style=solid label="LBRACK"]
-  119 -> 158 [style=solid label="PERIOD"]
-  119 -> 159 [style=dashed label="Selector"]
-  119 -> 160 [style=dashed label="Index"]
-  119 -> 161 [style=dashed label="TypeAssertion"]
-  119 -> "119R159" [style=solid]
- "119R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
-  120 [label="120"]
-  120 -> "120R103" [style=solid]
- "120R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
-  121 [label="121"]
-  121 -> 162 [style=solid label="LOR"]
-  121 -> "121R148" [style=solid]
- "121R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
-  122 [label="122"]
-  122 -> 163 [style=solid label="LAND"]
-  122 -> "122R150" [style=solid]
- "122R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
-  123 [label="123"]
-  123 -> 164 [style=solid label="EQL"]
-  123 -> 165 [style=solid label="NEQ"]
-  123 -> 166 [style=solid label="LEQ"]
-  123 -> 167 [style=solid label="GEQ"]
-  123 -> 168 [style=solid label="GTR"]
-  123 -> 169 [style=solid label="LSS"]
-  123 -> 170 [style=dashed label="rel_op"]
-  123 -> "123R152" [style=solid]
- "123R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
-  124 [label="124"]
-  124 -> 171 [style=solid label="ADD"]
-  124 -> 172 [style=solid label="SUB"]
-  124 -> 173 [style=solid label="OR"]
-  124 -> 174 [style=solid label="XOR"]
-  124 -> 175 [style=dashed label="add_op"]
-  124 -> "124R154" [style=solid]
- "124R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
-  125 [label="125"]
-  125 -> 176 [style=solid label="SHL"]
-  125 -> 177 [style=solid label="SHR"]
-  125 -> 178 [style=solid label="MUL"]
-  125 -> 179 [style=solid label="QUO"]
-  125 -> 180 [style=solid label="REM"]
-  125 -> 181 [style=solid label="AND"]
-  125 -> 182 [style=solid label="AND_NOT"]
-  125 -> 183 [style=dashed label="mul_op"]
-  125 -> "125R156" [style=solid]
- "125R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
-  126 [label="126"]
-  126 -> "126R158" [style=solid]
- "126R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
-  127 [label="127"]
-  127 -> 97 [style=solid label="FUNC"]
-  127 -> 98 [style=solid label="IDENTIFIER"]
-  127 -> 99 [style=solid label="BYTE"]
-  127 -> 11 [style=solid label="STRING"]
-  127 -> 100 [style=solid label="INTEGER"]
-  127 -> 101 [style=solid label="FLOAT"]
-  127 -> 108 [style=solid label="LPAREN"]
-  127 -> 109 [style=dashed label="Operand"]
-  127 -> 110 [style=dashed label="OperandName"]
-  127 -> 111 [style=dashed label="int_lit"]
-  127 -> 112 [style=dashed label="float_lit"]
-  127 -> 114 [style=dashed label="Literal"]
-  127 -> 115 [style=dashed label="string_lit"]
-  127 -> 116 [style=dashed label="byte_lit"]
-  127 -> 117 [style=dashed label="BasicLit"]
-  127 -> 118 [style=dashed label="FunctionLit"]
-  127 -> 184 [style=dashed label="PrimaryExpr"]
-  128 [label="128"]
-  128 -> 97 [style=solid label="FUNC"]
-  128 -> 98 [style=solid label="IDENTIFIER"]
-  128 -> 99 [style=solid label="BYTE"]
-  128 -> 11 [style=solid label="STRING"]
-  128 -> 100 [style=solid label="INTEGER"]
-  128 -> 101 [style=solid label="FLOAT"]
-  128 -> 102 [style=solid label="ADD"]
-  128 -> 103 [style=solid label="SUB"]
-  128 -> 104 [style=solid label="MUL"]
-  128 -> 105 [style=solid label="AND"]
-  128 -> 106 [style=solid label="NOT"]
-  128 -> 107 [style=solid label="XOR"]
-  128 -> 108 [style=solid label="LPAREN"]
-  128 -> 109 [style=dashed label="Operand"]
-  128 -> 110 [style=dashed label="OperandName"]
-  128 -> 111 [style=dashed label="int_lit"]
-  128 -> 112 [style=dashed label="float_lit"]
-  128 -> 114 [style=dashed label="Literal"]
-  128 -> 115 [style=dashed label="string_lit"]
-  128 -> 116 [style=dashed label="byte_lit"]
-  128 -> 117 [style=dashed label="BasicLit"]
-  128 -> 118 [style=dashed label="FunctionLit"]
-  128 -> 119 [style=dashed label="PrimaryExpr"]
-  128 -> 185 [style=dashed label="Expression"]
-  128 -> 121 [style=dashed label="Expression1"]
-  128 -> 122 [style=dashed label="Expression2"]
-  128 -> 123 [style=dashed label="Expression3"]
-  128 -> 124 [style=dashed label="Expression4"]
-  128 -> 125 [style=dashed label="Expression5"]
-  128 -> 126 [style=dashed label="UnaryExpr"]
-  128 -> 127 [style=dashed label="unary_op"]
-  129 [label="129"]
-  129 -> "129R125" [style=solid]
- "129R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
-  130 [label="130"]
-  130 -> "130R120" [style=solid]
- "130R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
-  131 [label="131"]
-  131 -> 186 [style=solid label="SEMICOLON"]
-  132 [label="132"]
-  132 -> "132R122" [style=solid]
- "132R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
-  133 [label="133"]
-  133 -> "133R61" [style=solid]
- "133R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
-  134 [label="134"]
-  134 -> 187 [style=solid label="IDENTIFIER"]
-  135 [label="135"]
-  135 -> 97 [style=solid label="FUNC"]
-  135 -> 98 [style=solid label="IDENTIFIER"]
-  135 -> 99 [style=solid label="BYTE"]
-  135 -> 11 [style=solid label="STRING"]
-  135 -> 100 [style=solid label="INTEGER"]
-  135 -> 101 [style=solid label="FLOAT"]
-  135 -> 102 [style=solid label="ADD"]
-  135 -> 103 [style=solid label="SUB"]
-  135 -> 104 [style=solid label="MUL"]
-  135 -> 105 [style=solid label="AND"]
-  135 -> 106 [style=solid label="NOT"]
-  135 -> 107 [style=solid label="XOR"]
-  135 -> 108 [style=solid label="LPAREN"]
-  135 -> 109 [style=dashed label="Operand"]
-  135 -> 110 [style=dashed label="OperandName"]
-  135 -> 111 [style=dashed label="int_lit"]
-  135 -> 112 [style=dashed label="float_lit"]
-  135 -> 188 [style=dashed label="ExpressionList"]
-  135 -> 114 [style=dashed label="Literal"]
-  135 -> 115 [style=dashed label="string_lit"]
-  135 -> 116 [style=dashed label="byte_lit"]
-  135 -> 117 [style=dashed label="BasicLit"]
-  135 -> 118 [style=dashed label="FunctionLit"]
-  135 -> 119 [style=dashed label="PrimaryExpr"]
-  135 -> 189 [style=dashed label="Expression"]
-  135 -> 121 [style=dashed label="Expression1"]
-  135 -> 122 [style=dashed label="Expression2"]
-  135 -> 123 [style=dashed label="Expression3"]
-  135 -> 124 [style=dashed label="Expression4"]
-  135 -> 125 [style=dashed label="Expression5"]
-  135 -> 126 [style=dashed label="UnaryExpr"]
-  135 -> 127 [style=dashed label="unary_op"]
-  136 [label="136"]
-  136 -> "136R32" [style=solid]
- "136R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
-  137 [label="137"]
-  137 -> 190 [style=dashed label="OPENB"]
-  137 -> "137R3" [style=solid]
- "137R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  138 [label="138"]
-  138 -> "138R35" [style=solid]
- "138R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
-  139 [label="139"]
-  139 -> "139R33" [style=solid]
- "139R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
-  140 [label="140"]
-  140 -> "140R34" [style=solid]
- "140R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
-  141 [label="141"]
-  141 -> 61 [style=solid label="FUNC"]
-  141 -> 62 [style=solid label="STRUCT"]
-  141 -> 63 [style=solid label="VAR_TYPE"]
-  141 -> 64 [style=solid label="IDENTIFIER"]
-  141 -> 65 [style=solid label="MUL"]
-  141 -> 66 [style=solid label="LBRACK"]
-  141 -> 191 [style=dashed label="TypeList"]
-  141 -> 67 [style=dashed label="TypeLit"]
-  141 -> 192 [style=dashed label="Type"]
-  141 -> 69 [style=dashed label="TypeName"]
-  141 -> 70 [style=dashed label="ArrayType"]
-  141 -> 71 [style=dashed label="StructType"]
-  141 -> 72 [style=dashed label="PointerType"]
-  141 -> 73 [style=dashed label="FunctionType"]
-  142 [label="142"]
-  142 -> "142R45" [style=solid]
- "142R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
-  143 [label="143"]
-  143 -> "143R47" [style=solid]
- "143R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
-  144 [label="144"]
-  144 -> "144R50" [style=solid]
- "144R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
-  145 [label="145"]
-  145 -> "145R52" [style=solid]
- "145R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
-  146 [label="146"]
-  146 -> "146R54" [style=solid]
- "146R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
-  147 [label="147"]
-  147 -> "147R105" [style=solid]
- "147R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
-  148 [label="148"]
-  148 -> 61 [style=solid label="FUNC"]
-  148 -> 62 [style=solid label="STRUCT"]
-  148 -> 63 [style=solid label="VAR_TYPE"]
-  148 -> 64 [style=solid label="IDENTIFIER"]
-  148 -> 65 [style=solid label="MUL"]
-  148 -> 66 [style=solid label="LBRACK"]
-  148 -> 67 [style=dashed label="TypeLit"]
-  148 -> 193 [style=dashed label="Type"]
-  148 -> 69 [style=dashed label="TypeName"]
-  148 -> 70 [style=dashed label="ArrayType"]
-  148 -> 71 [style=dashed label="StructType"]
-  148 -> 72 [style=dashed label="PointerType"]
-  148 -> 73 [style=dashed label="FunctionType"]
-  149 [label="149"]
-  149 -> 47 [style=solid label="IDENTIFIER"]
-  149 -> 194 [style=solid label="RBRACE"]
-  149 -> 148 [style=dashed label="IdentifierList"]
-  149 -> 195 [style=dashed label="FieldDecl"]
-  150 [label="150"]
-  150 -> 196 [style=solid label="SEMICOLON"]
-  151 [label="151"]
-  151 -> "151R135" [style=solid]
- "151R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
-  152 [label="152"]
-  152 -> 137 [style=solid label="LBRACE"]
-  152 -> 138 [style=dashed label="Block"]
-  152 -> 140 [style=dashed label="FunctionBody"]
-  153 [label="153"]
-  153 -> 197 [style=solid label="RPAREN"]
-  154 [label="154"]
-  154 -> 97 [style=solid label="FUNC"]
-  154 -> 98 [style=solid label="IDENTIFIER"]
-  154 -> 99 [style=solid label="BYTE"]
-  154 -> 11 [style=solid label="STRING"]
-  154 -> 100 [style=solid label="INTEGER"]
-  154 -> 101 [style=solid label="FLOAT"]
-  154 -> 102 [style=solid label="ADD"]
-  154 -> 103 [style=solid label="SUB"]
-  154 -> 104 [style=solid label="MUL"]
-  154 -> 105 [style=solid label="AND"]
-  154 -> 106 [style=solid label="NOT"]
-  154 -> 107 [style=solid label="XOR"]
-  154 -> 108 [style=solid label="LPAREN"]
-  154 -> 109 [style=dashed label="Operand"]
-  154 -> 110 [style=dashed label="OperandName"]
-  154 -> 111 [style=dashed label="int_lit"]
-  154 -> 112 [style=dashed label="float_lit"]
-  154 -> 114 [style=dashed label="Literal"]
-  154 -> 115 [style=dashed label="string_lit"]
-  154 -> 116 [style=dashed label="byte_lit"]
-  154 -> 117 [style=dashed label="BasicLit"]
-  154 -> 118 [style=dashed label="FunctionLit"]
-  154 -> 119 [style=dashed label="PrimaryExpr"]
-  154 -> 198 [style=dashed label="KeyValList"]
-  154 -> 199 [style=dashed label="Expression"]
-  154 -> 121 [style=dashed label="Expression1"]
-  154 -> 122 [style=dashed label="Expression2"]
-  154 -> 123 [style=dashed label="Expression3"]
-  154 -> 124 [style=dashed label="Expression4"]
-  154 -> 125 [style=dashed label="Expression5"]
-  154 -> 126 [style=dashed label="UnaryExpr"]
-  154 -> 127 [style=dashed label="unary_op"]
-  154 -> "154R142" [style=solid]
- "154R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
-  155 [label="155"]
-  155 -> "155R140" [style=solid]
- "155R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
-  156 [label="156"]
-  156 -> 61 [style=solid label="FUNC"]
-  156 -> 62 [style=solid label="STRUCT"]
-  156 -> 63 [style=solid label="VAR_TYPE"]
-  156 -> 64 [style=solid label="IDENTIFIER"]
-  156 -> 65 [style=solid label="MUL"]
-  156 -> 66 [style=solid label="LBRACK"]
-  156 -> 67 [style=dashed label="TypeLit"]
-  156 -> 200 [style=dashed label="Type"]
-  156 -> 69 [style=dashed label="TypeName"]
-  156 -> 70 [style=dashed label="ArrayType"]
-  156 -> 71 [style=dashed label="StructType"]
-  156 -> 72 [style=dashed label="PointerType"]
-  156 -> 73 [style=dashed label="FunctionType"]
-  157 [label="157"]
-  157 -> 97 [style=solid label="FUNC"]
-  157 -> 98 [style=solid label="IDENTIFIER"]
-  157 -> 99 [style=solid label="BYTE"]
-  157 -> 11 [style=solid label="STRING"]
-  157 -> 100 [style=solid label="INTEGER"]
-  157 -> 101 [style=solid label="FLOAT"]
-  157 -> 102 [style=solid label="ADD"]
-  157 -> 103 [style=solid label="SUB"]
-  157 -> 104 [style=solid label="MUL"]
-  157 -> 105 [style=solid label="AND"]
-  157 -> 106 [style=solid label="NOT"]
-  157 -> 107 [style=solid label="XOR"]
-  157 -> 108 [style=solid label="LPAREN"]
-  157 -> 109 [style=dashed label="Operand"]
-  157 -> 110 [style=dashed label="OperandName"]
-  157 -> 111 [style=dashed label="int_lit"]
-  157 -> 112 [style=dashed label="float_lit"]
-  157 -> 114 [style=dashed label="Literal"]
-  157 -> 115 [style=dashed label="string_lit"]
-  157 -> 116 [style=dashed label="byte_lit"]
-  157 -> 117 [style=dashed label="BasicLit"]
-  157 -> 118 [style=dashed label="FunctionLit"]
-  157 -> 119 [style=dashed label="PrimaryExpr"]
-  157 -> 201 [style=dashed label="Expression"]
-  157 -> 121 [style=dashed label="Expression1"]
-  157 -> 122 [style=dashed label="Expression2"]
-  157 -> 123 [style=dashed label="Expression3"]
-  157 -> 124 [style=dashed label="Expression4"]
-  157 -> 125 [style=dashed label="Expression5"]
-  157 -> 126 [style=dashed label="UnaryExpr"]
-  157 -> 127 [style=dashed label="unary_op"]
-  158 [label="158"]
-  158 -> 202 [style=solid label="IDENTIFIER"]
-  158 -> 203 [style=solid label="LPAREN"]
-  159 [label="159"]
-  159 -> "159R137" [style=solid]
- "159R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
-  160 [label="160"]
-  160 -> "160R138" [style=solid]
- "160R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
-  161 [label="161"]
-  161 -> "161R139" [style=solid]
- "161R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
-  162 [label="162"]
-  162 -> 97 [style=solid label="FUNC"]
-  162 -> 98 [style=solid label="IDENTIFIER"]
-  162 -> 99 [style=solid label="BYTE"]
-  162 -> 11 [style=solid label="STRING"]
-  162 -> 100 [style=solid label="INTEGER"]
-  162 -> 101 [style=solid label="FLOAT"]
-  162 -> 102 [style=solid label="ADD"]
-  162 -> 103 [style=solid label="SUB"]
-  162 -> 104 [style=solid label="MUL"]
-  162 -> 105 [style=solid label="AND"]
-  162 -> 106 [style=solid label="NOT"]
-  162 -> 107 [style=solid label="XOR"]
-  162 -> 108 [style=solid label="LPAREN"]
-  162 -> 109 [style=dashed label="Operand"]
-  162 -> 110 [style=dashed label="OperandName"]
-  162 -> 111 [style=dashed label="int_lit"]
-  162 -> 112 [style=dashed label="float_lit"]
-  162 -> 114 [style=dashed label="Literal"]
-  162 -> 115 [style=dashed label="string_lit"]
-  162 -> 116 [style=dashed label="byte_lit"]
-  162 -> 117 [style=dashed label="BasicLit"]
-  162 -> 118 [style=dashed label="FunctionLit"]
-  162 -> 119 [style=dashed label="PrimaryExpr"]
-  162 -> 204 [style=dashed label="Expression2"]
-  162 -> 123 [style=dashed label="Expression3"]
-  162 -> 124 [style=dashed label="Expression4"]
-  162 -> 125 [style=dashed label="Expression5"]
-  162 -> 126 [style=dashed label="UnaryExpr"]
-  162 -> 127 [style=dashed label="unary_op"]
-  163 [label="163"]
-  163 -> 97 [style=solid label="FUNC"]
-  163 -> 98 [style=solid label="IDENTIFIER"]
-  163 -> 99 [style=solid label="BYTE"]
-  163 -> 11 [style=solid label="STRING"]
-  163 -> 100 [style=solid label="INTEGER"]
-  163 -> 101 [style=solid label="FLOAT"]
-  163 -> 102 [style=solid label="ADD"]
-  163 -> 103 [style=solid label="SUB"]
-  163 -> 104 [style=solid label="MUL"]
-  163 -> 105 [style=solid label="AND"]
-  163 -> 106 [style=solid label="NOT"]
-  163 -> 107 [style=solid label="XOR"]
-  163 -> 108 [style=solid label="LPAREN"]
-  163 -> 109 [style=dashed label="Operand"]
-  163 -> 110 [style=dashed label="OperandName"]
-  163 -> 111 [style=dashed label="int_lit"]
-  163 -> 112 [style=dashed label="float_lit"]
-  163 -> 114 [style=dashed label="Literal"]
-  163 -> 115 [style=dashed label="string_lit"]
-  163 -> 116 [style=dashed label="byte_lit"]
-  163 -> 117 [style=dashed label="BasicLit"]
-  163 -> 118 [style=dashed label="FunctionLit"]
-  163 -> 119 [style=dashed label="PrimaryExpr"]
-  163 -> 205 [style=dashed label="Expression3"]
-  163 -> 124 [style=dashed label="Expression4"]
-  163 -> 125 [style=dashed label="Expression5"]
-  163 -> 126 [style=dashed label="UnaryExpr"]
-  163 -> 127 [style=dashed label="unary_op"]
-  164 [label="164"]
-  164 -> "164R161" [style=solid]
- "164R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
-  165 [label="165"]
-  165 -> "165R162" [style=solid]
- "165R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
-  166 [label="166"]
-  166 -> "166R164" [style=solid]
- "166R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
-  167 [label="167"]
-  167 -> "167R166" [style=solid]
- "167R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
-  168 [label="168"]
-  168 -> "168R165" [style=solid]
- "168R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
-  169 [label="169"]
-  169 -> "169R163" [style=solid]
- "169R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
-  170 [label="170"]
-  170 -> 97 [style=solid label="FUNC"]
-  170 -> 98 [style=solid label="IDENTIFIER"]
-  170 -> 99 [style=solid label="BYTE"]
-  170 -> 11 [style=solid label="STRING"]
-  170 -> 100 [style=solid label="INTEGER"]
-  170 -> 101 [style=solid label="FLOAT"]
-  170 -> 102 [style=solid label="ADD"]
-  170 -> 103 [style=solid label="SUB"]
-  170 -> 104 [style=solid label="MUL"]
-  170 -> 105 [style=solid label="AND"]
-  170 -> 106 [style=solid label="NOT"]
-  170 -> 107 [style=solid label="XOR"]
-  170 -> 108 [style=solid label="LPAREN"]
-  170 -> 109 [style=dashed label="Operand"]
-  170 -> 110 [style=dashed label="OperandName"]
-  170 -> 111 [style=dashed label="int_lit"]
-  170 -> 112 [style=dashed label="float_lit"]
-  170 -> 114 [style=dashed label="Literal"]
-  170 -> 115 [style=dashed label="string_lit"]
-  170 -> 116 [style=dashed label="byte_lit"]
-  170 -> 117 [style=dashed label="BasicLit"]
-  170 -> 118 [style=dashed label="FunctionLit"]
-  170 -> 119 [style=dashed label="PrimaryExpr"]
-  170 -> 206 [style=dashed label="Expression4"]
-  170 -> 125 [style=dashed label="Expression5"]
-  170 -> 126 [style=dashed label="UnaryExpr"]
-  170 -> 127 [style=dashed label="unary_op"]
-  171 [label="171"]
-  171 -> "171R167" [style=solid]
- "171R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
-  172 [label="172"]
-  172 -> "172R168" [style=solid]
- "172R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
-  173 [label="173"]
-  173 -> "173R169" [style=solid]
- "173R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
-  174 [label="174"]
-  174 -> "174R170" [style=solid]
- "174R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
-  175 [label="175"]
-  175 -> 97 [style=solid label="FUNC"]
-  175 -> 98 [style=solid label="IDENTIFIER"]
-  175 -> 99 [style=solid label="BYTE"]
-  175 -> 11 [style=solid label="STRING"]
-  175 -> 100 [style=solid label="INTEGER"]
-  175 -> 101 [style=solid label="FLOAT"]
-  175 -> 102 [style=solid label="ADD"]
-  175 -> 103 [style=solid label="SUB"]
-  175 -> 104 [style=solid label="MUL"]
-  175 -> 105 [style=solid label="AND"]
-  175 -> 106 [style=solid label="NOT"]
-  175 -> 107 [style=solid label="XOR"]
-  175 -> 108 [style=solid label="LPAREN"]
-  175 -> 109 [style=dashed label="Operand"]
-  175 -> 110 [style=dashed label="OperandName"]
-  175 -> 111 [style=dashed label="int_lit"]
-  175 -> 112 [style=dashed label="float_lit"]
-  175 -> 114 [style=dashed label="Literal"]
-  175 -> 115 [style=dashed label="string_lit"]
-  175 -> 116 [style=dashed label="byte_lit"]
-  175 -> 117 [style=dashed label="BasicLit"]
-  175 -> 118 [style=dashed label="FunctionLit"]
-  175 -> 119 [style=dashed label="PrimaryExpr"]
-  175 -> 207 [style=dashed label="Expression5"]
-  175 -> 126 [style=dashed label="UnaryExpr"]
-  175 -> 127 [style=dashed label="unary_op"]
-  176 [label="176"]
-  176 -> "176R174" [style=solid]
- "176R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
-  177 [label="177"]
-  177 -> "177R175" [style=solid]
- "177R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
-  178 [label="178"]
-  178 -> "178R171" [style=solid]
- "178R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
-  179 [label="179"]
-  179 -> "179R172" [style=solid]
- "179R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
-  180 [label="180"]
-  180 -> "180R173" [style=solid]
- "180R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
-  181 [label="181"]
-  181 -> "181R176" [style=solid]
- "181R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
-  182 [label="182"]
-  182 -> "182R177" [style=solid]
- "182R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
-  183 [label="183"]
-  183 -> 97 [style=solid label="FUNC"]
-  183 -> 98 [style=solid label="IDENTIFIER"]
-  183 -> 99 [style=solid label="BYTE"]
-  183 -> 11 [style=solid label="STRING"]
-  183 -> 100 [style=solid label="INTEGER"]
-  183 -> 101 [style=solid label="FLOAT"]
-  183 -> 108 [style=solid label="LPAREN"]
-  183 -> 109 [style=dashed label="Operand"]
-  183 -> 110 [style=dashed label="OperandName"]
-  183 -> 111 [style=dashed label="int_lit"]
-  183 -> 112 [style=dashed label="float_lit"]
-  183 -> 114 [style=dashed label="Literal"]
-  183 -> 115 [style=dashed label="string_lit"]
-  183 -> 116 [style=dashed label="byte_lit"]
-  183 -> 117 [style=dashed label="BasicLit"]
-  183 -> 118 [style=dashed label="FunctionLit"]
-  183 -> 208 [style=dashed label="PrimaryExpr"]
-  184 [label="184"]
-  184 -> 157 [style=solid label="LBRACK"]
-  184 -> 158 [style=solid label="PERIOD"]
-  184 -> 159 [style=dashed label="Selector"]
-  184 -> 160 [style=dashed label="Index"]
-  184 -> 161 [style=dashed label="TypeAssertion"]
-  184 -> "184R160" [style=solid]
- "184R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
-  185 [label="185"]
-  185 -> "185R115" [style=solid]
- "185R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
-  186 [label="186"]
-  186 -> "186R121" [style=solid]
- "186R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
-  187 [label="187"]
-  187 -> "187R60" [style=solid]
- "187R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
-  188 [label="188"]
-  188 -> 209 [style=solid label="COMMA"]
-  188 -> "188R27" [style=solid]
- "188R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
-  189 [label="189"]
-  189 -> "189R118" [style=solid]
- "189R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  190 [label="190"]
-  190 -> 97 [style=solid label="FUNC"]
-  190 -> 210 [style=solid label="BREAK"]
-  190 -> 18 [style=solid label="CONST"]
-  190 -> 211 [style=solid label="CONTINUE"]
-  190 -> 212 [style=solid label="FOR"]
-  190 -> 213 [style=solid label="IF"]
-  190 -> 214 [style=solid label="RETURN"]
-  190 -> 19 [style=solid label="TYPE"]
-  190 -> 20 [style=solid label="VAR"]
-  190 -> 215 [style=solid label="IDENTIFIER"]
-  190 -> 99 [style=solid label="BYTE"]
-  190 -> 11 [style=solid label="STRING"]
-  190 -> 100 [style=solid label="INTEGER"]
-  190 -> 101 [style=solid label="FLOAT"]
-  190 -> 102 [style=solid label="ADD"]
-  190 -> 103 [style=solid label="SUB"]
-  190 -> 104 [style=solid label="MUL"]
-  190 -> 105 [style=solid label="AND"]
-  190 -> 106 [style=solid label="NOT"]
-  190 -> 107 [style=solid label="XOR"]
-  190 -> 108 [style=solid label="LPAREN"]
-  190 -> 137 [style=solid label="LBRACE"]
-  190 -> 216 [style=dashed label="Block"]
-  190 -> 217 [style=dashed label="StatementList"]
-  190 -> 218 [style=dashed label="Statement"]
-  190 -> 219 [style=dashed label="SimpleStmt"]
-  190 -> 220 [style=dashed label="EmptyStmt"]
-  190 -> 221 [style=dashed label="LabeledStmt"]
-  190 -> 222 [style=dashed label="IncDecStmt"]
-  190 -> 223 [style=dashed label="Assignment"]
-  190 -> 224 [style=dashed label="VarDecl"]
-  190 -> 225 [style=dashed label="Declaration"]
-  190 -> 226 [style=dashed label="FunctionStmt"]
-  190 -> 227 [style=dashed label="FunctionCall"]
-  190 -> 109 [style=dashed label="Operand"]
-  190 -> 110 [style=dashed label="OperandName"]
-  190 -> 228 [style=dashed label="ReturnStmt"]
-  190 -> 229 [style=dashed label="BreakStmt"]
-  190 -> 230 [style=dashed label="ContinueStmt"]
-  190 -> 231 [style=dashed label="IfStmt"]
-  190 -> 232 [style=dashed label="ForStmt"]
-  190 -> 111 [style=dashed label="int_lit"]
-  190 -> 112 [style=dashed label="float_lit"]
-  190 -> 27 [style=dashed label="ConstDecl"]
-  190 -> 233 [style=dashed label="ExpressionList"]
-  190 -> 28 [style=dashed label="TypeDecl"]
-  190 -> 114 [style=dashed label="Literal"]
-  190 -> 115 [style=dashed label="string_lit"]
-  190 -> 116 [style=dashed label="byte_lit"]
-  190 -> 117 [style=dashed label="BasicLit"]
-  190 -> 118 [style=dashed label="FunctionLit"]
-  190 -> 234 [style=dashed label="PrimaryExpr"]
-  190 -> 235 [style=dashed label="Expression"]
-  190 -> 121 [style=dashed label="Expression1"]
-  190 -> 122 [style=dashed label="Expression2"]
-  190 -> 123 [style=dashed label="Expression3"]
-  190 -> 124 [style=dashed label="Expression4"]
-  190 -> 125 [style=dashed label="Expression5"]
-  190 -> 126 [style=dashed label="UnaryExpr"]
-  190 -> 127 [style=dashed label="unary_op"]
-  190 -> "190R21" [style=solid]
- "190R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  191 [label="191"]
-  191 -> 236 [style=solid label="RPAREN"]
-  191 -> 237 [style=solid label="COMMA"]
-  192 [label="192"]
-  192 -> "192R57" [style=solid]
- "192R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
-  193 [label="193"]
-  193 -> 238 [style=solid label="STRING"]
-  193 -> 239 [style=dashed label="Tag"]
-  193 -> "193R108" [style=solid]
- "193R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
-  194 [label="194"]
-  194 -> "194R104" [style=solid]
- "194R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
-  195 [label="195"]
-  195 -> 240 [style=solid label="SEMICOLON"]
-  196 [label="196"]
-  196 -> "196R106" [style=solid]
- "196R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
-  197 [label="197"]
-  197 -> "197R78" [style=solid]
- "197R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
-  198 [label="198"]
-  198 -> 241 [style=solid label="RBRACE"]
-  198 -> 242 [style=solid label="COMMA"]
-  199 [label="199"]
-  199 -> 243 [style=solid label="COLON"]
-  200 [label="200"]
-  200 -> "200R102" [style=solid]
- "200R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
-  201 [label="201"]
-  201 -> 244 [style=solid label="RBRACK"]
-  202 [label="202"]
-  202 -> "202R145" [style=solid]
- "202R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
-  203 [label="203"]
-  203 -> 61 [style=solid label="FUNC"]
-  203 -> 62 [style=solid label="STRUCT"]
-  203 -> 63 [style=solid label="VAR_TYPE"]
-  203 -> 64 [style=solid label="IDENTIFIER"]
-  203 -> 65 [style=solid label="MUL"]
-  203 -> 66 [style=solid label="LBRACK"]
-  203 -> 67 [style=dashed label="TypeLit"]
-  203 -> 245 [style=dashed label="Type"]
-  203 -> 69 [style=dashed label="TypeName"]
-  203 -> 70 [style=dashed label="ArrayType"]
-  203 -> 71 [style=dashed label="StructType"]
-  203 -> 72 [style=dashed label="PointerType"]
-  203 -> 73 [style=dashed label="FunctionType"]
-  204 [label="204"]
-  204 -> 163 [style=solid label="LAND"]
-  204 -> "204R149" [style=solid]
- "204R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
-  205 [label="205"]
-  205 -> 164 [style=solid label="EQL"]
-  205 -> 165 [style=solid label="NEQ"]
-  205 -> 166 [style=solid label="LEQ"]
-  205 -> 167 [style=solid label="GEQ"]
-  205 -> 168 [style=solid label="GTR"]
-  205 -> 169 [style=solid label="LSS"]
-  205 -> 170 [style=dashed label="rel_op"]
-  205 -> "205R151" [style=solid]
- "205R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
-  206 [label="206"]
-  206 -> 171 [style=solid label="ADD"]
-  206 -> 172 [style=solid label="SUB"]
-  206 -> 173 [style=solid label="OR"]
-  206 -> 174 [style=solid label="XOR"]
-  206 -> 175 [style=dashed label="add_op"]
-  206 -> "206R153" [style=solid]
- "206R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
-  207 [label="207"]
-  207 -> 176 [style=solid label="SHL"]
-  207 -> 177 [style=solid label="SHR"]
-  207 -> 178 [style=solid label="MUL"]
-  207 -> 179 [style=solid label="QUO"]
-  207 -> 180 [style=solid label="REM"]
-  207 -> 181 [style=solid label="AND"]
-  207 -> 182 [style=solid label="AND_NOT"]
-  207 -> 183 [style=dashed label="mul_op"]
-  207 -> "207R155" [style=solid]
- "207R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
-  208 [label="208"]
-  208 -> 157 [style=solid label="LBRACK"]
-  208 -> 158 [style=solid label="PERIOD"]
-  208 -> 159 [style=dashed label="Selector"]
-  208 -> 160 [style=dashed label="Index"]
-  208 -> 161 [style=dashed label="TypeAssertion"]
-  208 -> "208R157" [style=solid]
- "208R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
-  209 [label="209"]
-  209 -> 97 [style=solid label="FUNC"]
-  209 -> 98 [style=solid label="IDENTIFIER"]
-  209 -> 99 [style=solid label="BYTE"]
-  209 -> 11 [style=solid label="STRING"]
-  209 -> 100 [style=solid label="INTEGER"]
-  209 -> 101 [style=solid label="FLOAT"]
-  209 -> 102 [style=solid label="ADD"]
-  209 -> 103 [style=solid label="SUB"]
-  209 -> 104 [style=solid label="MUL"]
-  209 -> 105 [style=solid label="AND"]
-  209 -> 106 [style=solid label="NOT"]
-  209 -> 107 [style=solid label="XOR"]
-  209 -> 108 [style=solid label="LPAREN"]
-  209 -> 109 [style=dashed label="Operand"]
-  209 -> 110 [style=dashed label="OperandName"]
-  209 -> 111 [style=dashed label="int_lit"]
-  209 -> 112 [style=dashed label="float_lit"]
-  209 -> 114 [style=dashed label="Literal"]
-  209 -> 115 [style=dashed label="string_lit"]
-  209 -> 116 [style=dashed label="byte_lit"]
-  209 -> 117 [style=dashed label="BasicLit"]
-  209 -> 118 [style=dashed label="FunctionLit"]
-  209 -> 119 [style=dashed label="PrimaryExpr"]
-  209 -> 246 [style=dashed label="Expression"]
-  209 -> 121 [style=dashed label="Expression1"]
-  209 -> 122 [style=dashed label="Expression2"]
-  209 -> 123 [style=dashed label="Expression3"]
-  209 -> 124 [style=dashed label="Expression4"]
-  209 -> 125 [style=dashed label="Expression5"]
-  209 -> 126 [style=dashed label="UnaryExpr"]
-  209 -> 127 [style=dashed label="unary_op"]
-  210 [label="210"]
-  210 -> 247 [style=solid label="IDENTIFIER"]
-  210 -> "210R83" [style=solid]
- "210R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
-  211 [label="211"]
-  211 -> 248 [style=solid label="IDENTIFIER"]
-  211 -> "211R85" [style=solid]
- "211R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
-  212 [label="212"]
-  212 -> 249 [style=dashed label="OPENB"]
-  212 -> "212R3" [style=solid]
- "212R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  213 [label="213"]
-  213 -> 250 [style=dashed label="OPENB"]
-  213 -> "213R3" [style=solid]
- "213R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  214 [label="214"]
-  214 -> 97 [style=solid label="FUNC"]
-  214 -> 98 [style=solid label="IDENTIFIER"]
-  214 -> 99 [style=solid label="BYTE"]
-  214 -> 11 [style=solid label="STRING"]
-  214 -> 100 [style=solid label="INTEGER"]
-  214 -> 101 [style=solid label="FLOAT"]
-  214 -> 102 [style=solid label="ADD"]
-  214 -> 103 [style=solid label="SUB"]
-  214 -> 104 [style=solid label="MUL"]
-  214 -> 105 [style=solid label="AND"]
-  214 -> 106 [style=solid label="NOT"]
-  214 -> 107 [style=solid label="XOR"]
-  214 -> 108 [style=solid label="LPAREN"]
-  214 -> 109 [style=dashed label="Operand"]
-  214 -> 110 [style=dashed label="OperandName"]
-  214 -> 111 [style=dashed label="int_lit"]
-  214 -> 112 [style=dashed label="float_lit"]
-  214 -> 114 [style=dashed label="Literal"]
-  214 -> 115 [style=dashed label="string_lit"]
-  214 -> 116 [style=dashed label="byte_lit"]
-  214 -> 117 [style=dashed label="BasicLit"]
-  214 -> 118 [style=dashed label="FunctionLit"]
-  214 -> 119 [style=dashed label="PrimaryExpr"]
-  214 -> 251 [style=dashed label="Expression"]
-  214 -> 121 [style=dashed label="Expression1"]
-  214 -> 122 [style=dashed label="Expression2"]
-  214 -> 123 [style=dashed label="Expression3"]
-  214 -> 124 [style=dashed label="Expression4"]
-  214 -> 125 [style=dashed label="Expression5"]
-  214 -> 126 [style=dashed label="UnaryExpr"]
-  214 -> 127 [style=dashed label="unary_op"]
-  214 -> "214R81" [style=solid]
- "214R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
-  215 [label="215"]
-  215 -> 252 [style=solid label="DEFINE"]
-  215 -> 253 [style=solid label="COLON"]
-  215 -> "215R79" [style=solid]
- "215R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
-  216 [label="216"]
-  216 -> "216R13" [style=solid]
- "216R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
-  217 [label="217"]
-  217 -> 97 [style=solid label="FUNC"]
-  217 -> 210 [style=solid label="BREAK"]
-  217 -> 18 [style=solid label="CONST"]
-  217 -> 211 [style=solid label="CONTINUE"]
-  217 -> 212 [style=solid label="FOR"]
-  217 -> 213 [style=solid label="IF"]
-  217 -> 214 [style=solid label="RETURN"]
-  217 -> 19 [style=solid label="TYPE"]
-  217 -> 20 [style=solid label="VAR"]
-  217 -> 215 [style=solid label="IDENTIFIER"]
-  217 -> 99 [style=solid label="BYTE"]
-  217 -> 11 [style=solid label="STRING"]
-  217 -> 100 [style=solid label="INTEGER"]
-  217 -> 101 [style=solid label="FLOAT"]
-  217 -> 102 [style=solid label="ADD"]
-  217 -> 103 [style=solid label="SUB"]
-  217 -> 104 [style=solid label="MUL"]
-  217 -> 105 [style=solid label="AND"]
-  217 -> 106 [style=solid label="NOT"]
-  217 -> 107 [style=solid label="XOR"]
-  217 -> 108 [style=solid label="LPAREN"]
-  217 -> 137 [style=solid label="LBRACE"]
-  217 -> 216 [style=dashed label="Block"]
-  217 -> 254 [style=dashed label="CLOSEB"]
-  217 -> 255 [style=dashed label="Statement"]
-  217 -> 219 [style=dashed label="SimpleStmt"]
-  217 -> 220 [style=dashed label="EmptyStmt"]
-  217 -> 221 [style=dashed label="LabeledStmt"]
-  217 -> 222 [style=dashed label="IncDecStmt"]
-  217 -> 223 [style=dashed label="Assignment"]
-  217 -> 224 [style=dashed label="VarDecl"]
-  217 -> 225 [style=dashed label="Declaration"]
-  217 -> 226 [style=dashed label="FunctionStmt"]
-  217 -> 227 [style=dashed label="FunctionCall"]
-  217 -> 109 [style=dashed label="Operand"]
-  217 -> 110 [style=dashed label="OperandName"]
-  217 -> 228 [style=dashed label="ReturnStmt"]
-  217 -> 229 [style=dashed label="BreakStmt"]
-  217 -> 230 [style=dashed label="ContinueStmt"]
-  217 -> 231 [style=dashed label="IfStmt"]
-  217 -> 232 [style=dashed label="ForStmt"]
-  217 -> 111 [style=dashed label="int_lit"]
-  217 -> 112 [style=dashed label="float_lit"]
-  217 -> 27 [style=dashed label="ConstDecl"]
-  217 -> 233 [style=dashed label="ExpressionList"]
-  217 -> 28 [style=dashed label="TypeDecl"]
-  217 -> 114 [style=dashed label="Literal"]
-  217 -> 115 [style=dashed label="string_lit"]
-  217 -> 116 [style=dashed label="byte_lit"]
-  217 -> 117 [style=dashed label="BasicLit"]
-  217 -> 118 [style=dashed label="FunctionLit"]
-  217 -> 234 [style=dashed label="PrimaryExpr"]
-  217 -> 235 [style=dashed label="Expression"]
-  217 -> 121 [style=dashed label="Expression1"]
-  217 -> 122 [style=dashed label="Expression2"]
-  217 -> 123 [style=dashed label="Expression3"]
-  217 -> 124 [style=dashed label="Expression4"]
-  217 -> 125 [style=dashed label="Expression5"]
-  217 -> 126 [style=dashed label="UnaryExpr"]
-  217 -> 127 [style=dashed label="unary_op"]
-  217 -> "217R4" [style=solid]
- "217R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  217 -> "217R21" [label="[SEMICOLON]", style=solid]
- "217R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  218 [label="218"]
-  218 -> 256 [style=solid label="SEMICOLON"]
-  219 [label="219"]
-  219 -> "219R9" [style=solid]
- "219R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
-  220 [label="220"]
-  220 -> "220R18" [style=solid]
- "220R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
-  221 [label="221"]
-  221 -> "221R8" [style=solid]
- "221R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
-  222 [label="222"]
-  222 -> "222R19" [style=solid]
- "222R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
-  223 [label="223"]
-  223 -> "223R20" [style=solid]
- "223R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
-  224 [label="224"]
-  224 -> 257 [style=solid label="DEFINE"]
-  224 -> "224R31" [style=solid]
- "224R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
-  225 [label="225"]
-  225 -> "225R7" [style=solid]
- "225R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
-  226 [label="226"]
-  226 -> "226R17" [style=solid]
- "226R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
-  227 [label="227"]
-  227 -> "227R16" [style=solid]
- "227R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
-  228 [label="228"]
-  228 -> "228R10" [style=solid]
- "228R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
-  229 [label="229"]
-  229 -> "229R11" [style=solid]
- "229R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
-  230 [label="230"]
-  230 -> "230R12" [style=solid]
- "230R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
-  231 [label="231"]
-  231 -> "231R14" [style=solid]
- "231R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
-  232 [label="232"]
-  232 -> "232R15" [style=solid]
- "232R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
-  233 [label="233"]
-  233 -> 258 [style=solid label="ASSIGN"]
-  233 -> 259 [style=solid label="ADD_ASSIGN"]
-  233 -> 260 [style=solid label="SUB_ASSIGN"]
-  233 -> 261 [style=solid label="MUL_ASSIGN"]
-  233 -> 262 [style=solid label="QUO_ASSIGN"]
-  233 -> 263 [style=solid label="REM_ASSIGN"]
-  233 -> 209 [style=solid label="COMMA"]
-  233 -> 264 [style=dashed label="assign_op"]
-  234 [label="234"]
-  234 -> 265 [style=solid label="LPAREN"]
-  234 -> 157 [style=solid label="LBRACK"]
-  234 -> 158 [style=solid label="PERIOD"]
-  234 -> 159 [style=dashed label="Selector"]
-  234 -> 160 [style=dashed label="Index"]
-  234 -> 161 [style=dashed label="TypeAssertion"]
-  234 -> "234R159" [style=solid]
- "234R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
-  235 [label="235"]
-  235 -> 266 [style=solid label="INC"]
-  235 -> 267 [style=solid label="DEC"]
-  235 -> "235R118" [style=solid]
- "235R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  236 [label="236"]
-  236 -> "236R46" [style=solid]
- "236R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
-  237 [label="237"]
-  237 -> 61 [style=solid label="FUNC"]
-  237 -> 62 [style=solid label="STRUCT"]
-  237 -> 63 [style=solid label="VAR_TYPE"]
-  237 -> 64 [style=solid label="IDENTIFIER"]
-  237 -> 65 [style=solid label="MUL"]
-  237 -> 66 [style=solid label="LBRACK"]
-  237 -> 67 [style=dashed label="TypeLit"]
-  237 -> 268 [style=dashed label="Type"]
-  237 -> 69 [style=dashed label="TypeName"]
-  237 -> 70 [style=dashed label="ArrayType"]
-  237 -> 71 [style=dashed label="StructType"]
-  237 -> 72 [style=dashed label="PointerType"]
-  237 -> 73 [style=dashed label="FunctionType"]
-  238 [label="238"]
-  238 -> "238R110" [style=solid]
- "238R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
-  239 [label="239"]
-  239 -> "239R109" [style=solid]
- "239R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
-  240 [label="240"]
-  240 -> "240R107" [style=solid]
- "240R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
-  241 [label="241"]
-  241 -> "241R141" [style=solid]
- "241R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
-  242 [label="242"]
-  242 -> 97 [style=solid label="FUNC"]
-  242 -> 98 [style=solid label="IDENTIFIER"]
-  242 -> 99 [style=solid label="BYTE"]
-  242 -> 11 [style=solid label="STRING"]
-  242 -> 100 [style=solid label="INTEGER"]
-  242 -> 101 [style=solid label="FLOAT"]
-  242 -> 102 [style=solid label="ADD"]
-  242 -> 103 [style=solid label="SUB"]
-  242 -> 104 [style=solid label="MUL"]
-  242 -> 105 [style=solid label="AND"]
-  242 -> 106 [style=solid label="NOT"]
-  242 -> 107 [style=solid label="XOR"]
-  242 -> 108 [style=solid label="LPAREN"]
-  242 -> 109 [style=dashed label="Operand"]
-  242 -> 110 [style=dashed label="OperandName"]
-  242 -> 111 [style=dashed label="int_lit"]
-  242 -> 112 [style=dashed label="float_lit"]
-  242 -> 114 [style=dashed label="Literal"]
-  242 -> 115 [style=dashed label="string_lit"]
-  242 -> 116 [style=dashed label="byte_lit"]
-  242 -> 117 [style=dashed label="BasicLit"]
-  242 -> 118 [style=dashed label="FunctionLit"]
-  242 -> 119 [style=dashed label="PrimaryExpr"]
-  242 -> 269 [style=dashed label="Expression"]
-  242 -> 121 [style=dashed label="Expression1"]
-  242 -> 122 [style=dashed label="Expression2"]
-  242 -> 123 [style=dashed label="Expression3"]
-  242 -> 124 [style=dashed label="Expression4"]
-  242 -> 125 [style=dashed label="Expression5"]
-  242 -> 126 [style=dashed label="UnaryExpr"]
-  242 -> 127 [style=dashed label="unary_op"]
-  243 [label="243"]
-  243 -> 97 [style=solid label="FUNC"]
-  243 -> 98 [style=solid label="IDENTIFIER"]
-  243 -> 99 [style=solid label="BYTE"]
-  243 -> 11 [style=solid label="STRING"]
-  243 -> 100 [style=solid label="INTEGER"]
-  243 -> 101 [style=solid label="FLOAT"]
-  243 -> 102 [style=solid label="ADD"]
-  243 -> 103 [style=solid label="SUB"]
-  243 -> 104 [style=solid label="MUL"]
-  243 -> 105 [style=solid label="AND"]
-  243 -> 106 [style=solid label="NOT"]
-  243 -> 107 [style=solid label="XOR"]
-  243 -> 108 [style=solid label="LPAREN"]
-  243 -> 109 [style=dashed label="Operand"]
-  243 -> 110 [style=dashed label="OperandName"]
-  243 -> 111 [style=dashed label="int_lit"]
-  243 -> 112 [style=dashed label="float_lit"]
-  243 -> 114 [style=dashed label="Literal"]
-  243 -> 115 [style=dashed label="string_lit"]
-  243 -> 116 [style=dashed label="byte_lit"]
-  243 -> 117 [style=dashed label="BasicLit"]
-  243 -> 118 [style=dashed label="FunctionLit"]
-  243 -> 119 [style=dashed label="PrimaryExpr"]
-  243 -> 270 [style=dashed label="Expression"]
-  243 -> 121 [style=dashed label="Expression1"]
-  243 -> 122 [style=dashed label="Expression2"]
-  243 -> 123 [style=dashed label="Expression3"]
-  243 -> 124 [style=dashed label="Expression4"]
-  243 -> 125 [style=dashed label="Expression5"]
-  243 -> 126 [style=dashed label="UnaryExpr"]
-  243 -> 127 [style=dashed label="unary_op"]
-  244 [label="244"]
-  244 -> "244R146" [style=solid]
- "244R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
-  245 [label="245"]
-  245 -> 271 [style=solid label="RPAREN"]
-  246 [label="246"]
-  246 -> "246R117" [style=solid]
- "246R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
-  247 [label="247"]
-  247 -> "247R82" [style=solid]
- "247R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
-  248 [label="248"]
-  248 -> "248R84" [style=solid]
- "248R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
-  249 [label="249"]
-  249 -> 97 [style=solid label="FUNC"]
-  249 -> 98 [style=solid label="IDENTIFIER"]
-  249 -> 99 [style=solid label="BYTE"]
-  249 -> 11 [style=solid label="STRING"]
-  249 -> 100 [style=solid label="INTEGER"]
-  249 -> 101 [style=solid label="FLOAT"]
-  249 -> 102 [style=solid label="ADD"]
-  249 -> 103 [style=solid label="SUB"]
-  249 -> 104 [style=solid label="MUL"]
-  249 -> 105 [style=solid label="AND"]
-  249 -> 106 [style=solid label="NOT"]
-  249 -> 107 [style=solid label="XOR"]
-  249 -> 108 [style=solid label="LPAREN"]
-  249 -> 272 [style=dashed label="SimpleStmt"]
-  249 -> 220 [style=dashed label="EmptyStmt"]
-  249 -> 222 [style=dashed label="IncDecStmt"]
-  249 -> 223 [style=dashed label="Assignment"]
-  249 -> 109 [style=dashed label="Operand"]
-  249 -> 110 [style=dashed label="OperandName"]
-  249 -> 273 [style=dashed label="Condition"]
-  249 -> 274 [style=dashed label="ForClause"]
-  249 -> 275 [style=dashed label="InitStmt"]
-  249 -> 111 [style=dashed label="int_lit"]
-  249 -> 112 [style=dashed label="float_lit"]
-  249 -> 233 [style=dashed label="ExpressionList"]
-  249 -> 114 [style=dashed label="Literal"]
-  249 -> 115 [style=dashed label="string_lit"]
-  249 -> 116 [style=dashed label="byte_lit"]
-  249 -> 117 [style=dashed label="BasicLit"]
-  249 -> 118 [style=dashed label="FunctionLit"]
-  249 -> 119 [style=dashed label="PrimaryExpr"]
-  249 -> 276 [style=dashed label="Expression"]
-  249 -> 121 [style=dashed label="Expression1"]
-  249 -> 122 [style=dashed label="Expression2"]
-  249 -> 123 [style=dashed label="Expression3"]
-  249 -> 124 [style=dashed label="Expression4"]
-  249 -> 125 [style=dashed label="Expression5"]
-  249 -> 126 [style=dashed label="UnaryExpr"]
-  249 -> 127 [style=dashed label="unary_op"]
-  249 -> "249R21" [style=solid]
- "249R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  250 [label="250"]
-  250 -> 97 [style=solid label="FUNC"]
-  250 -> 98 [style=solid label="IDENTIFIER"]
-  250 -> 99 [style=solid label="BYTE"]
-  250 -> 11 [style=solid label="STRING"]
-  250 -> 100 [style=solid label="INTEGER"]
-  250 -> 101 [style=solid label="FLOAT"]
-  250 -> 102 [style=solid label="ADD"]
-  250 -> 103 [style=solid label="SUB"]
-  250 -> 104 [style=solid label="MUL"]
-  250 -> 105 [style=solid label="AND"]
-  250 -> 106 [style=solid label="NOT"]
-  250 -> 107 [style=solid label="XOR"]
-  250 -> 108 [style=solid label="LPAREN"]
-  250 -> 277 [style=dashed label="SimpleStmt"]
-  250 -> 220 [style=dashed label="EmptyStmt"]
-  250 -> 222 [style=dashed label="IncDecStmt"]
-  250 -> 223 [style=dashed label="Assignment"]
-  250 -> 109 [style=dashed label="Operand"]
-  250 -> 110 [style=dashed label="OperandName"]
-  250 -> 111 [style=dashed label="int_lit"]
-  250 -> 112 [style=dashed label="float_lit"]
-  250 -> 233 [style=dashed label="ExpressionList"]
-  250 -> 114 [style=dashed label="Literal"]
-  250 -> 115 [style=dashed label="string_lit"]
-  250 -> 116 [style=dashed label="byte_lit"]
-  250 -> 117 [style=dashed label="BasicLit"]
-  250 -> 118 [style=dashed label="FunctionLit"]
-  250 -> 119 [style=dashed label="PrimaryExpr"]
-  250 -> 278 [style=dashed label="Expression"]
-  250 -> 121 [style=dashed label="Expression1"]
-  250 -> 122 [style=dashed label="Expression2"]
-  250 -> 123 [style=dashed label="Expression3"]
-  250 -> 124 [style=dashed label="Expression4"]
-  250 -> 125 [style=dashed label="Expression5"]
-  250 -> 126 [style=dashed label="UnaryExpr"]
-  250 -> 127 [style=dashed label="unary_op"]
-  250 -> "250R21" [style=solid]
- "250R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  251 [label="251"]
-  251 -> "251R80" [style=solid]
- "251R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
-  252 [label="252"]
-  252 -> 97 [style=solid label="FUNC"]
-  252 -> 98 [style=solid label="IDENTIFIER"]
-  252 -> 99 [style=solid label="BYTE"]
-  252 -> 11 [style=solid label="STRING"]
-  252 -> 100 [style=solid label="INTEGER"]
-  252 -> 101 [style=solid label="FLOAT"]
-  252 -> 108 [style=solid label="LPAREN"]
-  252 -> 279 [style=dashed label="FunctionCall"]
-  252 -> 109 [style=dashed label="Operand"]
-  252 -> 110 [style=dashed label="OperandName"]
-  252 -> 111 [style=dashed label="int_lit"]
-  252 -> 112 [style=dashed label="float_lit"]
-  252 -> 114 [style=dashed label="Literal"]
-  252 -> 115 [style=dashed label="string_lit"]
-  252 -> 116 [style=dashed label="byte_lit"]
-  252 -> 117 [style=dashed label="BasicLit"]
-  252 -> 118 [style=dashed label="FunctionLit"]
-  252 -> 280 [style=dashed label="PrimaryExpr"]
-  253 [label="253"]
-  253 -> 97 [style=solid label="FUNC"]
-  253 -> 210 [style=solid label="BREAK"]
-  253 -> 18 [style=solid label="CONST"]
-  253 -> 211 [style=solid label="CONTINUE"]
-  253 -> 212 [style=solid label="FOR"]
-  253 -> 213 [style=solid label="IF"]
-  253 -> 214 [style=solid label="RETURN"]
-  253 -> 19 [style=solid label="TYPE"]
-  253 -> 20 [style=solid label="VAR"]
-  253 -> 215 [style=solid label="IDENTIFIER"]
-  253 -> 99 [style=solid label="BYTE"]
-  253 -> 11 [style=solid label="STRING"]
-  253 -> 100 [style=solid label="INTEGER"]
-  253 -> 101 [style=solid label="FLOAT"]
-  253 -> 102 [style=solid label="ADD"]
-  253 -> 103 [style=solid label="SUB"]
-  253 -> 104 [style=solid label="MUL"]
-  253 -> 105 [style=solid label="AND"]
-  253 -> 106 [style=solid label="NOT"]
-  253 -> 107 [style=solid label="XOR"]
-  253 -> 108 [style=solid label="LPAREN"]
-  253 -> 137 [style=solid label="LBRACE"]
-  253 -> 216 [style=dashed label="Block"]
-  253 -> 281 [style=dashed label="Statement"]
-  253 -> 219 [style=dashed label="SimpleStmt"]
-  253 -> 220 [style=dashed label="EmptyStmt"]
-  253 -> 221 [style=dashed label="LabeledStmt"]
-  253 -> 222 [style=dashed label="IncDecStmt"]
-  253 -> 223 [style=dashed label="Assignment"]
-  253 -> 224 [style=dashed label="VarDecl"]
-  253 -> 225 [style=dashed label="Declaration"]
-  253 -> 226 [style=dashed label="FunctionStmt"]
-  253 -> 227 [style=dashed label="FunctionCall"]
-  253 -> 109 [style=dashed label="Operand"]
-  253 -> 110 [style=dashed label="OperandName"]
-  253 -> 228 [style=dashed label="ReturnStmt"]
-  253 -> 229 [style=dashed label="BreakStmt"]
-  253 -> 230 [style=dashed label="ContinueStmt"]
-  253 -> 231 [style=dashed label="IfStmt"]
-  253 -> 232 [style=dashed label="ForStmt"]
-  253 -> 111 [style=dashed label="int_lit"]
-  253 -> 112 [style=dashed label="float_lit"]
-  253 -> 27 [style=dashed label="ConstDecl"]
-  253 -> 233 [style=dashed label="ExpressionList"]
-  253 -> 28 [style=dashed label="TypeDecl"]
-  253 -> 114 [style=dashed label="Literal"]
-  253 -> 115 [style=dashed label="string_lit"]
-  253 -> 116 [style=dashed label="byte_lit"]
-  253 -> 117 [style=dashed label="BasicLit"]
-  253 -> 118 [style=dashed label="FunctionLit"]
-  253 -> 234 [style=dashed label="PrimaryExpr"]
-  253 -> 235 [style=dashed label="Expression"]
-  253 -> 121 [style=dashed label="Expression1"]
-  253 -> 122 [style=dashed label="Expression2"]
-  253 -> 123 [style=dashed label="Expression3"]
-  253 -> 124 [style=dashed label="Expression4"]
-  253 -> 125 [style=dashed label="Expression5"]
-  253 -> 126 [style=dashed label="UnaryExpr"]
-  253 -> 127 [style=dashed label="unary_op"]
-  253 -> "253R21" [style=solid]
- "253R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  254 [label="254"]
-  254 -> 282 [style=solid label="RBRACE"]
-  255 [label="255"]
-  255 -> 283 [style=solid label="SEMICOLON"]
-  256 [label="256"]
-  256 -> "256R6" [style=solid]
- "256R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
-  257 [label="257"]
-  257 -> 97 [style=solid label="FUNC"]
-  257 -> 98 [style=solid label="IDENTIFIER"]
-  257 -> 99 [style=solid label="BYTE"]
-  257 -> 11 [style=solid label="STRING"]
-  257 -> 100 [style=solid label="INTEGER"]
-  257 -> 101 [style=solid label="FLOAT"]
-  257 -> 108 [style=solid label="LPAREN"]
-  257 -> 284 [style=dashed label="FunctionCall"]
-  257 -> 109 [style=dashed label="Operand"]
-  257 -> 110 [style=dashed label="OperandName"]
-  257 -> 111 [style=dashed label="int_lit"]
-  257 -> 112 [style=dashed label="float_lit"]
-  257 -> 114 [style=dashed label="Literal"]
-  257 -> 115 [style=dashed label="string_lit"]
-  257 -> 116 [style=dashed label="byte_lit"]
-  257 -> 117 [style=dashed label="BasicLit"]
-  257 -> 118 [style=dashed label="FunctionLit"]
-  257 -> 280 [style=dashed label="PrimaryExpr"]
-  258 [label="258"]
-  258 -> "258R184" [style=solid]
- "258R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
-  259 [label="259"]
-  259 -> "259R185" [style=solid]
- "259R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
-  260 [label="260"]
-  260 -> "260R186" [style=solid]
- "260R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
-  261 [label="261"]
-  261 -> "261R187" [style=solid]
- "261R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
-  262 [label="262"]
-  262 -> "262R188" [style=solid]
- "262R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
-  263 [label="263"]
-  263 -> "263R189" [style=solid]
- "263R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
-  264 [label="264"]
-  264 -> 97 [style=solid label="FUNC"]
-  264 -> 98 [style=solid label="IDENTIFIER"]
-  264 -> 99 [style=solid label="BYTE"]
-  264 -> 11 [style=solid label="STRING"]
-  264 -> 100 [style=solid label="INTEGER"]
-  264 -> 101 [style=solid label="FLOAT"]
-  264 -> 102 [style=solid label="ADD"]
-  264 -> 103 [style=solid label="SUB"]
-  264 -> 104 [style=solid label="MUL"]
-  264 -> 105 [style=solid label="AND"]
-  264 -> 106 [style=solid label="NOT"]
-  264 -> 107 [style=solid label="XOR"]
-  264 -> 108 [style=solid label="LPAREN"]
-  264 -> 109 [style=dashed label="Operand"]
-  264 -> 110 [style=dashed label="OperandName"]
-  264 -> 111 [style=dashed label="int_lit"]
-  264 -> 112 [style=dashed label="float_lit"]
-  264 -> 285 [style=dashed label="ExpressionList"]
-  264 -> 114 [style=dashed label="Literal"]
-  264 -> 115 [style=dashed label="string_lit"]
-  264 -> 116 [style=dashed label="byte_lit"]
-  264 -> 117 [style=dashed label="BasicLit"]
-  264 -> 118 [style=dashed label="FunctionLit"]
-  264 -> 119 [style=dashed label="PrimaryExpr"]
-  264 -> 189 [style=dashed label="Expression"]
-  264 -> 121 [style=dashed label="Expression1"]
-  264 -> 122 [style=dashed label="Expression2"]
-  264 -> 123 [style=dashed label="Expression3"]
-  264 -> 124 [style=dashed label="Expression4"]
-  264 -> 125 [style=dashed label="Expression5"]
-  264 -> 126 [style=dashed label="UnaryExpr"]
-  264 -> 127 [style=dashed label="unary_op"]
-  265 [label="265"]
-  265 -> 97 [style=solid label="FUNC"]
-  265 -> 98 [style=solid label="IDENTIFIER"]
-  265 -> 99 [style=solid label="BYTE"]
-  265 -> 11 [style=solid label="STRING"]
-  265 -> 100 [style=solid label="INTEGER"]
-  265 -> 101 [style=solid label="FLOAT"]
-  265 -> 108 [style=solid label="LPAREN"]
-  265 -> 286 [style=dashed label="FunctionCall"]
-  265 -> 287 [style=dashed label="ArgumentList"]
-  265 -> 288 [style=dashed label="Arguments"]
-  265 -> 109 [style=dashed label="Operand"]
-  265 -> 110 [style=dashed label="OperandName"]
-  265 -> 111 [style=dashed label="int_lit"]
-  265 -> 112 [style=dashed label="float_lit"]
-  265 -> 114 [style=dashed label="Literal"]
-  265 -> 115 [style=dashed label="string_lit"]
-  265 -> 116 [style=dashed label="byte_lit"]
-  265 -> 117 [style=dashed label="BasicLit"]
-  265 -> 118 [style=dashed label="FunctionLit"]
-  265 -> 289 [style=dashed label="PrimaryExpr"]
-  265 -> "265R41" [style=solid]
- "265R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
-  266 [label="266"]
-  266 -> "266R23" [style=solid]
- "266R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
-  267 [label="267"]
-  267 -> "267R24" [style=solid]
- "267R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
-  268 [label="268"]
-  268 -> "268R56" [style=solid]
- "268R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
-  269 [label="269"]
-  269 -> 290 [style=solid label="COLON"]
-  270 [label="270"]
-  270 -> "270R143" [style=solid]
- "270R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
-  271 [label="271"]
-  271 -> "271R147" [style=solid]
- "271R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
-  272 [label="272"]
-  272 -> "272R96" [style=solid]
- "272R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
-  273 [label="273"]
-  273 -> 137 [style=solid label="LBRACE"]
-  273 -> 291 [style=dashed label="Block"]
-  274 [label="274"]
-  274 -> 137 [style=solid label="LBRACE"]
-  274 -> 292 [style=dashed label="Block"]
-  275 [label="275"]
-  275 -> 293 [style=solid label="SEMICOLON"]
-  276 [label="276"]
-  276 -> 266 [style=solid label="INC"]
-  276 -> 267 [style=solid label="DEC"]
-  276 -> "276R94" [label="[LBRACE]", style=solid]
- "276R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
-  276 -> "276R118" [style=solid]
- "276R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  277 [label="277"]
-  277 -> 294 [style=solid label="SEMICOLON"]
-  278 [label="278"]
-  278 -> 266 [style=solid label="INC"]
-  278 -> 267 [style=solid label="DEC"]
-  278 -> 137 [style=solid label="LBRACE"]
-  278 -> 295 [style=dashed label="Block"]
-  278 -> "278R118" [style=solid]
- "278R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  279 [label="279"]
-  279 -> "279R37" [style=solid]
- "279R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
-  280 [label="280"]
-  280 -> 265 [style=solid label="LPAREN"]
-  280 -> 157 [style=solid label="LBRACK"]
-  280 -> 158 [style=solid label="PERIOD"]
-  280 -> 159 [style=dashed label="Selector"]
-  280 -> 160 [style=dashed label="Index"]
-  280 -> 161 [style=dashed label="TypeAssertion"]
-  281 [label="281"]
-  281 -> "281R22" [style=solid]
- "281R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
-  282 [label="282"]
-  282 -> "282R2" [style=solid]
- "282R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
-  283 [label="283"]
-  283 -> "283R5" [style=solid]
- "283R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
-  284 [label="284"]
-  284 -> "284R36" [style=solid]
- "284R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
-  285 [label="285"]
-  285 -> 209 [style=solid label="COMMA"]
-  285 -> "285R25" [style=solid]
- "285R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
-  286 [label="286"]
-  286 -> "286R43" [style=solid]
- "286R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
-  287 [label="287"]
-  287 -> 296 [style=solid label="RPAREN"]
-  287 -> 297 [style=solid label="COMMA"]
-  288 [label="288"]
-  288 -> "288R40" [style=solid]
- "288R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
-  289 [label="289"]
-  289 -> 265 [style=solid label="LPAREN"]
-  289 -> 157 [style=solid label="LBRACK"]
-  289 -> 158 [style=solid label="PERIOD"]
-  289 -> 159 [style=dashed label="Selector"]
-  289 -> 160 [style=dashed label="Index"]
-  289 -> 161 [style=dashed label="TypeAssertion"]
-  289 -> "289R42" [style=solid]
- "289R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
-  290 [label="290"]
-  290 -> 97 [style=solid label="FUNC"]
-  290 -> 98 [style=solid label="IDENTIFIER"]
-  290 -> 99 [style=solid label="BYTE"]
-  290 -> 11 [style=solid label="STRING"]
-  290 -> 100 [style=solid label="INTEGER"]
-  290 -> 101 [style=solid label="FLOAT"]
-  290 -> 102 [style=solid label="ADD"]
-  290 -> 103 [style=solid label="SUB"]
-  290 -> 104 [style=solid label="MUL"]
-  290 -> 105 [style=solid label="AND"]
-  290 -> 106 [style=solid label="NOT"]
-  290 -> 107 [style=solid label="XOR"]
-  290 -> 108 [style=solid label="LPAREN"]
-  290 -> 109 [style=dashed label="Operand"]
-  290 -> 110 [style=dashed label="OperandName"]
-  290 -> 111 [style=dashed label="int_lit"]
-  290 -> 112 [style=dashed label="float_lit"]
-  290 -> 114 [style=dashed label="Literal"]
-  290 -> 115 [style=dashed label="string_lit"]
-  290 -> 116 [style=dashed label="byte_lit"]
-  290 -> 117 [style=dashed label="BasicLit"]
-  290 -> 118 [style=dashed label="FunctionLit"]
-  290 -> 119 [style=dashed label="PrimaryExpr"]
-  290 -> 298 [style=dashed label="Expression"]
-  290 -> 121 [style=dashed label="Expression1"]
-  290 -> 122 [style=dashed label="Expression2"]
-  290 -> 123 [style=dashed label="Expression3"]
-  290 -> 124 [style=dashed label="Expression4"]
-  290 -> 125 [style=dashed label="Expression5"]
-  290 -> 126 [style=dashed label="UnaryExpr"]
-  290 -> 127 [style=dashed label="unary_op"]
-  291 [label="291"]
-  291 -> 299 [style=dashed label="CLOSEB"]
-  291 -> "291R4" [style=solid]
- "291R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  292 [label="292"]
-  292 -> 300 [style=dashed label="CLOSEB"]
-  292 -> "292R4" [style=solid]
- "292R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  293 [label="293"]
-  293 -> 97 [style=solid label="FUNC"]
-  293 -> 98 [style=solid label="IDENTIFIER"]
-  293 -> 99 [style=solid label="BYTE"]
-  293 -> 11 [style=solid label="STRING"]
-  293 -> 100 [style=solid label="INTEGER"]
-  293 -> 101 [style=solid label="FLOAT"]
-  293 -> 102 [style=solid label="ADD"]
-  293 -> 103 [style=solid label="SUB"]
-  293 -> 104 [style=solid label="MUL"]
-  293 -> 105 [style=solid label="AND"]
-  293 -> 106 [style=solid label="NOT"]
-  293 -> 107 [style=solid label="XOR"]
-  293 -> 108 [style=solid label="LPAREN"]
-  293 -> 109 [style=dashed label="Operand"]
-  293 -> 110 [style=dashed label="OperandName"]
-  293 -> 301 [style=dashed label="Condition"]
-  293 -> 111 [style=dashed label="int_lit"]
-  293 -> 112 [style=dashed label="float_lit"]
-  293 -> 114 [style=dashed label="Literal"]
-  293 -> 115 [style=dashed label="string_lit"]
-  293 -> 116 [style=dashed label="byte_lit"]
-  293 -> 117 [style=dashed label="BasicLit"]
-  293 -> 118 [style=dashed label="FunctionLit"]
-  293 -> 119 [style=dashed label="PrimaryExpr"]
-  293 -> 302 [style=dashed label="Expression"]
-  293 -> 121 [style=dashed label="Expression1"]
-  293 -> 122 [style=dashed label="Expression2"]
-  293 -> 123 [style=dashed label="Expression3"]
-  293 -> 124 [style=dashed label="Expression4"]
-  293 -> 125 [style=dashed label="Expression5"]
-  293 -> 126 [style=dashed label="UnaryExpr"]
-  293 -> 127 [style=dashed label="unary_op"]
-  294 [label="294"]
-  294 -> 97 [style=solid label="FUNC"]
-  294 -> 98 [style=solid label="IDENTIFIER"]
-  294 -> 99 [style=solid label="BYTE"]
-  294 -> 11 [style=solid label="STRING"]
-  294 -> 100 [style=solid label="INTEGER"]
-  294 -> 101 [style=solid label="FLOAT"]
-  294 -> 102 [style=solid label="ADD"]
-  294 -> 103 [style=solid label="SUB"]
-  294 -> 104 [style=solid label="MUL"]
-  294 -> 105 [style=solid label="AND"]
-  294 -> 106 [style=solid label="NOT"]
-  294 -> 107 [style=solid label="XOR"]
-  294 -> 108 [style=solid label="LPAREN"]
-  294 -> 109 [style=dashed label="Operand"]
-  294 -> 110 [style=dashed label="OperandName"]
-  294 -> 111 [style=dashed label="int_lit"]
-  294 -> 112 [style=dashed label="float_lit"]
-  294 -> 114 [style=dashed label="Literal"]
-  294 -> 115 [style=dashed label="string_lit"]
-  294 -> 116 [style=dashed label="byte_lit"]
-  294 -> 117 [style=dashed label="BasicLit"]
-  294 -> 118 [style=dashed label="FunctionLit"]
-  294 -> 119 [style=dashed label="PrimaryExpr"]
-  294 -> 303 [style=dashed label="Expression"]
-  294 -> 121 [style=dashed label="Expression1"]
-  294 -> 122 [style=dashed label="Expression2"]
-  294 -> 123 [style=dashed label="Expression3"]
-  294 -> 124 [style=dashed label="Expression4"]
-  294 -> 125 [style=dashed label="Expression5"]
-  294 -> 126 [style=dashed label="UnaryExpr"]
-  294 -> 127 [style=dashed label="unary_op"]
-  295 [label="295"]
-  295 -> 304 [style=solid label="ELSE"]
-  295 -> 305 [style=dashed label="CLOSEB"]
-  295 -> "295R4" [style=solid]
- "295R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  296 [label="296"]
-  296 -> "296R38" [style=solid]
- "296R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
-  297 [label="297"]
-  297 -> 97 [style=solid label="FUNC"]
-  297 -> 98 [style=solid label="IDENTIFIER"]
-  297 -> 99 [style=solid label="BYTE"]
-  297 -> 11 [style=solid label="STRING"]
-  297 -> 100 [style=solid label="INTEGER"]
-  297 -> 101 [style=solid label="FLOAT"]
-  297 -> 108 [style=solid label="LPAREN"]
-  297 -> 286 [style=dashed label="FunctionCall"]
-  297 -> 306 [style=dashed label="Arguments"]
-  297 -> 109 [style=dashed label="Operand"]
-  297 -> 110 [style=dashed label="OperandName"]
-  297 -> 111 [style=dashed label="int_lit"]
-  297 -> 112 [style=dashed label="float_lit"]
-  297 -> 114 [style=dashed label="Literal"]
-  297 -> 115 [style=dashed label="string_lit"]
-  297 -> 116 [style=dashed label="byte_lit"]
-  297 -> 117 [style=dashed label="BasicLit"]
-  297 -> 118 [style=dashed label="FunctionLit"]
-  297 -> 289 [style=dashed label="PrimaryExpr"]
-  298 [label="298"]
-  298 -> "298R144" [style=solid]
- "298R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
-  299 [label="299"]
-  299 -> "299R92" [style=solid]
- "299R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
-  300 [label="300"]
-  300 -> "300R93" [style=solid]
- "300R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
-  301 [label="301"]
-  301 -> 307 [style=solid label="SEMICOLON"]
-  302 [label="302"]
-  302 -> "302R94" [style=solid]
- "302R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
-  303 [label="303"]
-  303 -> 137 [style=solid label="LBRACE"]
-  303 -> 308 [style=dashed label="Block"]
-  304 [label="304"]
-  304 -> 213 [style=solid label="IF"]
-  304 -> 137 [style=solid label="LBRACE"]
-  304 -> 309 [style=dashed label="Block"]
-  304 -> 310 [style=dashed label="IfStmt"]
-  305 [label="305"]
-  305 -> "305R86" [style=solid]
- "305R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
-  306 [label="306"]
-  306 -> "306R39" [style=solid]
- "306R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
-  307 [label="307"]
-  307 -> 97 [style=solid label="FUNC"]
-  307 -> 98 [style=solid label="IDENTIFIER"]
-  307 -> 99 [style=solid label="BYTE"]
-  307 -> 11 [style=solid label="STRING"]
-  307 -> 100 [style=solid label="INTEGER"]
-  307 -> 101 [style=solid label="FLOAT"]
-  307 -> 102 [style=solid label="ADD"]
-  307 -> 103 [style=solid label="SUB"]
-  307 -> 104 [style=solid label="MUL"]
-  307 -> 105 [style=solid label="AND"]
-  307 -> 106 [style=solid label="NOT"]
-  307 -> 107 [style=solid label="XOR"]
-  307 -> 108 [style=solid label="LPAREN"]
-  307 -> 311 [style=dashed label="SimpleStmt"]
-  307 -> 220 [style=dashed label="EmptyStmt"]
-  307 -> 222 [style=dashed label="IncDecStmt"]
-  307 -> 223 [style=dashed label="Assignment"]
-  307 -> 109 [style=dashed label="Operand"]
-  307 -> 110 [style=dashed label="OperandName"]
-  307 -> 312 [style=dashed label="PostStmt"]
-  307 -> 111 [style=dashed label="int_lit"]
-  307 -> 112 [style=dashed label="float_lit"]
-  307 -> 233 [style=dashed label="ExpressionList"]
-  307 -> 114 [style=dashed label="Literal"]
-  307 -> 115 [style=dashed label="string_lit"]
-  307 -> 116 [style=dashed label="byte_lit"]
-  307 -> 117 [style=dashed label="BasicLit"]
-  307 -> 118 [style=dashed label="FunctionLit"]
-  307 -> 119 [style=dashed label="PrimaryExpr"]
-  307 -> 235 [style=dashed label="Expression"]
-  307 -> 121 [style=dashed label="Expression1"]
-  307 -> 122 [style=dashed label="Expression2"]
-  307 -> 123 [style=dashed label="Expression3"]
-  307 -> 124 [style=dashed label="Expression4"]
-  307 -> 125 [style=dashed label="Expression5"]
-  307 -> 126 [style=dashed label="UnaryExpr"]
-  307 -> 127 [style=dashed label="unary_op"]
-  307 -> "307R21" [style=solid]
- "307R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  308 [label="308"]
-  308 -> 313 [style=solid label="ELSE"]
-  308 -> 314 [style=dashed label="CLOSEB"]
-  308 -> "308R4" [style=solid]
- "308R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  309 [label="309"]
-  309 -> 315 [style=dashed label="CLOSEB"]
-  309 -> "309R4" [style=solid]
- "309R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  310 [label="310"]
-  310 -> 316 [style=dashed label="CLOSEB"]
-  310 -> "310R4" [style=solid]
- "310R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  311 [label="311"]
-  311 -> "311R97" [style=solid]
- "311R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
-  312 [label="312"]
-  312 -> "312R95" [style=solid]
- "312R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
-  313 [label="313"]
-  313 -> 213 [style=solid label="IF"]
-  313 -> 137 [style=solid label="LBRACE"]
-  313 -> 317 [style=dashed label="Block"]
-  313 -> 318 [style=dashed label="IfStmt"]
-  314 [label="314"]
-  314 -> "314R87" [style=solid]
- "314R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
-  315 [label="315"]
-  315 -> "315R91" [style=solid]
- "315R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
-  316 [label="316"]
-  316 -> "316R90" [style=solid]
- "316R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
-  317 [label="317"]
-  317 -> 319 [style=dashed label="CLOSEB"]
-  317 -> "317R4" [style=solid]
- "317R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  318 [label="318"]
-  318 -> 320 [style=dashed label="CLOSEB"]
-  318 -> "318R4" [style=solid]
- "318R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  319 [label="319"]
-  319 -> "319R89" [style=solid]
- "319R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
-  320 [label="320"]
-  320 -> "320R88" [style=solid]
- "320R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
-}
diff --git a/parser.gv b/parser.gv
deleted file mode 100644
index afcb71c..0000000
--- a/parser.gv
+++ /dev/null
@@ -1,2229 +0,0 @@
-// Generated by GNU Bison 3.8.
-// Report bugs to <bug-bison@gnu.org>.
-// Home page: <https://www.gnu.org/software/bison/>.
-
-digraph "src/parser.ypp"
-{
-  node [fontname = courier, shape = box, colorscheme = paired6]
-  edge [fontname = courier]
-
-  0 [label="State 0\n\l  0 $accept: • StartFile $end\l"]
-  0 -> 1 [style=solid label="PACKAGE"]
-  0 -> 2 [style=dashed label="StartFile"]
-  0 -> 3 [style=dashed label="PackageClause"]
-  1 [label="State 1\n\l190 PackageClause: PACKAGE • PackageName\l"]
-  1 -> 4 [style=solid label="IDENTIFIER"]
-  1 -> 5 [style=dashed label="PackageName"]
-  2 [label="State 2\n\l  0 $accept: StartFile • $end\l"]
-  2 -> 6 [style=solid label="$end"]
-  3 [label="State 3\n\l  1 StartFile: PackageClause • SEMICOLON ImportDeclStar TopLevelDeclStar\l"]
-  3 -> 7 [style=solid label="SEMICOLON"]
-  4 [label="State 4\n\l191 PackageName: IDENTIFIER •\l"]
-  4 -> "4R191" [style=solid]
- "4R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
-  5 [label="State 5\n\l190 PackageClause: PACKAGE PackageName •\l"]
-  5 -> "5R190" [style=solid]
- "5R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
-  6 [label="State 6\n\l  0 $accept: StartFile $end •\l"]
-  6 -> "6R0" [style=solid]
- "6R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
-  7 [label="State 7\n\l  1 StartFile: PackageClause SEMICOLON • ImportDeclStar TopLevelDeclStar\l"]
-  7 -> 8 [style=solid label="IMPORT"]
-  7 -> 9 [style=dashed label="ImportDeclStar"]
-  7 -> 10 [style=dashed label="ImportDecl"]
-  7 -> "7R194d" [label="[IMPORT]", style=solid]
- "7R194d" [label="R194", fillcolor=5, shape=diamond, style=filled]
-  7 -> "7R194" [style=solid]
- "7R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
-  8 [label="State 8\n\l195 ImportDecl: IMPORT • ImportSpec SEMICOLON\l196           | IMPORT • LPAREN ImportSpecStar RPAREN\l"]
-  8 -> 11 [style=solid label="STRING"]
-  8 -> 12 [style=solid label="LPAREN"]
-  8 -> 13 [style=solid label="PERIOD"]
-  8 -> 14 [style=dashed label="string_lit"]
-  8 -> 15 [style=dashed label="ImportSpec"]
-  8 -> 16 [style=dashed label="AlternatePackageName"]
-  9 [label="State 9\n\l  1 StartFile: PackageClause SEMICOLON ImportDeclStar • TopLevelDeclStar\l192 ImportDeclStar: ImportDeclStar • ImportDecl\l"]
-  9 -> 8 [style=solid label="IMPORT"]
-  9 -> 17 [style=solid label="FUNC"]
-  9 -> 18 [style=solid label="CONST"]
-  9 -> 19 [style=solid label="TYPE"]
-  9 -> 20 [style=solid label="VAR"]
-  9 -> 21 [style=dashed label="VarDecl"]
-  9 -> 22 [style=dashed label="Declaration"]
-  9 -> 23 [style=dashed label="FunctionDecl"]
-  9 -> 24 [style=dashed label="MethodDecl"]
-  9 -> 25 [style=dashed label="TopLevelDeclStar"]
-  9 -> 26 [style=dashed label="TopLevelDecl"]
-  9 -> 27 [style=dashed label="ConstDecl"]
-  9 -> 28 [style=dashed label="TypeDecl"]
-  9 -> 29 [style=dashed label="ImportDecl"]
-  10 [label="State 10\n\l193 ImportDeclStar: ImportDecl •\l"]
-  10 -> "10R193" [style=solid]
- "10R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
-  11 [label="State 11\n\l129 string_lit: STRING •\l"]
-  11 -> "11R129" [style=solid]
- "11R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
-  12 [label="State 12\n\l196 ImportDecl: IMPORT LPAREN • ImportSpecStar RPAREN\l"]
-  12 -> 11 [style=solid label="STRING"]
-  12 -> 13 [style=solid label="PERIOD"]
-  12 -> 14 [style=dashed label="string_lit"]
-  12 -> 30 [style=dashed label="ImportSpecStar"]
-  12 -> 31 [style=dashed label="ImportSpec"]
-  12 -> 16 [style=dashed label="AlternatePackageName"]
-  13 [label="State 13\n\l199 ImportSpec: PERIOD • ImportPath\l"]
-  13 -> 11 [style=solid label="STRING"]
-  13 -> 32 [style=dashed label="string_lit"]
-  13 -> 33 [style=dashed label="ImportPath"]
-  14 [label="State 14\n\l203 AlternatePackageName: string_lit •\l"]
-  14 -> "14R203" [style=solid]
- "14R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
-  15 [label="State 15\n\l195 ImportDecl: IMPORT ImportSpec • SEMICOLON\l"]
-  15 -> 34 [style=solid label="SEMICOLON"]
-  16 [label="State 16\n\l200 ImportSpec: AlternatePackageName • ImportPath\l201           | AlternatePackageName •\l"]
-  16 -> 11 [style=solid label="STRING"]
-  16 -> 32 [style=dashed label="string_lit"]
-  16 -> 35 [style=dashed label="ImportPath"]
-  16 -> "16R201" [style=solid]
- "16R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
-  17 [label="State 17\n\l 32 FunctionDecl: FUNC • IDENTIFIER OPENB Function CLOSEB\l 33             | FUNC • IDENTIFIER OPENB Signature CLOSEB\l 62 MethodDecl: FUNC • Receiver IDENTIFIER Function\l 63           | FUNC • Receiver IDENTIFIER Signature\l"]
-  17 -> 36 [style=solid label="IDENTIFIER"]
-  17 -> 37 [style=solid label="LPAREN"]
-  17 -> 38 [style=dashed label="Parameters"]
-  17 -> 39 [style=dashed label="Receiver"]
-  18 [label="State 18\n\l114 ConstDecl: CONST • ConstSpec\l"]
-  18 -> 40 [style=solid label="IDENTIFIER"]
-  18 -> 41 [style=dashed label="ConstSpec"]
-  19 [label="State 19\n\l119 TypeDecl: TYPE • TypeSpec\l120         | TYPE • LPAREN TypeSpecList RPAREN\l"]
-  19 -> 42 [style=solid label="IDENTIFIER"]
-  19 -> 43 [style=solid label="LPAREN"]
-  19 -> 44 [style=dashed label="TypeSpec"]
-  19 -> 45 [style=dashed label="AliasDecl"]
-  19 -> 46 [style=dashed label="TypeDef"]
-  20 [label="State 20\n\l 26 VarDecl: VAR • VarSpec\l"]
-  20 -> 47 [style=solid label="IDENTIFIER"]
-  20 -> 48 [style=dashed label="VarSpec"]
-  20 -> 49 [style=dashed label="IdentifierList"]
-  21 [label="State 21\n\l 31 Declaration: VarDecl •\l"]
-  21 -> "21R31" [style=solid]
- "21R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
-  22 [label="State 22\n\l 67 TopLevelDecl: Declaration •\l"]
-  22 -> "22R67" [style=solid]
- "22R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
-  23 [label="State 23\n\l 68 TopLevelDecl: FunctionDecl •\l"]
-  23 -> "23R68" [style=solid]
- "23R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
-  24 [label="State 24\n\l 69 TopLevelDecl: MethodDecl •\l"]
-  24 -> "24R69" [style=solid]
- "24R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
-  25 [label="State 25\n\l  1 StartFile: PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar •\l 65 TopLevelDeclStar: TopLevelDeclStar • SEMICOLON TopLevelDecl\l"]
-  25 -> 50 [style=solid label="SEMICOLON"]
-  25 -> "25R1" [style=solid]
- "25R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
-  26 [label="State 26\n\l 66 TopLevelDeclStar: TopLevelDecl •\l"]
-  26 -> "26R66" [style=solid]
- "26R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
-  27 [label="State 27\n\l 29 Declaration: ConstDecl •\l"]
-  27 -> "27R29" [style=solid]
- "27R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
-  28 [label="State 28\n\l 30 Declaration: TypeDecl •\l"]
-  28 -> "28R30" [style=solid]
- "28R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
-  29 [label="State 29\n\l192 ImportDeclStar: ImportDeclStar ImportDecl •\l"]
-  29 -> "29R192" [style=solid]
- "29R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
-  30 [label="State 30\n\l196 ImportDecl: IMPORT LPAREN ImportSpecStar • RPAREN\l197 ImportSpecStar: ImportSpecStar • ImportSpec SEMICOLON\l"]
-  30 -> 11 [style=solid label="STRING"]
-  30 -> 51 [style=solid label="RPAREN"]
-  30 -> 13 [style=solid label="PERIOD"]
-  30 -> 14 [style=dashed label="string_lit"]
-  30 -> 52 [style=dashed label="ImportSpec"]
-  30 -> 16 [style=dashed label="AlternatePackageName"]
-  31 [label="State 31\n\l198 ImportSpecStar: ImportSpec • SEMICOLON\l"]
-  31 -> 53 [style=solid label="SEMICOLON"]
-  32 [label="State 32\n\l202 ImportPath: string_lit •\l"]
-  32 -> "32R202" [style=solid]
- "32R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
-  33 [label="State 33\n\l199 ImportSpec: PERIOD ImportPath •\l"]
-  33 -> "33R199" [style=solid]
- "33R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
-  34 [label="State 34\n\l195 ImportDecl: IMPORT ImportSpec SEMICOLON •\l"]
-  34 -> "34R195" [style=solid]
- "34R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
-  35 [label="State 35\n\l200 ImportSpec: AlternatePackageName ImportPath •\l"]
-  35 -> "35R200" [style=solid]
- "35R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
-  36 [label="State 36\n\l 32 FunctionDecl: FUNC IDENTIFIER • OPENB Function CLOSEB\l 33             | FUNC IDENTIFIER • OPENB Signature CLOSEB\l"]
-  36 -> 54 [style=dashed label="OPENB"]
-  36 -> "36R3" [style=solid]
- "36R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  37 [label="State 37\n\l 48 Parameters: LPAREN • RPAREN\l 49           | LPAREN • ParameterDeclStar RPAREN\l 50           | LPAREN • ParameterDeclStar COMMA RPAREN\l"]
-  37 -> 47 [style=solid label="IDENTIFIER"]
-  37 -> 55 [style=solid label="ELLIPSIS"]
-  37 -> 56 [style=solid label="RPAREN"]
-  37 -> 57 [style=dashed label="ParameterDeclStar"]
-  37 -> 58 [style=dashed label="ParameterDecl"]
-  37 -> 59 [style=dashed label="IdentifierList"]
-  38 [label="State 38\n\l 64 Receiver: Parameters •\l"]
-  38 -> "38R64" [style=solid]
- "38R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
-  39 [label="State 39\n\l 62 MethodDecl: FUNC Receiver • IDENTIFIER Function\l 63           | FUNC Receiver • IDENTIFIER Signature\l"]
-  39 -> 60 [style=solid label="IDENTIFIER"]
-  40 [label="State 40\n\l115 ConstSpec: IDENTIFIER • Type ASSIGN Expression\l116          | IDENTIFIER • Type\l"]
-  40 -> 61 [style=solid label="FUNC"]
-  40 -> 62 [style=solid label="STRUCT"]
-  40 -> 63 [style=solid label="VAR_TYPE"]
-  40 -> 64 [style=solid label="IDENTIFIER"]
-  40 -> 65 [style=solid label="MUL"]
-  40 -> 66 [style=solid label="LBRACK"]
-  40 -> 67 [style=dashed label="TypeLit"]
-  40 -> 68 [style=dashed label="Type"]
-  40 -> 69 [style=dashed label="TypeName"]
-  40 -> 70 [style=dashed label="ArrayType"]
-  40 -> 71 [style=dashed label="StructType"]
-  40 -> 72 [style=dashed label="PointerType"]
-  40 -> 73 [style=dashed label="FunctionType"]
-  41 [label="State 41\n\l114 ConstDecl: CONST ConstSpec •\l"]
-  41 -> "41R114" [style=solid]
- "41R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
-  42 [label="State 42\n\l125 AliasDecl: IDENTIFIER • ASSIGN Type\l126 TypeDef: IDENTIFIER • Type\l"]
-  42 -> 61 [style=solid label="FUNC"]
-  42 -> 62 [style=solid label="STRUCT"]
-  42 -> 63 [style=solid label="VAR_TYPE"]
-  42 -> 64 [style=solid label="IDENTIFIER"]
-  42 -> 65 [style=solid label="MUL"]
-  42 -> 74 [style=solid label="ASSIGN"]
-  42 -> 66 [style=solid label="LBRACK"]
-  42 -> 67 [style=dashed label="TypeLit"]
-  42 -> 75 [style=dashed label="Type"]
-  42 -> 69 [style=dashed label="TypeName"]
-  42 -> 70 [style=dashed label="ArrayType"]
-  42 -> 71 [style=dashed label="StructType"]
-  42 -> 72 [style=dashed label="PointerType"]
-  42 -> 73 [style=dashed label="FunctionType"]
-  43 [label="State 43\n\l120 TypeDecl: TYPE LPAREN • TypeSpecList RPAREN\l"]
-  43 -> 42 [style=solid label="IDENTIFIER"]
-  43 -> 76 [style=dashed label="TypeSpecList"]
-  43 -> 77 [style=dashed label="TypeSpec"]
-  43 -> 45 [style=dashed label="AliasDecl"]
-  43 -> 46 [style=dashed label="TypeDef"]
-  44 [label="State 44\n\l119 TypeDecl: TYPE TypeSpec •\l"]
-  44 -> "44R119" [style=solid]
- "44R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
-  45 [label="State 45\n\l123 TypeSpec: AliasDecl •\l"]
-  45 -> "45R123" [style=solid]
- "45R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
-  46 [label="State 46\n\l124 TypeSpec: TypeDef •\l"]
-  46 -> "46R124" [style=solid]
- "46R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
-  47 [label="State 47\n\l 58 IdentifierList: IDENTIFIER • IdentifierLIST\l 59               | IDENTIFIER •\l"]
-  47 -> 78 [style=solid label="COMMA"]
-  47 -> 79 [style=dashed label="IdentifierLIST"]
-  47 -> "47R59" [style=solid]
- "47R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
-  48 [label="State 48\n\l 26 VarDecl: VAR VarSpec •\l"]
-  48 -> "48R26" [style=solid]
- "48R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
-  49 [label="State 49\n\l 27 VarSpec: IdentifierList • Type ASSIGN ExpressionList\l 28        | IdentifierList • Type\l"]
-  49 -> 61 [style=solid label="FUNC"]
-  49 -> 62 [style=solid label="STRUCT"]
-  49 -> 63 [style=solid label="VAR_TYPE"]
-  49 -> 64 [style=solid label="IDENTIFIER"]
-  49 -> 65 [style=solid label="MUL"]
-  49 -> 66 [style=solid label="LBRACK"]
-  49 -> 67 [style=dashed label="TypeLit"]
-  49 -> 80 [style=dashed label="Type"]
-  49 -> 69 [style=dashed label="TypeName"]
-  49 -> 70 [style=dashed label="ArrayType"]
-  49 -> 71 [style=dashed label="StructType"]
-  49 -> 72 [style=dashed label="PointerType"]
-  49 -> 73 [style=dashed label="FunctionType"]
-  50 [label="State 50\n\l 65 TopLevelDeclStar: TopLevelDeclStar SEMICOLON • TopLevelDecl\l"]
-  50 -> 17 [style=solid label="FUNC"]
-  50 -> 18 [style=solid label="CONST"]
-  50 -> 19 [style=solid label="TYPE"]
-  50 -> 20 [style=solid label="VAR"]
-  50 -> 21 [style=dashed label="VarDecl"]
-  50 -> 22 [style=dashed label="Declaration"]
-  50 -> 23 [style=dashed label="FunctionDecl"]
-  50 -> 24 [style=dashed label="MethodDecl"]
-  50 -> 81 [style=dashed label="TopLevelDecl"]
-  50 -> 27 [style=dashed label="ConstDecl"]
-  50 -> 28 [style=dashed label="TypeDecl"]
-  51 [label="State 51\n\l196 ImportDecl: IMPORT LPAREN ImportSpecStar RPAREN •\l"]
-  51 -> "51R196" [style=solid]
- "51R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
-  52 [label="State 52\n\l197 ImportSpecStar: ImportSpecStar ImportSpec • SEMICOLON\l"]
-  52 -> 82 [style=solid label="SEMICOLON"]
-  53 [label="State 53\n\l198 ImportSpecStar: ImportSpec SEMICOLON •\l"]
-  53 -> "53R198" [style=solid]
- "53R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
-  54 [label="State 54\n\l 32 FunctionDecl: FUNC IDENTIFIER OPENB • Function CLOSEB\l 33             | FUNC IDENTIFIER OPENB • Signature CLOSEB\l"]
-  54 -> 37 [style=solid label="LPAREN"]
-  54 -> 83 [style=dashed label="Function"]
-  54 -> 84 [style=dashed label="Signature"]
-  54 -> 85 [style=dashed label="Parameters"]
-  55 [label="State 55\n\l 55 ParameterDecl: ELLIPSIS • Type\l"]
-  55 -> 61 [style=solid label="FUNC"]
-  55 -> 62 [style=solid label="STRUCT"]
-  55 -> 63 [style=solid label="VAR_TYPE"]
-  55 -> 64 [style=solid label="IDENTIFIER"]
-  55 -> 65 [style=solid label="MUL"]
-  55 -> 66 [style=solid label="LBRACK"]
-  55 -> 67 [style=dashed label="TypeLit"]
-  55 -> 86 [style=dashed label="Type"]
-  55 -> 69 [style=dashed label="TypeName"]
-  55 -> 70 [style=dashed label="ArrayType"]
-  55 -> 71 [style=dashed label="StructType"]
-  55 -> 72 [style=dashed label="PointerType"]
-  55 -> 73 [style=dashed label="FunctionType"]
-  56 [label="State 56\n\l 48 Parameters: LPAREN RPAREN •\l"]
-  56 -> "56R48" [style=solid]
- "56R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
-  57 [label="State 57\n\l 49 Parameters: LPAREN ParameterDeclStar • RPAREN\l 50           | LPAREN ParameterDeclStar • COMMA RPAREN\l 52 ParameterDeclStar: ParameterDeclStar • COMMA ParameterDecl\l"]
-  57 -> 87 [style=solid label="RPAREN"]
-  57 -> 88 [style=solid label="COMMA"]
-  58 [label="State 58\n\l 51 ParameterDeclStar: ParameterDecl •\l"]
-  58 -> "58R51" [style=solid]
- "58R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
-  59 [label="State 59\n\l 53 ParameterDecl: IdentifierList • Type\l 54              | IdentifierList • ELLIPSIS Type\l"]
-  59 -> 61 [style=solid label="FUNC"]
-  59 -> 62 [style=solid label="STRUCT"]
-  59 -> 63 [style=solid label="VAR_TYPE"]
-  59 -> 64 [style=solid label="IDENTIFIER"]
-  59 -> 89 [style=solid label="ELLIPSIS"]
-  59 -> 65 [style=solid label="MUL"]
-  59 -> 66 [style=solid label="LBRACK"]
-  59 -> 67 [style=dashed label="TypeLit"]
-  59 -> 90 [style=dashed label="Type"]
-  59 -> 69 [style=dashed label="TypeName"]
-  59 -> 70 [style=dashed label="ArrayType"]
-  59 -> 71 [style=dashed label="StructType"]
-  59 -> 72 [style=dashed label="PointerType"]
-  59 -> 73 [style=dashed label="FunctionType"]
-  60 [label="State 60\n\l 62 MethodDecl: FUNC Receiver IDENTIFIER • Function\l 63           | FUNC Receiver IDENTIFIER • Signature\l"]
-  60 -> 37 [style=solid label="LPAREN"]
-  60 -> 91 [style=dashed label="Function"]
-  60 -> 92 [style=dashed label="Signature"]
-  60 -> 85 [style=dashed label="Parameters"]
-  61 [label="State 61\n\l113 FunctionType: FUNC • Signature\l"]
-  61 -> 37 [style=solid label="LPAREN"]
-  61 -> 93 [style=dashed label="Signature"]
-  61 -> 85 [style=dashed label="Parameters"]
-  62 [label="State 62\n\l104 StructType: STRUCT • LBRACE FieldDeclStar RBRACE\l105           | STRUCT • LBRACE RBRACE\l"]
-  62 -> 94 [style=solid label="LBRACE"]
-  63 [label="State 63\n\l101 TypeName: VAR_TYPE •\l"]
-  63 -> "63R101" [style=solid]
- "63R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
-  64 [label="State 64\n\l100 TypeName: IDENTIFIER •\l"]
-  64 -> "64R100" [style=solid]
- "64R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
-  65 [label="State 65\n\l111 PointerType: MUL • BaseType\l"]
-  65 -> 61 [style=solid label="FUNC"]
-  65 -> 62 [style=solid label="STRUCT"]
-  65 -> 63 [style=solid label="VAR_TYPE"]
-  65 -> 64 [style=solid label="IDENTIFIER"]
-  65 -> 65 [style=solid label="MUL"]
-  65 -> 66 [style=solid label="LBRACK"]
-  65 -> 67 [style=dashed label="TypeLit"]
-  65 -> 95 [style=dashed label="Type"]
-  65 -> 69 [style=dashed label="TypeName"]
-  65 -> 70 [style=dashed label="ArrayType"]
-  65 -> 71 [style=dashed label="StructType"]
-  65 -> 72 [style=dashed label="PointerType"]
-  65 -> 96 [style=dashed label="BaseType"]
-  65 -> 73 [style=dashed label="FunctionType"]
-  66 [label="State 66\n\l102 ArrayType: LBRACK • ArrayLength RBRACK Type\l"]
-  66 -> 97 [style=solid label="FUNC"]
-  66 -> 98 [style=solid label="IDENTIFIER"]
-  66 -> 99 [style=solid label="BYTE"]
-  66 -> 11 [style=solid label="STRING"]
-  66 -> 100 [style=solid label="INTEGER"]
-  66 -> 101 [style=solid label="FLOAT"]
-  66 -> 102 [style=solid label="ADD"]
-  66 -> 103 [style=solid label="SUB"]
-  66 -> 104 [style=solid label="MUL"]
-  66 -> 105 [style=solid label="AND"]
-  66 -> 106 [style=solid label="NOT"]
-  66 -> 107 [style=solid label="XOR"]
-  66 -> 108 [style=solid label="LPAREN"]
-  66 -> 109 [style=dashed label="Operand"]
-  66 -> 110 [style=dashed label="OperandName"]
-  66 -> 111 [style=dashed label="int_lit"]
-  66 -> 112 [style=dashed label="float_lit"]
-  66 -> 113 [style=dashed label="ArrayLength"]
-  66 -> 114 [style=dashed label="Literal"]
-  66 -> 115 [style=dashed label="string_lit"]
-  66 -> 116 [style=dashed label="byte_lit"]
-  66 -> 117 [style=dashed label="BasicLit"]
-  66 -> 118 [style=dashed label="FunctionLit"]
-  66 -> 119 [style=dashed label="PrimaryExpr"]
-  66 -> 120 [style=dashed label="Expression"]
-  66 -> 121 [style=dashed label="Expression1"]
-  66 -> 122 [style=dashed label="Expression2"]
-  66 -> 123 [style=dashed label="Expression3"]
-  66 -> 124 [style=dashed label="Expression4"]
-  66 -> 125 [style=dashed label="Expression5"]
-  66 -> 126 [style=dashed label="UnaryExpr"]
-  66 -> 127 [style=dashed label="unary_op"]
-  67 [label="State 67\n\l 75 Type: TypeLit •\l"]
-  67 -> "67R75" [style=solid]
- "67R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
-  68 [label="State 68\n\l115 ConstSpec: IDENTIFIER Type • ASSIGN Expression\l116          | IDENTIFIER Type •\l"]
-  68 -> 128 [style=solid label="ASSIGN"]
-  68 -> "68R116" [style=solid]
- "68R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
-  69 [label="State 69\n\l 74 Type: TypeName •\l"]
-  69 -> "69R74" [style=solid]
- "69R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
-  70 [label="State 70\n\l 70 TypeLit: ArrayType •\l"]
-  70 -> "70R70" [style=solid]
- "70R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
-  71 [label="State 71\n\l 71 TypeLit: StructType •\l"]
-  71 -> "71R71" [style=solid]
- "71R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
-  72 [label="State 72\n\l 72 TypeLit: PointerType •\l"]
-  72 -> "72R72" [style=solid]
- "72R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
-  73 [label="State 73\n\l 73 TypeLit: FunctionType •\l"]
-  73 -> "73R73" [style=solid]
- "73R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
-  74 [label="State 74\n\l125 AliasDecl: IDENTIFIER ASSIGN • Type\l"]
-  74 -> 61 [style=solid label="FUNC"]
-  74 -> 62 [style=solid label="STRUCT"]
-  74 -> 63 [style=solid label="VAR_TYPE"]
-  74 -> 64 [style=solid label="IDENTIFIER"]
-  74 -> 65 [style=solid label="MUL"]
-  74 -> 66 [style=solid label="LBRACK"]
-  74 -> 67 [style=dashed label="TypeLit"]
-  74 -> 129 [style=dashed label="Type"]
-  74 -> 69 [style=dashed label="TypeName"]
-  74 -> 70 [style=dashed label="ArrayType"]
-  74 -> 71 [style=dashed label="StructType"]
-  74 -> 72 [style=dashed label="PointerType"]
-  74 -> 73 [style=dashed label="FunctionType"]
-  75 [label="State 75\n\l126 TypeDef: IDENTIFIER Type •\l"]
-  75 -> "75R126" [style=solid]
- "75R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
-  76 [label="State 76\n\l120 TypeDecl: TYPE LPAREN TypeSpecList • RPAREN\l121 TypeSpecList: TypeSpecList • TypeSpec SEMICOLON\l"]
-  76 -> 42 [style=solid label="IDENTIFIER"]
-  76 -> 130 [style=solid label="RPAREN"]
-  76 -> 131 [style=dashed label="TypeSpec"]
-  76 -> 45 [style=dashed label="AliasDecl"]
-  76 -> 46 [style=dashed label="TypeDef"]
-  77 [label="State 77\n\l122 TypeSpecList: TypeSpec • SEMICOLON\l"]
-  77 -> 132 [style=solid label="SEMICOLON"]
-  78 [label="State 78\n\l 61 IdentifierLIST: COMMA • IDENTIFIER\l"]
-  78 -> 133 [style=solid label="IDENTIFIER"]
-  79 [label="State 79\n\l 58 IdentifierList: IDENTIFIER IdentifierLIST •\l 60 IdentifierLIST: IdentifierLIST • COMMA IDENTIFIER\l"]
-  79 -> 134 [style=solid label="COMMA"]
-  79 -> "79R58" [style=solid]
- "79R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
-  80 [label="State 80\n\l 27 VarSpec: IdentifierList Type • ASSIGN ExpressionList\l 28        | IdentifierList Type •\l"]
-  80 -> 135 [style=solid label="ASSIGN"]
-  80 -> "80R28" [style=solid]
- "80R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
-  81 [label="State 81\n\l 65 TopLevelDeclStar: TopLevelDeclStar SEMICOLON TopLevelDecl •\l"]
-  81 -> "81R65" [style=solid]
- "81R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
-  82 [label="State 82\n\l197 ImportSpecStar: ImportSpecStar ImportSpec SEMICOLON •\l"]
-  82 -> "82R197" [style=solid]
- "82R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
-  83 [label="State 83\n\l 32 FunctionDecl: FUNC IDENTIFIER OPENB Function • CLOSEB\l"]
-  83 -> 136 [style=dashed label="CLOSEB"]
-  83 -> "83R4" [style=solid]
- "83R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  84 [label="State 84\n\l 33 FunctionDecl: FUNC IDENTIFIER OPENB Signature • CLOSEB\l 34 Function: Signature • FunctionBody\l"]
-  84 -> 137 [style=solid label="LBRACE"]
-  84 -> 138 [style=dashed label="Block"]
-  84 -> 139 [style=dashed label="CLOSEB"]
-  84 -> 140 [style=dashed label="FunctionBody"]
-  84 -> "84R4" [style=solid]
- "84R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  85 [label="State 85\n\l 44 Signature: Parameters •\l 45          | Parameters • Result\l"]
-  85 -> 61 [style=solid label="FUNC"]
-  85 -> 62 [style=solid label="STRUCT"]
-  85 -> 63 [style=solid label="VAR_TYPE"]
-  85 -> 64 [style=solid label="IDENTIFIER"]
-  85 -> 65 [style=solid label="MUL"]
-  85 -> 141 [style=solid label="LPAREN"]
-  85 -> 66 [style=solid label="LBRACK"]
-  85 -> 142 [style=dashed label="Result"]
-  85 -> 67 [style=dashed label="TypeLit"]
-  85 -> 143 [style=dashed label="Type"]
-  85 -> 69 [style=dashed label="TypeName"]
-  85 -> 70 [style=dashed label="ArrayType"]
-  85 -> 71 [style=dashed label="StructType"]
-  85 -> 72 [style=dashed label="PointerType"]
-  85 -> 73 [style=dashed label="FunctionType"]
-  85 -> "85R44" [style=solid]
- "85R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
-  86 [label="State 86\n\l 55 ParameterDecl: ELLIPSIS Type •\l"]
-  86 -> "86R55" [style=solid]
- "86R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
-  87 [label="State 87\n\l 49 Parameters: LPAREN ParameterDeclStar RPAREN •\l"]
-  87 -> "87R49" [style=solid]
- "87R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
-  88 [label="State 88\n\l 50 Parameters: LPAREN ParameterDeclStar COMMA • RPAREN\l 52 ParameterDeclStar: ParameterDeclStar COMMA • ParameterDecl\l"]
-  88 -> 47 [style=solid label="IDENTIFIER"]
-  88 -> 55 [style=solid label="ELLIPSIS"]
-  88 -> 144 [style=solid label="RPAREN"]
-  88 -> 145 [style=dashed label="ParameterDecl"]
-  88 -> 59 [style=dashed label="IdentifierList"]
-  89 [label="State 89\n\l 54 ParameterDecl: IdentifierList ELLIPSIS • Type\l"]
-  89 -> 61 [style=solid label="FUNC"]
-  89 -> 62 [style=solid label="STRUCT"]
-  89 -> 63 [style=solid label="VAR_TYPE"]
-  89 -> 64 [style=solid label="IDENTIFIER"]
-  89 -> 65 [style=solid label="MUL"]
-  89 -> 66 [style=solid label="LBRACK"]
-  89 -> 67 [style=dashed label="TypeLit"]
-  89 -> 146 [style=dashed label="Type"]
-  89 -> 69 [style=dashed label="TypeName"]
-  89 -> 70 [style=dashed label="ArrayType"]
-  89 -> 71 [style=dashed label="StructType"]
-  89 -> 72 [style=dashed label="PointerType"]
-  89 -> 73 [style=dashed label="FunctionType"]
-  90 [label="State 90\n\l 53 ParameterDecl: IdentifierList Type •\l"]
-  90 -> "90R53" [style=solid]
- "90R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
-  91 [label="State 91\n\l 62 MethodDecl: FUNC Receiver IDENTIFIER Function •\l"]
-  91 -> "91R62" [style=solid]
- "91R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
-  92 [label="State 92\n\l 34 Function: Signature • FunctionBody\l 63 MethodDecl: FUNC Receiver IDENTIFIER Signature •\l"]
-  92 -> 137 [style=solid label="LBRACE"]
-  92 -> 138 [style=dashed label="Block"]
-  92 -> 140 [style=dashed label="FunctionBody"]
-  92 -> "92R63" [style=solid]
- "92R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
-  93 [label="State 93\n\l113 FunctionType: FUNC Signature •\l"]
-  93 -> "93R113" [style=solid]
- "93R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
-  94 [label="State 94\n\l104 StructType: STRUCT LBRACE • FieldDeclStar RBRACE\l105           | STRUCT LBRACE • RBRACE\l"]
-  94 -> 47 [style=solid label="IDENTIFIER"]
-  94 -> 147 [style=solid label="RBRACE"]
-  94 -> 148 [style=dashed label="IdentifierList"]
-  94 -> 149 [style=dashed label="FieldDeclStar"]
-  94 -> 150 [style=dashed label="FieldDecl"]
-  95 [label="State 95\n\l112 BaseType: Type •\l"]
-  95 -> "95R112" [style=solid]
- "95R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
-  96 [label="State 96\n\l111 PointerType: MUL BaseType •\l"]
-  96 -> "96R111" [style=solid]
- "96R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
-  97 [label="State 97\n\l135 FunctionLit: FUNC • Function\l"]
-  97 -> 37 [style=solid label="LPAREN"]
-  97 -> 151 [style=dashed label="Function"]
-  97 -> 152 [style=dashed label="Signature"]
-  97 -> 85 [style=dashed label="Parameters"]
-  98 [label="State 98\n\l 79 OperandName: IDENTIFIER •\l"]
-  98 -> "98R79" [style=solid]
- "98R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
-  99 [label="State 99\n\l130 byte_lit: BYTE •\l"]
-  99 -> "99R130" [style=solid]
- "99R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
-  100 [label="State 100\n\l 98 int_lit: INTEGER •\l"]
-  100 -> "100R98" [style=solid]
- "100R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
-  101 [label="State 101\n\l 99 float_lit: FLOAT •\l"]
-  101 -> "101R99" [style=solid]
- "101R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
-  102 [label="State 102\n\l178 unary_op: ADD •\l"]
-  102 -> "102R178" [style=solid]
- "102R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
-  103 [label="State 103\n\l179 unary_op: SUB •\l"]
-  103 -> "103R179" [style=solid]
- "103R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
-  104 [label="State 104\n\l182 unary_op: MUL •\l"]
-  104 -> "104R182" [style=solid]
- "104R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
-  105 [label="State 105\n\l183 unary_op: AND •\l"]
-  105 -> "105R183" [style=solid]
- "105R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
-  106 [label="State 106\n\l180 unary_op: NOT •\l"]
-  106 -> "106R180" [style=solid]
- "106R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
-  107 [label="State 107\n\l181 unary_op: XOR •\l"]
-  107 -> "107R181" [style=solid]
- "107R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
-  108 [label="State 108\n\l 78 Operand: LPAREN • Expression RPAREN\l"]
-  108 -> 97 [style=solid label="FUNC"]
-  108 -> 98 [style=solid label="IDENTIFIER"]
-  108 -> 99 [style=solid label="BYTE"]
-  108 -> 11 [style=solid label="STRING"]
-  108 -> 100 [style=solid label="INTEGER"]
-  108 -> 101 [style=solid label="FLOAT"]
-  108 -> 102 [style=solid label="ADD"]
-  108 -> 103 [style=solid label="SUB"]
-  108 -> 104 [style=solid label="MUL"]
-  108 -> 105 [style=solid label="AND"]
-  108 -> 106 [style=solid label="NOT"]
-  108 -> 107 [style=solid label="XOR"]
-  108 -> 108 [style=solid label="LPAREN"]
-  108 -> 109 [style=dashed label="Operand"]
-  108 -> 110 [style=dashed label="OperandName"]
-  108 -> 111 [style=dashed label="int_lit"]
-  108 -> 112 [style=dashed label="float_lit"]
-  108 -> 114 [style=dashed label="Literal"]
-  108 -> 115 [style=dashed label="string_lit"]
-  108 -> 116 [style=dashed label="byte_lit"]
-  108 -> 117 [style=dashed label="BasicLit"]
-  108 -> 118 [style=dashed label="FunctionLit"]
-  108 -> 119 [style=dashed label="PrimaryExpr"]
-  108 -> 153 [style=dashed label="Expression"]
-  108 -> 121 [style=dashed label="Expression1"]
-  108 -> 122 [style=dashed label="Expression2"]
-  108 -> 123 [style=dashed label="Expression3"]
-  108 -> 124 [style=dashed label="Expression4"]
-  108 -> 125 [style=dashed label="Expression5"]
-  108 -> 126 [style=dashed label="UnaryExpr"]
-  108 -> 127 [style=dashed label="unary_op"]
-  109 [label="State 109\n\l136 PrimaryExpr: Operand •\l"]
-  109 -> "109R136" [style=solid]
- "109R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
-  110 [label="State 110\n\l 77 Operand: OperandName •\l140 PrimaryExpr: OperandName • StructLiteral\l"]
-  110 -> 154 [style=solid label="LBRACE"]
-  110 -> 155 [style=dashed label="StructLiteral"]
-  110 -> "110R77d" [label="[LBRACE]", style=solid]
- "110R77d" [label="R77", fillcolor=5, shape=diamond, style=filled]
-  110 -> "110R77" [style=solid]
- "110R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
-  111 [label="State 111\n\l131 BasicLit: int_lit •\l"]
-  111 -> "111R131" [style=solid]
- "111R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
-  112 [label="State 112\n\l132 BasicLit: float_lit •\l"]
-  112 -> "112R132" [style=solid]
- "112R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
-  113 [label="State 113\n\l102 ArrayType: LBRACK ArrayLength • RBRACK Type\l"]
-  113 -> 156 [style=solid label="RBRACK"]
-  114 [label="State 114\n\l 76 Operand: Literal •\l"]
-  114 -> "114R76" [style=solid]
- "114R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
-  115 [label="State 115\n\l133 BasicLit: string_lit •\l"]
-  115 -> "115R133" [style=solid]
- "115R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
-  116 [label="State 116\n\l134 BasicLit: byte_lit •\l"]
-  116 -> "116R134" [style=solid]
- "116R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
-  117 [label="State 117\n\l127 Literal: BasicLit •\l"]
-  117 -> "117R127" [style=solid]
- "117R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
-  118 [label="State 118\n\l128 Literal: FunctionLit •\l"]
-  118 -> "118R128" [style=solid]
- "118R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
-  119 [label="State 119\n\l137 PrimaryExpr: PrimaryExpr • Selector\l138            | PrimaryExpr • Index\l139            | PrimaryExpr • TypeAssertion\l159 UnaryExpr: PrimaryExpr •\l"]
-  119 -> 157 [style=solid label="LBRACK"]
-  119 -> 158 [style=solid label="PERIOD"]
-  119 -> 159 [style=dashed label="Selector"]
-  119 -> 160 [style=dashed label="Index"]
-  119 -> 161 [style=dashed label="TypeAssertion"]
-  119 -> "119R159" [style=solid]
- "119R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
-  120 [label="State 120\n\l103 ArrayLength: Expression •\l"]
-  120 -> "120R103" [style=solid]
- "120R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
-  121 [label="State 121\n\l148 Expression: Expression1 •\l149 Expression1: Expression1 • LOR Expression2\l"]
-  121 -> 162 [style=solid label="LOR"]
-  121 -> "121R148" [style=solid]
- "121R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
-  122 [label="State 122\n\l150 Expression1: Expression2 •\l151 Expression2: Expression2 • LAND Expression3\l"]
-  122 -> 163 [style=solid label="LAND"]
-  122 -> "122R150" [style=solid]
- "122R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
-  123 [label="State 123\n\l152 Expression2: Expression3 •\l153 Expression3: Expression3 • rel_op Expression4\l"]
-  123 -> 164 [style=solid label="EQL"]
-  123 -> 165 [style=solid label="NEQ"]
-  123 -> 166 [style=solid label="LEQ"]
-  123 -> 167 [style=solid label="GEQ"]
-  123 -> 168 [style=solid label="GTR"]
-  123 -> 169 [style=solid label="LSS"]
-  123 -> 170 [style=dashed label="rel_op"]
-  123 -> "123R152" [style=solid]
- "123R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
-  124 [label="State 124\n\l154 Expression3: Expression4 •\l155 Expression4: Expression4 • add_op Expression5\l"]
-  124 -> 171 [style=solid label="ADD"]
-  124 -> 172 [style=solid label="SUB"]
-  124 -> 173 [style=solid label="OR"]
-  124 -> 174 [style=solid label="XOR"]
-  124 -> 175 [style=dashed label="add_op"]
-  124 -> "124R154" [style=solid]
- "124R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
-  125 [label="State 125\n\l156 Expression4: Expression5 •\l157 Expression5: Expression5 • mul_op PrimaryExpr\l"]
-  125 -> 176 [style=solid label="SHL"]
-  125 -> 177 [style=solid label="SHR"]
-  125 -> 178 [style=solid label="MUL"]
-  125 -> 179 [style=solid label="QUO"]
-  125 -> 180 [style=solid label="REM"]
-  125 -> 181 [style=solid label="AND"]
-  125 -> 182 [style=solid label="AND_NOT"]
-  125 -> 183 [style=dashed label="mul_op"]
-  125 -> "125R156" [style=solid]
- "125R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
-  126 [label="State 126\n\l158 Expression5: UnaryExpr •\l"]
-  126 -> "126R158" [style=solid]
- "126R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
-  127 [label="State 127\n\l160 UnaryExpr: unary_op • PrimaryExpr\l"]
-  127 -> 97 [style=solid label="FUNC"]
-  127 -> 98 [style=solid label="IDENTIFIER"]
-  127 -> 99 [style=solid label="BYTE"]
-  127 -> 11 [style=solid label="STRING"]
-  127 -> 100 [style=solid label="INTEGER"]
-  127 -> 101 [style=solid label="FLOAT"]
-  127 -> 108 [style=solid label="LPAREN"]
-  127 -> 109 [style=dashed label="Operand"]
-  127 -> 110 [style=dashed label="OperandName"]
-  127 -> 111 [style=dashed label="int_lit"]
-  127 -> 112 [style=dashed label="float_lit"]
-  127 -> 114 [style=dashed label="Literal"]
-  127 -> 115 [style=dashed label="string_lit"]
-  127 -> 116 [style=dashed label="byte_lit"]
-  127 -> 117 [style=dashed label="BasicLit"]
-  127 -> 118 [style=dashed label="FunctionLit"]
-  127 -> 184 [style=dashed label="PrimaryExpr"]
-  128 [label="State 128\n\l115 ConstSpec: IDENTIFIER Type ASSIGN • Expression\l"]
-  128 -> 97 [style=solid label="FUNC"]
-  128 -> 98 [style=solid label="IDENTIFIER"]
-  128 -> 99 [style=solid label="BYTE"]
-  128 -> 11 [style=solid label="STRING"]
-  128 -> 100 [style=solid label="INTEGER"]
-  128 -> 101 [style=solid label="FLOAT"]
-  128 -> 102 [style=solid label="ADD"]
-  128 -> 103 [style=solid label="SUB"]
-  128 -> 104 [style=solid label="MUL"]
-  128 -> 105 [style=solid label="AND"]
-  128 -> 106 [style=solid label="NOT"]
-  128 -> 107 [style=solid label="XOR"]
-  128 -> 108 [style=solid label="LPAREN"]
-  128 -> 109 [style=dashed label="Operand"]
-  128 -> 110 [style=dashed label="OperandName"]
-  128 -> 111 [style=dashed label="int_lit"]
-  128 -> 112 [style=dashed label="float_lit"]
-  128 -> 114 [style=dashed label="Literal"]
-  128 -> 115 [style=dashed label="string_lit"]
-  128 -> 116 [style=dashed label="byte_lit"]
-  128 -> 117 [style=dashed label="BasicLit"]
-  128 -> 118 [style=dashed label="FunctionLit"]
-  128 -> 119 [style=dashed label="PrimaryExpr"]
-  128 -> 185 [style=dashed label="Expression"]
-  128 -> 121 [style=dashed label="Expression1"]
-  128 -> 122 [style=dashed label="Expression2"]
-  128 -> 123 [style=dashed label="Expression3"]
-  128 -> 124 [style=dashed label="Expression4"]
-  128 -> 125 [style=dashed label="Expression5"]
-  128 -> 126 [style=dashed label="UnaryExpr"]
-  128 -> 127 [style=dashed label="unary_op"]
-  129 [label="State 129\n\l125 AliasDecl: IDENTIFIER ASSIGN Type •\l"]
-  129 -> "129R125" [style=solid]
- "129R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
-  130 [label="State 130\n\l120 TypeDecl: TYPE LPAREN TypeSpecList RPAREN •\l"]
-  130 -> "130R120" [style=solid]
- "130R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
-  131 [label="State 131\n\l121 TypeSpecList: TypeSpecList TypeSpec • SEMICOLON\l"]
-  131 -> 186 [style=solid label="SEMICOLON"]
-  132 [label="State 132\n\l122 TypeSpecList: TypeSpec SEMICOLON •\l"]
-  132 -> "132R122" [style=solid]
- "132R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
-  133 [label="State 133\n\l 61 IdentifierLIST: COMMA IDENTIFIER •\l"]
-  133 -> "133R61" [style=solid]
- "133R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
-  134 [label="State 134\n\l 60 IdentifierLIST: IdentifierLIST COMMA • IDENTIFIER\l"]
-  134 -> 187 [style=solid label="IDENTIFIER"]
-  135 [label="State 135\n\l 27 VarSpec: IdentifierList Type ASSIGN • ExpressionList\l"]
-  135 -> 97 [style=solid label="FUNC"]
-  135 -> 98 [style=solid label="IDENTIFIER"]
-  135 -> 99 [style=solid label="BYTE"]
-  135 -> 11 [style=solid label="STRING"]
-  135 -> 100 [style=solid label="INTEGER"]
-  135 -> 101 [style=solid label="FLOAT"]
-  135 -> 102 [style=solid label="ADD"]
-  135 -> 103 [style=solid label="SUB"]
-  135 -> 104 [style=solid label="MUL"]
-  135 -> 105 [style=solid label="AND"]
-  135 -> 106 [style=solid label="NOT"]
-  135 -> 107 [style=solid label="XOR"]
-  135 -> 108 [style=solid label="LPAREN"]
-  135 -> 109 [style=dashed label="Operand"]
-  135 -> 110 [style=dashed label="OperandName"]
-  135 -> 111 [style=dashed label="int_lit"]
-  135 -> 112 [style=dashed label="float_lit"]
-  135 -> 188 [style=dashed label="ExpressionList"]
-  135 -> 114 [style=dashed label="Literal"]
-  135 -> 115 [style=dashed label="string_lit"]
-  135 -> 116 [style=dashed label="byte_lit"]
-  135 -> 117 [style=dashed label="BasicLit"]
-  135 -> 118 [style=dashed label="FunctionLit"]
-  135 -> 119 [style=dashed label="PrimaryExpr"]
-  135 -> 189 [style=dashed label="Expression"]
-  135 -> 121 [style=dashed label="Expression1"]
-  135 -> 122 [style=dashed label="Expression2"]
-  135 -> 123 [style=dashed label="Expression3"]
-  135 -> 124 [style=dashed label="Expression4"]
-  135 -> 125 [style=dashed label="Expression5"]
-  135 -> 126 [style=dashed label="UnaryExpr"]
-  135 -> 127 [style=dashed label="unary_op"]
-  136 [label="State 136\n\l 32 FunctionDecl: FUNC IDENTIFIER OPENB Function CLOSEB •\l"]
-  136 -> "136R32" [style=solid]
- "136R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
-  137 [label="State 137\n\l  2 Block: LBRACE • OPENB StatementList CLOSEB RBRACE\l"]
-  137 -> 190 [style=dashed label="OPENB"]
-  137 -> "137R3" [style=solid]
- "137R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  138 [label="State 138\n\l 35 FunctionBody: Block •\l"]
-  138 -> "138R35" [style=solid]
- "138R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
-  139 [label="State 139\n\l 33 FunctionDecl: FUNC IDENTIFIER OPENB Signature CLOSEB •\l"]
-  139 -> "139R33" [style=solid]
- "139R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
-  140 [label="State 140\n\l 34 Function: Signature FunctionBody •\l"]
-  140 -> "140R34" [style=solid]
- "140R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
-  141 [label="State 141\n\l 46 Result: LPAREN • TypeList RPAREN\l"]
-  141 -> 61 [style=solid label="FUNC"]
-  141 -> 62 [style=solid label="STRUCT"]
-  141 -> 63 [style=solid label="VAR_TYPE"]
-  141 -> 64 [style=solid label="IDENTIFIER"]
-  141 -> 65 [style=solid label="MUL"]
-  141 -> 66 [style=solid label="LBRACK"]
-  141 -> 191 [style=dashed label="TypeList"]
-  141 -> 67 [style=dashed label="TypeLit"]
-  141 -> 192 [style=dashed label="Type"]
-  141 -> 69 [style=dashed label="TypeName"]
-  141 -> 70 [style=dashed label="ArrayType"]
-  141 -> 71 [style=dashed label="StructType"]
-  141 -> 72 [style=dashed label="PointerType"]
-  141 -> 73 [style=dashed label="FunctionType"]
-  142 [label="State 142\n\l 45 Signature: Parameters Result •\l"]
-  142 -> "142R45" [style=solid]
- "142R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
-  143 [label="State 143\n\l 47 Result: Type •\l"]
-  143 -> "143R47" [style=solid]
- "143R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
-  144 [label="State 144\n\l 50 Parameters: LPAREN ParameterDeclStar COMMA RPAREN •\l"]
-  144 -> "144R50" [style=solid]
- "144R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
-  145 [label="State 145\n\l 52 ParameterDeclStar: ParameterDeclStar COMMA ParameterDecl •\l"]
-  145 -> "145R52" [style=solid]
- "145R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
-  146 [label="State 146\n\l 54 ParameterDecl: IdentifierList ELLIPSIS Type •\l"]
-  146 -> "146R54" [style=solid]
- "146R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
-  147 [label="State 147\n\l105 StructType: STRUCT LBRACE RBRACE •\l"]
-  147 -> "147R105" [style=solid]
- "147R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
-  148 [label="State 148\n\l108 FieldDecl: IdentifierList • Type\l109          | IdentifierList • Type Tag\l"]
-  148 -> 61 [style=solid label="FUNC"]
-  148 -> 62 [style=solid label="STRUCT"]
-  148 -> 63 [style=solid label="VAR_TYPE"]
-  148 -> 64 [style=solid label="IDENTIFIER"]
-  148 -> 65 [style=solid label="MUL"]
-  148 -> 66 [style=solid label="LBRACK"]
-  148 -> 67 [style=dashed label="TypeLit"]
-  148 -> 193 [style=dashed label="Type"]
-  148 -> 69 [style=dashed label="TypeName"]
-  148 -> 70 [style=dashed label="ArrayType"]
-  148 -> 71 [style=dashed label="StructType"]
-  148 -> 72 [style=dashed label="PointerType"]
-  148 -> 73 [style=dashed label="FunctionType"]
-  149 [label="State 149\n\l104 StructType: STRUCT LBRACE FieldDeclStar • RBRACE\l107 FieldDeclStar: FieldDeclStar • FieldDecl SEMICOLON\l"]
-  149 -> 47 [style=solid label="IDENTIFIER"]
-  149 -> 194 [style=solid label="RBRACE"]
-  149 -> 148 [style=dashed label="IdentifierList"]
-  149 -> 195 [style=dashed label="FieldDecl"]
-  150 [label="State 150\n\l106 FieldDeclStar: FieldDecl • SEMICOLON\l"]
-  150 -> 196 [style=solid label="SEMICOLON"]
-  151 [label="State 151\n\l135 FunctionLit: FUNC Function •\l"]
-  151 -> "151R135" [style=solid]
- "151R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
-  152 [label="State 152\n\l 34 Function: Signature • FunctionBody\l"]
-  152 -> 137 [style=solid label="LBRACE"]
-  152 -> 138 [style=dashed label="Block"]
-  152 -> 140 [style=dashed label="FunctionBody"]
-  153 [label="State 153\n\l 78 Operand: LPAREN Expression • RPAREN\l"]
-  153 -> 197 [style=solid label="RPAREN"]
-  154 [label="State 154\n\l141 StructLiteral: LBRACE • KeyValList RBRACE\l"]
-  154 -> 97 [style=solid label="FUNC"]
-  154 -> 98 [style=solid label="IDENTIFIER"]
-  154 -> 99 [style=solid label="BYTE"]
-  154 -> 11 [style=solid label="STRING"]
-  154 -> 100 [style=solid label="INTEGER"]
-  154 -> 101 [style=solid label="FLOAT"]
-  154 -> 102 [style=solid label="ADD"]
-  154 -> 103 [style=solid label="SUB"]
-  154 -> 104 [style=solid label="MUL"]
-  154 -> 105 [style=solid label="AND"]
-  154 -> 106 [style=solid label="NOT"]
-  154 -> 107 [style=solid label="XOR"]
-  154 -> 108 [style=solid label="LPAREN"]
-  154 -> 109 [style=dashed label="Operand"]
-  154 -> 110 [style=dashed label="OperandName"]
-  154 -> 111 [style=dashed label="int_lit"]
-  154 -> 112 [style=dashed label="float_lit"]
-  154 -> 114 [style=dashed label="Literal"]
-  154 -> 115 [style=dashed label="string_lit"]
-  154 -> 116 [style=dashed label="byte_lit"]
-  154 -> 117 [style=dashed label="BasicLit"]
-  154 -> 118 [style=dashed label="FunctionLit"]
-  154 -> 119 [style=dashed label="PrimaryExpr"]
-  154 -> 198 [style=dashed label="KeyValList"]
-  154 -> 199 [style=dashed label="Expression"]
-  154 -> 121 [style=dashed label="Expression1"]
-  154 -> 122 [style=dashed label="Expression2"]
-  154 -> 123 [style=dashed label="Expression3"]
-  154 -> 124 [style=dashed label="Expression4"]
-  154 -> 125 [style=dashed label="Expression5"]
-  154 -> 126 [style=dashed label="UnaryExpr"]
-  154 -> 127 [style=dashed label="unary_op"]
-  154 -> "154R142" [style=solid]
- "154R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
-  155 [label="State 155\n\l140 PrimaryExpr: OperandName StructLiteral •\l"]
-  155 -> "155R140" [style=solid]
- "155R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
-  156 [label="State 156\n\l102 ArrayType: LBRACK ArrayLength RBRACK • Type\l"]
-  156 -> 61 [style=solid label="FUNC"]
-  156 -> 62 [style=solid label="STRUCT"]
-  156 -> 63 [style=solid label="VAR_TYPE"]
-  156 -> 64 [style=solid label="IDENTIFIER"]
-  156 -> 65 [style=solid label="MUL"]
-  156 -> 66 [style=solid label="LBRACK"]
-  156 -> 67 [style=dashed label="TypeLit"]
-  156 -> 200 [style=dashed label="Type"]
-  156 -> 69 [style=dashed label="TypeName"]
-  156 -> 70 [style=dashed label="ArrayType"]
-  156 -> 71 [style=dashed label="StructType"]
-  156 -> 72 [style=dashed label="PointerType"]
-  156 -> 73 [style=dashed label="FunctionType"]
-  157 [label="State 157\n\l146 Index: LBRACK • Expression RBRACK\l"]
-  157 -> 97 [style=solid label="FUNC"]
-  157 -> 98 [style=solid label="IDENTIFIER"]
-  157 -> 99 [style=solid label="BYTE"]
-  157 -> 11 [style=solid label="STRING"]
-  157 -> 100 [style=solid label="INTEGER"]
-  157 -> 101 [style=solid label="FLOAT"]
-  157 -> 102 [style=solid label="ADD"]
-  157 -> 103 [style=solid label="SUB"]
-  157 -> 104 [style=solid label="MUL"]
-  157 -> 105 [style=solid label="AND"]
-  157 -> 106 [style=solid label="NOT"]
-  157 -> 107 [style=solid label="XOR"]
-  157 -> 108 [style=solid label="LPAREN"]
-  157 -> 109 [style=dashed label="Operand"]
-  157 -> 110 [style=dashed label="OperandName"]
-  157 -> 111 [style=dashed label="int_lit"]
-  157 -> 112 [style=dashed label="float_lit"]
-  157 -> 114 [style=dashed label="Literal"]
-  157 -> 115 [style=dashed label="string_lit"]
-  157 -> 116 [style=dashed label="byte_lit"]
-  157 -> 117 [style=dashed label="BasicLit"]
-  157 -> 118 [style=dashed label="FunctionLit"]
-  157 -> 119 [style=dashed label="PrimaryExpr"]
-  157 -> 201 [style=dashed label="Expression"]
-  157 -> 121 [style=dashed label="Expression1"]
-  157 -> 122 [style=dashed label="Expression2"]
-  157 -> 123 [style=dashed label="Expression3"]
-  157 -> 124 [style=dashed label="Expression4"]
-  157 -> 125 [style=dashed label="Expression5"]
-  157 -> 126 [style=dashed label="UnaryExpr"]
-  157 -> 127 [style=dashed label="unary_op"]
-  158 [label="State 158\n\l145 Selector: PERIOD • IDENTIFIER\l147 TypeAssertion: PERIOD • LPAREN Type RPAREN\l"]
-  158 -> 202 [style=solid label="IDENTIFIER"]
-  158 -> 203 [style=solid label="LPAREN"]
-  159 [label="State 159\n\l137 PrimaryExpr: PrimaryExpr Selector •\l"]
-  159 -> "159R137" [style=solid]
- "159R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
-  160 [label="State 160\n\l138 PrimaryExpr: PrimaryExpr Index •\l"]
-  160 -> "160R138" [style=solid]
- "160R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
-  161 [label="State 161\n\l139 PrimaryExpr: PrimaryExpr TypeAssertion •\l"]
-  161 -> "161R139" [style=solid]
- "161R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
-  162 [label="State 162\n\l149 Expression1: Expression1 LOR • Expression2\l"]
-  162 -> 97 [style=solid label="FUNC"]
-  162 -> 98 [style=solid label="IDENTIFIER"]
-  162 -> 99 [style=solid label="BYTE"]
-  162 -> 11 [style=solid label="STRING"]
-  162 -> 100 [style=solid label="INTEGER"]
-  162 -> 101 [style=solid label="FLOAT"]
-  162 -> 102 [style=solid label="ADD"]
-  162 -> 103 [style=solid label="SUB"]
-  162 -> 104 [style=solid label="MUL"]
-  162 -> 105 [style=solid label="AND"]
-  162 -> 106 [style=solid label="NOT"]
-  162 -> 107 [style=solid label="XOR"]
-  162 -> 108 [style=solid label="LPAREN"]
-  162 -> 109 [style=dashed label="Operand"]
-  162 -> 110 [style=dashed label="OperandName"]
-  162 -> 111 [style=dashed label="int_lit"]
-  162 -> 112 [style=dashed label="float_lit"]
-  162 -> 114 [style=dashed label="Literal"]
-  162 -> 115 [style=dashed label="string_lit"]
-  162 -> 116 [style=dashed label="byte_lit"]
-  162 -> 117 [style=dashed label="BasicLit"]
-  162 -> 118 [style=dashed label="FunctionLit"]
-  162 -> 119 [style=dashed label="PrimaryExpr"]
-  162 -> 204 [style=dashed label="Expression2"]
-  162 -> 123 [style=dashed label="Expression3"]
-  162 -> 124 [style=dashed label="Expression4"]
-  162 -> 125 [style=dashed label="Expression5"]
-  162 -> 126 [style=dashed label="UnaryExpr"]
-  162 -> 127 [style=dashed label="unary_op"]
-  163 [label="State 163\n\l151 Expression2: Expression2 LAND • Expression3\l"]
-  163 -> 97 [style=solid label="FUNC"]
-  163 -> 98 [style=solid label="IDENTIFIER"]
-  163 -> 99 [style=solid label="BYTE"]
-  163 -> 11 [style=solid label="STRING"]
-  163 -> 100 [style=solid label="INTEGER"]
-  163 -> 101 [style=solid label="FLOAT"]
-  163 -> 102 [style=solid label="ADD"]
-  163 -> 103 [style=solid label="SUB"]
-  163 -> 104 [style=solid label="MUL"]
-  163 -> 105 [style=solid label="AND"]
-  163 -> 106 [style=solid label="NOT"]
-  163 -> 107 [style=solid label="XOR"]
-  163 -> 108 [style=solid label="LPAREN"]
-  163 -> 109 [style=dashed label="Operand"]
-  163 -> 110 [style=dashed label="OperandName"]
-  163 -> 111 [style=dashed label="int_lit"]
-  163 -> 112 [style=dashed label="float_lit"]
-  163 -> 114 [style=dashed label="Literal"]
-  163 -> 115 [style=dashed label="string_lit"]
-  163 -> 116 [style=dashed label="byte_lit"]
-  163 -> 117 [style=dashed label="BasicLit"]
-  163 -> 118 [style=dashed label="FunctionLit"]
-  163 -> 119 [style=dashed label="PrimaryExpr"]
-  163 -> 205 [style=dashed label="Expression3"]
-  163 -> 124 [style=dashed label="Expression4"]
-  163 -> 125 [style=dashed label="Expression5"]
-  163 -> 126 [style=dashed label="UnaryExpr"]
-  163 -> 127 [style=dashed label="unary_op"]
-  164 [label="State 164\n\l161 rel_op: EQL •\l"]
-  164 -> "164R161" [style=solid]
- "164R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
-  165 [label="State 165\n\l162 rel_op: NEQ •\l"]
-  165 -> "165R162" [style=solid]
- "165R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
-  166 [label="State 166\n\l164 rel_op: LEQ •\l"]
-  166 -> "166R164" [style=solid]
- "166R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
-  167 [label="State 167\n\l166 rel_op: GEQ •\l"]
-  167 -> "167R166" [style=solid]
- "167R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
-  168 [label="State 168\n\l165 rel_op: GTR •\l"]
-  168 -> "168R165" [style=solid]
- "168R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
-  169 [label="State 169\n\l163 rel_op: LSS •\l"]
-  169 -> "169R163" [style=solid]
- "169R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
-  170 [label="State 170\n\l153 Expression3: Expression3 rel_op • Expression4\l"]
-  170 -> 97 [style=solid label="FUNC"]
-  170 -> 98 [style=solid label="IDENTIFIER"]
-  170 -> 99 [style=solid label="BYTE"]
-  170 -> 11 [style=solid label="STRING"]
-  170 -> 100 [style=solid label="INTEGER"]
-  170 -> 101 [style=solid label="FLOAT"]
-  170 -> 102 [style=solid label="ADD"]
-  170 -> 103 [style=solid label="SUB"]
-  170 -> 104 [style=solid label="MUL"]
-  170 -> 105 [style=solid label="AND"]
-  170 -> 106 [style=solid label="NOT"]
-  170 -> 107 [style=solid label="XOR"]
-  170 -> 108 [style=solid label="LPAREN"]
-  170 -> 109 [style=dashed label="Operand"]
-  170 -> 110 [style=dashed label="OperandName"]
-  170 -> 111 [style=dashed label="int_lit"]
-  170 -> 112 [style=dashed label="float_lit"]
-  170 -> 114 [style=dashed label="Literal"]
-  170 -> 115 [style=dashed label="string_lit"]
-  170 -> 116 [style=dashed label="byte_lit"]
-  170 -> 117 [style=dashed label="BasicLit"]
-  170 -> 118 [style=dashed label="FunctionLit"]
-  170 -> 119 [style=dashed label="PrimaryExpr"]
-  170 -> 206 [style=dashed label="Expression4"]
-  170 -> 125 [style=dashed label="Expression5"]
-  170 -> 126 [style=dashed label="UnaryExpr"]
-  170 -> 127 [style=dashed label="unary_op"]
-  171 [label="State 171\n\l167 add_op: ADD •\l"]
-  171 -> "171R167" [style=solid]
- "171R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
-  172 [label="State 172\n\l168 add_op: SUB •\l"]
-  172 -> "172R168" [style=solid]
- "172R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
-  173 [label="State 173\n\l169 add_op: OR •\l"]
-  173 -> "173R169" [style=solid]
- "173R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
-  174 [label="State 174\n\l170 add_op: XOR •\l"]
-  174 -> "174R170" [style=solid]
- "174R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
-  175 [label="State 175\n\l155 Expression4: Expression4 add_op • Expression5\l"]
-  175 -> 97 [style=solid label="FUNC"]
-  175 -> 98 [style=solid label="IDENTIFIER"]
-  175 -> 99 [style=solid label="BYTE"]
-  175 -> 11 [style=solid label="STRING"]
-  175 -> 100 [style=solid label="INTEGER"]
-  175 -> 101 [style=solid label="FLOAT"]
-  175 -> 102 [style=solid label="ADD"]
-  175 -> 103 [style=solid label="SUB"]
-  175 -> 104 [style=solid label="MUL"]
-  175 -> 105 [style=solid label="AND"]
-  175 -> 106 [style=solid label="NOT"]
-  175 -> 107 [style=solid label="XOR"]
-  175 -> 108 [style=solid label="LPAREN"]
-  175 -> 109 [style=dashed label="Operand"]
-  175 -> 110 [style=dashed label="OperandName"]
-  175 -> 111 [style=dashed label="int_lit"]
-  175 -> 112 [style=dashed label="float_lit"]
-  175 -> 114 [style=dashed label="Literal"]
-  175 -> 115 [style=dashed label="string_lit"]
-  175 -> 116 [style=dashed label="byte_lit"]
-  175 -> 117 [style=dashed label="BasicLit"]
-  175 -> 118 [style=dashed label="FunctionLit"]
-  175 -> 119 [style=dashed label="PrimaryExpr"]
-  175 -> 207 [style=dashed label="Expression5"]
-  175 -> 126 [style=dashed label="UnaryExpr"]
-  175 -> 127 [style=dashed label="unary_op"]
-  176 [label="State 176\n\l174 mul_op: SHL •\l"]
-  176 -> "176R174" [style=solid]
- "176R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
-  177 [label="State 177\n\l175 mul_op: SHR •\l"]
-  177 -> "177R175" [style=solid]
- "177R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
-  178 [label="State 178\n\l171 mul_op: MUL •\l"]
-  178 -> "178R171" [style=solid]
- "178R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
-  179 [label="State 179\n\l172 mul_op: QUO •\l"]
-  179 -> "179R172" [style=solid]
- "179R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
-  180 [label="State 180\n\l173 mul_op: REM •\l"]
-  180 -> "180R173" [style=solid]
- "180R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
-  181 [label="State 181\n\l176 mul_op: AND •\l"]
-  181 -> "181R176" [style=solid]
- "181R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
-  182 [label="State 182\n\l177 mul_op: AND_NOT •\l"]
-  182 -> "182R177" [style=solid]
- "182R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
-  183 [label="State 183\n\l157 Expression5: Expression5 mul_op • PrimaryExpr\l"]
-  183 -> 97 [style=solid label="FUNC"]
-  183 -> 98 [style=solid label="IDENTIFIER"]
-  183 -> 99 [style=solid label="BYTE"]
-  183 -> 11 [style=solid label="STRING"]
-  183 -> 100 [style=solid label="INTEGER"]
-  183 -> 101 [style=solid label="FLOAT"]
-  183 -> 108 [style=solid label="LPAREN"]
-  183 -> 109 [style=dashed label="Operand"]
-  183 -> 110 [style=dashed label="OperandName"]
-  183 -> 111 [style=dashed label="int_lit"]
-  183 -> 112 [style=dashed label="float_lit"]
-  183 -> 114 [style=dashed label="Literal"]
-  183 -> 115 [style=dashed label="string_lit"]
-  183 -> 116 [style=dashed label="byte_lit"]
-  183 -> 117 [style=dashed label="BasicLit"]
-  183 -> 118 [style=dashed label="FunctionLit"]
-  183 -> 208 [style=dashed label="PrimaryExpr"]
-  184 [label="State 184\n\l137 PrimaryExpr: PrimaryExpr • Selector\l138            | PrimaryExpr • Index\l139            | PrimaryExpr • TypeAssertion\l160 UnaryExpr: unary_op PrimaryExpr •\l"]
-  184 -> 157 [style=solid label="LBRACK"]
-  184 -> 158 [style=solid label="PERIOD"]
-  184 -> 159 [style=dashed label="Selector"]
-  184 -> 160 [style=dashed label="Index"]
-  184 -> 161 [style=dashed label="TypeAssertion"]
-  184 -> "184R160" [style=solid]
- "184R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
-  185 [label="State 185\n\l115 ConstSpec: IDENTIFIER Type ASSIGN Expression •\l"]
-  185 -> "185R115" [style=solid]
- "185R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
-  186 [label="State 186\n\l121 TypeSpecList: TypeSpecList TypeSpec SEMICOLON •\l"]
-  186 -> "186R121" [style=solid]
- "186R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
-  187 [label="State 187\n\l 60 IdentifierLIST: IdentifierLIST COMMA IDENTIFIER •\l"]
-  187 -> "187R60" [style=solid]
- "187R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
-  188 [label="State 188\n\l 27 VarSpec: IdentifierList Type ASSIGN ExpressionList •\l117 ExpressionList: ExpressionList • COMMA Expression\l"]
-  188 -> 209 [style=solid label="COMMA"]
-  188 -> "188R27" [style=solid]
- "188R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
-  189 [label="State 189\n\l118 ExpressionList: Expression •\l"]
-  189 -> "189R118" [style=solid]
- "189R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  190 [label="State 190\n\l  2 Block: LBRACE OPENB • StatementList CLOSEB RBRACE\l"]
-  190 -> 97 [style=solid label="FUNC"]
-  190 -> 210 [style=solid label="BREAK"]
-  190 -> 18 [style=solid label="CONST"]
-  190 -> 211 [style=solid label="CONTINUE"]
-  190 -> 212 [style=solid label="FOR"]
-  190 -> 213 [style=solid label="IF"]
-  190 -> 214 [style=solid label="RETURN"]
-  190 -> 19 [style=solid label="TYPE"]
-  190 -> 20 [style=solid label="VAR"]
-  190 -> 215 [style=solid label="IDENTIFIER"]
-  190 -> 99 [style=solid label="BYTE"]
-  190 -> 11 [style=solid label="STRING"]
-  190 -> 100 [style=solid label="INTEGER"]
-  190 -> 101 [style=solid label="FLOAT"]
-  190 -> 102 [style=solid label="ADD"]
-  190 -> 103 [style=solid label="SUB"]
-  190 -> 104 [style=solid label="MUL"]
-  190 -> 105 [style=solid label="AND"]
-  190 -> 106 [style=solid label="NOT"]
-  190 -> 107 [style=solid label="XOR"]
-  190 -> 108 [style=solid label="LPAREN"]
-  190 -> 137 [style=solid label="LBRACE"]
-  190 -> 216 [style=dashed label="Block"]
-  190 -> 217 [style=dashed label="StatementList"]
-  190 -> 218 [style=dashed label="Statement"]
-  190 -> 219 [style=dashed label="SimpleStmt"]
-  190 -> 220 [style=dashed label="EmptyStmt"]
-  190 -> 221 [style=dashed label="LabeledStmt"]
-  190 -> 222 [style=dashed label="IncDecStmt"]
-  190 -> 223 [style=dashed label="Assignment"]
-  190 -> 224 [style=dashed label="VarDecl"]
-  190 -> 225 [style=dashed label="Declaration"]
-  190 -> 226 [style=dashed label="FunctionStmt"]
-  190 -> 227 [style=dashed label="FunctionCall"]
-  190 -> 109 [style=dashed label="Operand"]
-  190 -> 110 [style=dashed label="OperandName"]
-  190 -> 228 [style=dashed label="ReturnStmt"]
-  190 -> 229 [style=dashed label="BreakStmt"]
-  190 -> 230 [style=dashed label="ContinueStmt"]
-  190 -> 231 [style=dashed label="IfStmt"]
-  190 -> 232 [style=dashed label="ForStmt"]
-  190 -> 111 [style=dashed label="int_lit"]
-  190 -> 112 [style=dashed label="float_lit"]
-  190 -> 27 [style=dashed label="ConstDecl"]
-  190 -> 233 [style=dashed label="ExpressionList"]
-  190 -> 28 [style=dashed label="TypeDecl"]
-  190 -> 114 [style=dashed label="Literal"]
-  190 -> 115 [style=dashed label="string_lit"]
-  190 -> 116 [style=dashed label="byte_lit"]
-  190 -> 117 [style=dashed label="BasicLit"]
-  190 -> 118 [style=dashed label="FunctionLit"]
-  190 -> 234 [style=dashed label="PrimaryExpr"]
-  190 -> 235 [style=dashed label="Expression"]
-  190 -> 121 [style=dashed label="Expression1"]
-  190 -> 122 [style=dashed label="Expression2"]
-  190 -> 123 [style=dashed label="Expression3"]
-  190 -> 124 [style=dashed label="Expression4"]
-  190 -> 125 [style=dashed label="Expression5"]
-  190 -> 126 [style=dashed label="UnaryExpr"]
-  190 -> 127 [style=dashed label="unary_op"]
-  190 -> "190R21" [style=solid]
- "190R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  191 [label="State 191\n\l 46 Result: LPAREN TypeList • RPAREN\l 56 TypeList: TypeList • COMMA Type\l"]
-  191 -> 236 [style=solid label="RPAREN"]
-  191 -> 237 [style=solid label="COMMA"]
-  192 [label="State 192\n\l 57 TypeList: Type •\l"]
-  192 -> "192R57" [style=solid]
- "192R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
-  193 [label="State 193\n\l108 FieldDecl: IdentifierList Type •\l109          | IdentifierList Type • Tag\l"]
-  193 -> 238 [style=solid label="STRING"]
-  193 -> 239 [style=dashed label="Tag"]
-  193 -> "193R108" [style=solid]
- "193R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
-  194 [label="State 194\n\l104 StructType: STRUCT LBRACE FieldDeclStar RBRACE •\l"]
-  194 -> "194R104" [style=solid]
- "194R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
-  195 [label="State 195\n\l107 FieldDeclStar: FieldDeclStar FieldDecl • SEMICOLON\l"]
-  195 -> 240 [style=solid label="SEMICOLON"]
-  196 [label="State 196\n\l106 FieldDeclStar: FieldDecl SEMICOLON •\l"]
-  196 -> "196R106" [style=solid]
- "196R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
-  197 [label="State 197\n\l 78 Operand: LPAREN Expression RPAREN •\l"]
-  197 -> "197R78" [style=solid]
- "197R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
-  198 [label="State 198\n\l141 StructLiteral: LBRACE KeyValList • RBRACE\l144 KeyValList: KeyValList • COMMA Expression COLON Expression\l"]
-  198 -> 241 [style=solid label="RBRACE"]
-  198 -> 242 [style=solid label="COMMA"]
-  199 [label="State 199\n\l143 KeyValList: Expression • COLON Expression\l"]
-  199 -> 243 [style=solid label="COLON"]
-  200 [label="State 200\n\l102 ArrayType: LBRACK ArrayLength RBRACK Type •\l"]
-  200 -> "200R102" [style=solid]
- "200R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
-  201 [label="State 201\n\l146 Index: LBRACK Expression • RBRACK\l"]
-  201 -> 244 [style=solid label="RBRACK"]
-  202 [label="State 202\n\l145 Selector: PERIOD IDENTIFIER •\l"]
-  202 -> "202R145" [style=solid]
- "202R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
-  203 [label="State 203\n\l147 TypeAssertion: PERIOD LPAREN • Type RPAREN\l"]
-  203 -> 61 [style=solid label="FUNC"]
-  203 -> 62 [style=solid label="STRUCT"]
-  203 -> 63 [style=solid label="VAR_TYPE"]
-  203 -> 64 [style=solid label="IDENTIFIER"]
-  203 -> 65 [style=solid label="MUL"]
-  203 -> 66 [style=solid label="LBRACK"]
-  203 -> 67 [style=dashed label="TypeLit"]
-  203 -> 245 [style=dashed label="Type"]
-  203 -> 69 [style=dashed label="TypeName"]
-  203 -> 70 [style=dashed label="ArrayType"]
-  203 -> 71 [style=dashed label="StructType"]
-  203 -> 72 [style=dashed label="PointerType"]
-  203 -> 73 [style=dashed label="FunctionType"]
-  204 [label="State 204\n\l149 Expression1: Expression1 LOR Expression2 •\l151 Expression2: Expression2 • LAND Expression3\l"]
-  204 -> 163 [style=solid label="LAND"]
-  204 -> "204R149" [style=solid]
- "204R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
-  205 [label="State 205\n\l151 Expression2: Expression2 LAND Expression3 •\l153 Expression3: Expression3 • rel_op Expression4\l"]
-  205 -> 164 [style=solid label="EQL"]
-  205 -> 165 [style=solid label="NEQ"]
-  205 -> 166 [style=solid label="LEQ"]
-  205 -> 167 [style=solid label="GEQ"]
-  205 -> 168 [style=solid label="GTR"]
-  205 -> 169 [style=solid label="LSS"]
-  205 -> 170 [style=dashed label="rel_op"]
-  205 -> "205R151" [style=solid]
- "205R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
-  206 [label="State 206\n\l153 Expression3: Expression3 rel_op Expression4 •\l155 Expression4: Expression4 • add_op Expression5\l"]
-  206 -> 171 [style=solid label="ADD"]
-  206 -> 172 [style=solid label="SUB"]
-  206 -> 173 [style=solid label="OR"]
-  206 -> 174 [style=solid label="XOR"]
-  206 -> 175 [style=dashed label="add_op"]
-  206 -> "206R153" [style=solid]
- "206R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
-  207 [label="State 207\n\l155 Expression4: Expression4 add_op Expression5 •\l157 Expression5: Expression5 • mul_op PrimaryExpr\l"]
-  207 -> 176 [style=solid label="SHL"]
-  207 -> 177 [style=solid label="SHR"]
-  207 -> 178 [style=solid label="MUL"]
-  207 -> 179 [style=solid label="QUO"]
-  207 -> 180 [style=solid label="REM"]
-  207 -> 181 [style=solid label="AND"]
-  207 -> 182 [style=solid label="AND_NOT"]
-  207 -> 183 [style=dashed label="mul_op"]
-  207 -> "207R155" [style=solid]
- "207R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
-  208 [label="State 208\n\l137 PrimaryExpr: PrimaryExpr • Selector\l138            | PrimaryExpr • Index\l139            | PrimaryExpr • TypeAssertion\l157 Expression5: Expression5 mul_op PrimaryExpr •\l"]
-  208 -> 157 [style=solid label="LBRACK"]
-  208 -> 158 [style=solid label="PERIOD"]
-  208 -> 159 [style=dashed label="Selector"]
-  208 -> 160 [style=dashed label="Index"]
-  208 -> 161 [style=dashed label="TypeAssertion"]
-  208 -> "208R157" [style=solid]
- "208R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
-  209 [label="State 209\n\l117 ExpressionList: ExpressionList COMMA • Expression\l"]
-  209 -> 97 [style=solid label="FUNC"]
-  209 -> 98 [style=solid label="IDENTIFIER"]
-  209 -> 99 [style=solid label="BYTE"]
-  209 -> 11 [style=solid label="STRING"]
-  209 -> 100 [style=solid label="INTEGER"]
-  209 -> 101 [style=solid label="FLOAT"]
-  209 -> 102 [style=solid label="ADD"]
-  209 -> 103 [style=solid label="SUB"]
-  209 -> 104 [style=solid label="MUL"]
-  209 -> 105 [style=solid label="AND"]
-  209 -> 106 [style=solid label="NOT"]
-  209 -> 107 [style=solid label="XOR"]
-  209 -> 108 [style=solid label="LPAREN"]
-  209 -> 109 [style=dashed label="Operand"]
-  209 -> 110 [style=dashed label="OperandName"]
-  209 -> 111 [style=dashed label="int_lit"]
-  209 -> 112 [style=dashed label="float_lit"]
-  209 -> 114 [style=dashed label="Literal"]
-  209 -> 115 [style=dashed label="string_lit"]
-  209 -> 116 [style=dashed label="byte_lit"]
-  209 -> 117 [style=dashed label="BasicLit"]
-  209 -> 118 [style=dashed label="FunctionLit"]
-  209 -> 119 [style=dashed label="PrimaryExpr"]
-  209 -> 246 [style=dashed label="Expression"]
-  209 -> 121 [style=dashed label="Expression1"]
-  209 -> 122 [style=dashed label="Expression2"]
-  209 -> 123 [style=dashed label="Expression3"]
-  209 -> 124 [style=dashed label="Expression4"]
-  209 -> 125 [style=dashed label="Expression5"]
-  209 -> 126 [style=dashed label="UnaryExpr"]
-  209 -> 127 [style=dashed label="unary_op"]
-  210 [label="State 210\n\l 82 BreakStmt: BREAK • IDENTIFIER\l 83          | BREAK •\l"]
-  210 -> 247 [style=solid label="IDENTIFIER"]
-  210 -> "210R83" [style=solid]
- "210R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
-  211 [label="State 211\n\l 84 ContinueStmt: CONTINUE • IDENTIFIER\l 85             | CONTINUE •\l"]
-  211 -> 248 [style=solid label="IDENTIFIER"]
-  211 -> "211R85" [style=solid]
- "211R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
-  212 [label="State 212\n\l 92 ForStmt: FOR • OPENB Condition Block CLOSEB\l 93        | FOR • OPENB ForClause Block CLOSEB\l"]
-  212 -> 249 [style=dashed label="OPENB"]
-  212 -> "212R3" [style=solid]
- "212R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  213 [label="State 213\n\l 86 IfStmt: IF • OPENB Expression Block CLOSEB\l 87       | IF • OPENB SimpleStmt SEMICOLON Expression Block CLOSEB\l 88       | IF • OPENB SimpleStmt SEMICOLON Expression Block ELSE IfStmt CLOSEB\l 89       | IF • OPENB SimpleStmt SEMICOLON Expression Block ELSE Block CLOSEB\l 90       | IF • OPENB Expression Block ELSE IfStmt CLOSEB\l 91       | IF • OPENB Expression Block ELSE Block CLOSEB\l"]
-  213 -> 250 [style=dashed label="OPENB"]
-  213 -> "213R3" [style=solid]
- "213R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
-  214 [label="State 214\n\l 80 ReturnStmt: RETURN • Expression\l 81           | RETURN •\l"]
-  214 -> 97 [style=solid label="FUNC"]
-  214 -> 98 [style=solid label="IDENTIFIER"]
-  214 -> 99 [style=solid label="BYTE"]
-  214 -> 11 [style=solid label="STRING"]
-  214 -> 100 [style=solid label="INTEGER"]
-  214 -> 101 [style=solid label="FLOAT"]
-  214 -> 102 [style=solid label="ADD"]
-  214 -> 103 [style=solid label="SUB"]
-  214 -> 104 [style=solid label="MUL"]
-  214 -> 105 [style=solid label="AND"]
-  214 -> 106 [style=solid label="NOT"]
-  214 -> 107 [style=solid label="XOR"]
-  214 -> 108 [style=solid label="LPAREN"]
-  214 -> 109 [style=dashed label="Operand"]
-  214 -> 110 [style=dashed label="OperandName"]
-  214 -> 111 [style=dashed label="int_lit"]
-  214 -> 112 [style=dashed label="float_lit"]
-  214 -> 114 [style=dashed label="Literal"]
-  214 -> 115 [style=dashed label="string_lit"]
-  214 -> 116 [style=dashed label="byte_lit"]
-  214 -> 117 [style=dashed label="BasicLit"]
-  214 -> 118 [style=dashed label="FunctionLit"]
-  214 -> 119 [style=dashed label="PrimaryExpr"]
-  214 -> 251 [style=dashed label="Expression"]
-  214 -> 121 [style=dashed label="Expression1"]
-  214 -> 122 [style=dashed label="Expression2"]
-  214 -> 123 [style=dashed label="Expression3"]
-  214 -> 124 [style=dashed label="Expression4"]
-  214 -> 125 [style=dashed label="Expression5"]
-  214 -> 126 [style=dashed label="UnaryExpr"]
-  214 -> 127 [style=dashed label="unary_op"]
-  214 -> "214R81" [style=solid]
- "214R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
-  215 [label="State 215\n\l 22 LabeledStmt: IDENTIFIER • COLON Statement\l 37 FunctionStmt: IDENTIFIER • DEFINE FunctionCall\l 79 OperandName: IDENTIFIER •\l"]
-  215 -> 252 [style=solid label="DEFINE"]
-  215 -> 253 [style=solid label="COLON"]
-  215 -> "215R79" [style=solid]
- "215R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
-  216 [label="State 216\n\l 13 Statement: Block •\l"]
-  216 -> "216R13" [style=solid]
- "216R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
-  217 [label="State 217\n\l  2 Block: LBRACE OPENB StatementList • CLOSEB RBRACE\l  5 StatementList: StatementList • Statement SEMICOLON\l"]
-  217 -> 97 [style=solid label="FUNC"]
-  217 -> 210 [style=solid label="BREAK"]
-  217 -> 18 [style=solid label="CONST"]
-  217 -> 211 [style=solid label="CONTINUE"]
-  217 -> 212 [style=solid label="FOR"]
-  217 -> 213 [style=solid label="IF"]
-  217 -> 214 [style=solid label="RETURN"]
-  217 -> 19 [style=solid label="TYPE"]
-  217 -> 20 [style=solid label="VAR"]
-  217 -> 215 [style=solid label="IDENTIFIER"]
-  217 -> 99 [style=solid label="BYTE"]
-  217 -> 11 [style=solid label="STRING"]
-  217 -> 100 [style=solid label="INTEGER"]
-  217 -> 101 [style=solid label="FLOAT"]
-  217 -> 102 [style=solid label="ADD"]
-  217 -> 103 [style=solid label="SUB"]
-  217 -> 104 [style=solid label="MUL"]
-  217 -> 105 [style=solid label="AND"]
-  217 -> 106 [style=solid label="NOT"]
-  217 -> 107 [style=solid label="XOR"]
-  217 -> 108 [style=solid label="LPAREN"]
-  217 -> 137 [style=solid label="LBRACE"]
-  217 -> 216 [style=dashed label="Block"]
-  217 -> 254 [style=dashed label="CLOSEB"]
-  217 -> 255 [style=dashed label="Statement"]
-  217 -> 219 [style=dashed label="SimpleStmt"]
-  217 -> 220 [style=dashed label="EmptyStmt"]
-  217 -> 221 [style=dashed label="LabeledStmt"]
-  217 -> 222 [style=dashed label="IncDecStmt"]
-  217 -> 223 [style=dashed label="Assignment"]
-  217 -> 224 [style=dashed label="VarDecl"]
-  217 -> 225 [style=dashed label="Declaration"]
-  217 -> 226 [style=dashed label="FunctionStmt"]
-  217 -> 227 [style=dashed label="FunctionCall"]
-  217 -> 109 [style=dashed label="Operand"]
-  217 -> 110 [style=dashed label="OperandName"]
-  217 -> 228 [style=dashed label="ReturnStmt"]
-  217 -> 229 [style=dashed label="BreakStmt"]
-  217 -> 230 [style=dashed label="ContinueStmt"]
-  217 -> 231 [style=dashed label="IfStmt"]
-  217 -> 232 [style=dashed label="ForStmt"]
-  217 -> 111 [style=dashed label="int_lit"]
-  217 -> 112 [style=dashed label="float_lit"]
-  217 -> 27 [style=dashed label="ConstDecl"]
-  217 -> 233 [style=dashed label="ExpressionList"]
-  217 -> 28 [style=dashed label="TypeDecl"]
-  217 -> 114 [style=dashed label="Literal"]
-  217 -> 115 [style=dashed label="string_lit"]
-  217 -> 116 [style=dashed label="byte_lit"]
-  217 -> 117 [style=dashed label="BasicLit"]
-  217 -> 118 [style=dashed label="FunctionLit"]
-  217 -> 234 [style=dashed label="PrimaryExpr"]
-  217 -> 235 [style=dashed label="Expression"]
-  217 -> 121 [style=dashed label="Expression1"]
-  217 -> 122 [style=dashed label="Expression2"]
-  217 -> 123 [style=dashed label="Expression3"]
-  217 -> 124 [style=dashed label="Expression4"]
-  217 -> 125 [style=dashed label="Expression5"]
-  217 -> 126 [style=dashed label="UnaryExpr"]
-  217 -> 127 [style=dashed label="unary_op"]
-  217 -> "217R4" [style=solid]
- "217R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  217 -> "217R21" [label="[SEMICOLON]", style=solid]
- "217R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  218 [label="State 218\n\l  6 StatementList: Statement • SEMICOLON\l"]
-  218 -> 256 [style=solid label="SEMICOLON"]
-  219 [label="State 219\n\l  9 Statement: SimpleStmt •\l"]
-  219 -> "219R9" [style=solid]
- "219R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
-  220 [label="State 220\n\l 18 SimpleStmt: EmptyStmt •\l"]
-  220 -> "220R18" [style=solid]
- "220R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
-  221 [label="State 221\n\l  8 Statement: LabeledStmt •\l"]
-  221 -> "221R8" [style=solid]
- "221R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
-  222 [label="State 222\n\l 19 SimpleStmt: IncDecStmt •\l"]
-  222 -> "222R19" [style=solid]
- "222R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
-  223 [label="State 223\n\l 20 SimpleStmt: Assignment •\l"]
-  223 -> "223R20" [style=solid]
- "223R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
-  224 [label="State 224\n\l 31 Declaration: VarDecl •\l 36 FunctionStmt: VarDecl • DEFINE FunctionCall\l"]
-  224 -> 257 [style=solid label="DEFINE"]
-  224 -> "224R31" [style=solid]
- "224R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
-  225 [label="State 225\n\l  7 Statement: Declaration •\l"]
-  225 -> "225R7" [style=solid]
- "225R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
-  226 [label="State 226\n\l 17 Statement: FunctionStmt •\l"]
-  226 -> "226R17" [style=solid]
- "226R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
-  227 [label="State 227\n\l 16 Statement: FunctionCall •\l"]
-  227 -> "227R16" [style=solid]
- "227R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
-  228 [label="State 228\n\l 10 Statement: ReturnStmt •\l"]
-  228 -> "228R10" [style=solid]
- "228R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
-  229 [label="State 229\n\l 11 Statement: BreakStmt •\l"]
-  229 -> "229R11" [style=solid]
- "229R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
-  230 [label="State 230\n\l 12 Statement: ContinueStmt •\l"]
-  230 -> "230R12" [style=solid]
- "230R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
-  231 [label="State 231\n\l 14 Statement: IfStmt •\l"]
-  231 -> "231R14" [style=solid]
- "231R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
-  232 [label="State 232\n\l 15 Statement: ForStmt •\l"]
-  232 -> "232R15" [style=solid]
- "232R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
-  233 [label="State 233\n\l 25 Assignment: ExpressionList • assign_op ExpressionList\l117 ExpressionList: ExpressionList • COMMA Expression\l"]
-  233 -> 258 [style=solid label="ASSIGN"]
-  233 -> 259 [style=solid label="ADD_ASSIGN"]
-  233 -> 260 [style=solid label="SUB_ASSIGN"]
-  233 -> 261 [style=solid label="MUL_ASSIGN"]
-  233 -> 262 [style=solid label="QUO_ASSIGN"]
-  233 -> 263 [style=solid label="REM_ASSIGN"]
-  233 -> 209 [style=solid label="COMMA"]
-  233 -> 264 [style=dashed label="assign_op"]
-  234 [label="State 234\n\l 38 FunctionCall: PrimaryExpr • LPAREN ArgumentList RPAREN\l137 PrimaryExpr: PrimaryExpr • Selector\l138            | PrimaryExpr • Index\l139            | PrimaryExpr • TypeAssertion\l159 UnaryExpr: PrimaryExpr •\l"]
-  234 -> 265 [style=solid label="LPAREN"]
-  234 -> 157 [style=solid label="LBRACK"]
-  234 -> 158 [style=solid label="PERIOD"]
-  234 -> 159 [style=dashed label="Selector"]
-  234 -> 160 [style=dashed label="Index"]
-  234 -> 161 [style=dashed label="TypeAssertion"]
-  234 -> "234R159" [style=solid]
- "234R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
-  235 [label="State 235\n\l 23 IncDecStmt: Expression • INC\l 24           | Expression • DEC\l118 ExpressionList: Expression •\l"]
-  235 -> 266 [style=solid label="INC"]
-  235 -> 267 [style=solid label="DEC"]
-  235 -> "235R118" [style=solid]
- "235R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  236 [label="State 236\n\l 46 Result: LPAREN TypeList RPAREN •\l"]
-  236 -> "236R46" [style=solid]
- "236R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
-  237 [label="State 237\n\l 56 TypeList: TypeList COMMA • Type\l"]
-  237 -> 61 [style=solid label="FUNC"]
-  237 -> 62 [style=solid label="STRUCT"]
-  237 -> 63 [style=solid label="VAR_TYPE"]
-  237 -> 64 [style=solid label="IDENTIFIER"]
-  237 -> 65 [style=solid label="MUL"]
-  237 -> 66 [style=solid label="LBRACK"]
-  237 -> 67 [style=dashed label="TypeLit"]
-  237 -> 268 [style=dashed label="Type"]
-  237 -> 69 [style=dashed label="TypeName"]
-  237 -> 70 [style=dashed label="ArrayType"]
-  237 -> 71 [style=dashed label="StructType"]
-  237 -> 72 [style=dashed label="PointerType"]
-  237 -> 73 [style=dashed label="FunctionType"]
-  238 [label="State 238\n\l110 Tag: STRING •\l"]
-  238 -> "238R110" [style=solid]
- "238R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
-  239 [label="State 239\n\l109 FieldDecl: IdentifierList Type Tag •\l"]
-  239 -> "239R109" [style=solid]
- "239R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
-  240 [label="State 240\n\l107 FieldDeclStar: FieldDeclStar FieldDecl SEMICOLON •\l"]
-  240 -> "240R107" [style=solid]
- "240R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
-  241 [label="State 241\n\l141 StructLiteral: LBRACE KeyValList RBRACE •\l"]
-  241 -> "241R141" [style=solid]
- "241R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
-  242 [label="State 242\n\l144 KeyValList: KeyValList COMMA • Expression COLON Expression\l"]
-  242 -> 97 [style=solid label="FUNC"]
-  242 -> 98 [style=solid label="IDENTIFIER"]
-  242 -> 99 [style=solid label="BYTE"]
-  242 -> 11 [style=solid label="STRING"]
-  242 -> 100 [style=solid label="INTEGER"]
-  242 -> 101 [style=solid label="FLOAT"]
-  242 -> 102 [style=solid label="ADD"]
-  242 -> 103 [style=solid label="SUB"]
-  242 -> 104 [style=solid label="MUL"]
-  242 -> 105 [style=solid label="AND"]
-  242 -> 106 [style=solid label="NOT"]
-  242 -> 107 [style=solid label="XOR"]
-  242 -> 108 [style=solid label="LPAREN"]
-  242 -> 109 [style=dashed label="Operand"]
-  242 -> 110 [style=dashed label="OperandName"]
-  242 -> 111 [style=dashed label="int_lit"]
-  242 -> 112 [style=dashed label="float_lit"]
-  242 -> 114 [style=dashed label="Literal"]
-  242 -> 115 [style=dashed label="string_lit"]
-  242 -> 116 [style=dashed label="byte_lit"]
-  242 -> 117 [style=dashed label="BasicLit"]
-  242 -> 118 [style=dashed label="FunctionLit"]
-  242 -> 119 [style=dashed label="PrimaryExpr"]
-  242 -> 269 [style=dashed label="Expression"]
-  242 -> 121 [style=dashed label="Expression1"]
-  242 -> 122 [style=dashed label="Expression2"]
-  242 -> 123 [style=dashed label="Expression3"]
-  242 -> 124 [style=dashed label="Expression4"]
-  242 -> 125 [style=dashed label="Expression5"]
-  242 -> 126 [style=dashed label="UnaryExpr"]
-  242 -> 127 [style=dashed label="unary_op"]
-  243 [label="State 243\n\l143 KeyValList: Expression COLON • Expression\l"]
-  243 -> 97 [style=solid label="FUNC"]
-  243 -> 98 [style=solid label="IDENTIFIER"]
-  243 -> 99 [style=solid label="BYTE"]
-  243 -> 11 [style=solid label="STRING"]
-  243 -> 100 [style=solid label="INTEGER"]
-  243 -> 101 [style=solid label="FLOAT"]
-  243 -> 102 [style=solid label="ADD"]
-  243 -> 103 [style=solid label="SUB"]
-  243 -> 104 [style=solid label="MUL"]
-  243 -> 105 [style=solid label="AND"]
-  243 -> 106 [style=solid label="NOT"]
-  243 -> 107 [style=solid label="XOR"]
-  243 -> 108 [style=solid label="LPAREN"]
-  243 -> 109 [style=dashed label="Operand"]
-  243 -> 110 [style=dashed label="OperandName"]
-  243 -> 111 [style=dashed label="int_lit"]
-  243 -> 112 [style=dashed label="float_lit"]
-  243 -> 114 [style=dashed label="Literal"]
-  243 -> 115 [style=dashed label="string_lit"]
-  243 -> 116 [style=dashed label="byte_lit"]
-  243 -> 117 [style=dashed label="BasicLit"]
-  243 -> 118 [style=dashed label="FunctionLit"]
-  243 -> 119 [style=dashed label="PrimaryExpr"]
-  243 -> 270 [style=dashed label="Expression"]
-  243 -> 121 [style=dashed label="Expression1"]
-  243 -> 122 [style=dashed label="Expression2"]
-  243 -> 123 [style=dashed label="Expression3"]
-  243 -> 124 [style=dashed label="Expression4"]
-  243 -> 125 [style=dashed label="Expression5"]
-  243 -> 126 [style=dashed label="UnaryExpr"]
-  243 -> 127 [style=dashed label="unary_op"]
-  244 [label="State 244\n\l146 Index: LBRACK Expression RBRACK •\l"]
-  244 -> "244R146" [style=solid]
- "244R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
-  245 [label="State 245\n\l147 TypeAssertion: PERIOD LPAREN Type • RPAREN\l"]
-  245 -> 271 [style=solid label="RPAREN"]
-  246 [label="State 246\n\l117 ExpressionList: ExpressionList COMMA Expression •\l"]
-  246 -> "246R117" [style=solid]
- "246R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
-  247 [label="State 247\n\l 82 BreakStmt: BREAK IDENTIFIER •\l"]
-  247 -> "247R82" [style=solid]
- "247R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
-  248 [label="State 248\n\l 84 ContinueStmt: CONTINUE IDENTIFIER •\l"]
-  248 -> "248R84" [style=solid]
- "248R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
-  249 [label="State 249\n\l 92 ForStmt: FOR OPENB • Condition Block CLOSEB\l 93        | FOR OPENB • ForClause Block CLOSEB\l"]
-  249 -> 97 [style=solid label="FUNC"]
-  249 -> 98 [style=solid label="IDENTIFIER"]
-  249 -> 99 [style=solid label="BYTE"]
-  249 -> 11 [style=solid label="STRING"]
-  249 -> 100 [style=solid label="INTEGER"]
-  249 -> 101 [style=solid label="FLOAT"]
-  249 -> 102 [style=solid label="ADD"]
-  249 -> 103 [style=solid label="SUB"]
-  249 -> 104 [style=solid label="MUL"]
-  249 -> 105 [style=solid label="AND"]
-  249 -> 106 [style=solid label="NOT"]
-  249 -> 107 [style=solid label="XOR"]
-  249 -> 108 [style=solid label="LPAREN"]
-  249 -> 272 [style=dashed label="SimpleStmt"]
-  249 -> 220 [style=dashed label="EmptyStmt"]
-  249 -> 222 [style=dashed label="IncDecStmt"]
-  249 -> 223 [style=dashed label="Assignment"]
-  249 -> 109 [style=dashed label="Operand"]
-  249 -> 110 [style=dashed label="OperandName"]
-  249 -> 273 [style=dashed label="Condition"]
-  249 -> 274 [style=dashed label="ForClause"]
-  249 -> 275 [style=dashed label="InitStmt"]
-  249 -> 111 [style=dashed label="int_lit"]
-  249 -> 112 [style=dashed label="float_lit"]
-  249 -> 233 [style=dashed label="ExpressionList"]
-  249 -> 114 [style=dashed label="Literal"]
-  249 -> 115 [style=dashed label="string_lit"]
-  249 -> 116 [style=dashed label="byte_lit"]
-  249 -> 117 [style=dashed label="BasicLit"]
-  249 -> 118 [style=dashed label="FunctionLit"]
-  249 -> 119 [style=dashed label="PrimaryExpr"]
-  249 -> 276 [style=dashed label="Expression"]
-  249 -> 121 [style=dashed label="Expression1"]
-  249 -> 122 [style=dashed label="Expression2"]
-  249 -> 123 [style=dashed label="Expression3"]
-  249 -> 124 [style=dashed label="Expression4"]
-  249 -> 125 [style=dashed label="Expression5"]
-  249 -> 126 [style=dashed label="UnaryExpr"]
-  249 -> 127 [style=dashed label="unary_op"]
-  249 -> "249R21" [style=solid]
- "249R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  250 [label="State 250\n\l 86 IfStmt: IF OPENB • Expression Block CLOSEB\l 87       | IF OPENB • SimpleStmt SEMICOLON Expression Block CLOSEB\l 88       | IF OPENB • SimpleStmt SEMICOLON Expression Block ELSE IfStmt CLOSEB\l 89       | IF OPENB • SimpleStmt SEMICOLON Expression Block ELSE Block CLOSEB\l 90       | IF OPENB • Expression Block ELSE IfStmt CLOSEB\l 91       | IF OPENB • Expression Block ELSE Block CLOSEB\l"]
-  250 -> 97 [style=solid label="FUNC"]
-  250 -> 98 [style=solid label="IDENTIFIER"]
-  250 -> 99 [style=solid label="BYTE"]
-  250 -> 11 [style=solid label="STRING"]
-  250 -> 100 [style=solid label="INTEGER"]
-  250 -> 101 [style=solid label="FLOAT"]
-  250 -> 102 [style=solid label="ADD"]
-  250 -> 103 [style=solid label="SUB"]
-  250 -> 104 [style=solid label="MUL"]
-  250 -> 105 [style=solid label="AND"]
-  250 -> 106 [style=solid label="NOT"]
-  250 -> 107 [style=solid label="XOR"]
-  250 -> 108 [style=solid label="LPAREN"]
-  250 -> 277 [style=dashed label="SimpleStmt"]
-  250 -> 220 [style=dashed label="EmptyStmt"]
-  250 -> 222 [style=dashed label="IncDecStmt"]
-  250 -> 223 [style=dashed label="Assignment"]
-  250 -> 109 [style=dashed label="Operand"]
-  250 -> 110 [style=dashed label="OperandName"]
-  250 -> 111 [style=dashed label="int_lit"]
-  250 -> 112 [style=dashed label="float_lit"]
-  250 -> 233 [style=dashed label="ExpressionList"]
-  250 -> 114 [style=dashed label="Literal"]
-  250 -> 115 [style=dashed label="string_lit"]
-  250 -> 116 [style=dashed label="byte_lit"]
-  250 -> 117 [style=dashed label="BasicLit"]
-  250 -> 118 [style=dashed label="FunctionLit"]
-  250 -> 119 [style=dashed label="PrimaryExpr"]
-  250 -> 278 [style=dashed label="Expression"]
-  250 -> 121 [style=dashed label="Expression1"]
-  250 -> 122 [style=dashed label="Expression2"]
-  250 -> 123 [style=dashed label="Expression3"]
-  250 -> 124 [style=dashed label="Expression4"]
-  250 -> 125 [style=dashed label="Expression5"]
-  250 -> 126 [style=dashed label="UnaryExpr"]
-  250 -> 127 [style=dashed label="unary_op"]
-  250 -> "250R21" [style=solid]
- "250R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  251 [label="State 251\n\l 80 ReturnStmt: RETURN Expression •\l"]
-  251 -> "251R80" [style=solid]
- "251R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
-  252 [label="State 252\n\l 37 FunctionStmt: IDENTIFIER DEFINE • FunctionCall\l"]
-  252 -> 97 [style=solid label="FUNC"]
-  252 -> 98 [style=solid label="IDENTIFIER"]
-  252 -> 99 [style=solid label="BYTE"]
-  252 -> 11 [style=solid label="STRING"]
-  252 -> 100 [style=solid label="INTEGER"]
-  252 -> 101 [style=solid label="FLOAT"]
-  252 -> 108 [style=solid label="LPAREN"]
-  252 -> 279 [style=dashed label="FunctionCall"]
-  252 -> 109 [style=dashed label="Operand"]
-  252 -> 110 [style=dashed label="OperandName"]
-  252 -> 111 [style=dashed label="int_lit"]
-  252 -> 112 [style=dashed label="float_lit"]
-  252 -> 114 [style=dashed label="Literal"]
-  252 -> 115 [style=dashed label="string_lit"]
-  252 -> 116 [style=dashed label="byte_lit"]
-  252 -> 117 [style=dashed label="BasicLit"]
-  252 -> 118 [style=dashed label="FunctionLit"]
-  252 -> 280 [style=dashed label="PrimaryExpr"]
-  253 [label="State 253\n\l 22 LabeledStmt: IDENTIFIER COLON • Statement\l"]
-  253 -> 97 [style=solid label="FUNC"]
-  253 -> 210 [style=solid label="BREAK"]
-  253 -> 18 [style=solid label="CONST"]
-  253 -> 211 [style=solid label="CONTINUE"]
-  253 -> 212 [style=solid label="FOR"]
-  253 -> 213 [style=solid label="IF"]
-  253 -> 214 [style=solid label="RETURN"]
-  253 -> 19 [style=solid label="TYPE"]
-  253 -> 20 [style=solid label="VAR"]
-  253 -> 215 [style=solid label="IDENTIFIER"]
-  253 -> 99 [style=solid label="BYTE"]
-  253 -> 11 [style=solid label="STRING"]
-  253 -> 100 [style=solid label="INTEGER"]
-  253 -> 101 [style=solid label="FLOAT"]
-  253 -> 102 [style=solid label="ADD"]
-  253 -> 103 [style=solid label="SUB"]
-  253 -> 104 [style=solid label="MUL"]
-  253 -> 105 [style=solid label="AND"]
-  253 -> 106 [style=solid label="NOT"]
-  253 -> 107 [style=solid label="XOR"]
-  253 -> 108 [style=solid label="LPAREN"]
-  253 -> 137 [style=solid label="LBRACE"]
-  253 -> 216 [style=dashed label="Block"]
-  253 -> 281 [style=dashed label="Statement"]
-  253 -> 219 [style=dashed label="SimpleStmt"]
-  253 -> 220 [style=dashed label="EmptyStmt"]
-  253 -> 221 [style=dashed label="LabeledStmt"]
-  253 -> 222 [style=dashed label="IncDecStmt"]
-  253 -> 223 [style=dashed label="Assignment"]
-  253 -> 224 [style=dashed label="VarDecl"]
-  253 -> 225 [style=dashed label="Declaration"]
-  253 -> 226 [style=dashed label="FunctionStmt"]
-  253 -> 227 [style=dashed label="FunctionCall"]
-  253 -> 109 [style=dashed label="Operand"]
-  253 -> 110 [style=dashed label="OperandName"]
-  253 -> 228 [style=dashed label="ReturnStmt"]
-  253 -> 229 [style=dashed label="BreakStmt"]
-  253 -> 230 [style=dashed label="ContinueStmt"]
-  253 -> 231 [style=dashed label="IfStmt"]
-  253 -> 232 [style=dashed label="ForStmt"]
-  253 -> 111 [style=dashed label="int_lit"]
-  253 -> 112 [style=dashed label="float_lit"]
-  253 -> 27 [style=dashed label="ConstDecl"]
-  253 -> 233 [style=dashed label="ExpressionList"]
-  253 -> 28 [style=dashed label="TypeDecl"]
-  253 -> 114 [style=dashed label="Literal"]
-  253 -> 115 [style=dashed label="string_lit"]
-  253 -> 116 [style=dashed label="byte_lit"]
-  253 -> 117 [style=dashed label="BasicLit"]
-  253 -> 118 [style=dashed label="FunctionLit"]
-  253 -> 234 [style=dashed label="PrimaryExpr"]
-  253 -> 235 [style=dashed label="Expression"]
-  253 -> 121 [style=dashed label="Expression1"]
-  253 -> 122 [style=dashed label="Expression2"]
-  253 -> 123 [style=dashed label="Expression3"]
-  253 -> 124 [style=dashed label="Expression4"]
-  253 -> 125 [style=dashed label="Expression5"]
-  253 -> 126 [style=dashed label="UnaryExpr"]
-  253 -> 127 [style=dashed label="unary_op"]
-  253 -> "253R21" [style=solid]
- "253R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  254 [label="State 254\n\l  2 Block: LBRACE OPENB StatementList CLOSEB • RBRACE\l"]
-  254 -> 282 [style=solid label="RBRACE"]
-  255 [label="State 255\n\l  5 StatementList: StatementList Statement • SEMICOLON\l"]
-  255 -> 283 [style=solid label="SEMICOLON"]
-  256 [label="State 256\n\l  6 StatementList: Statement SEMICOLON •\l"]
-  256 -> "256R6" [style=solid]
- "256R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
-  257 [label="State 257\n\l 36 FunctionStmt: VarDecl DEFINE • FunctionCall\l"]
-  257 -> 97 [style=solid label="FUNC"]
-  257 -> 98 [style=solid label="IDENTIFIER"]
-  257 -> 99 [style=solid label="BYTE"]
-  257 -> 11 [style=solid label="STRING"]
-  257 -> 100 [style=solid label="INTEGER"]
-  257 -> 101 [style=solid label="FLOAT"]
-  257 -> 108 [style=solid label="LPAREN"]
-  257 -> 284 [style=dashed label="FunctionCall"]
-  257 -> 109 [style=dashed label="Operand"]
-  257 -> 110 [style=dashed label="OperandName"]
-  257 -> 111 [style=dashed label="int_lit"]
-  257 -> 112 [style=dashed label="float_lit"]
-  257 -> 114 [style=dashed label="Literal"]
-  257 -> 115 [style=dashed label="string_lit"]
-  257 -> 116 [style=dashed label="byte_lit"]
-  257 -> 117 [style=dashed label="BasicLit"]
-  257 -> 118 [style=dashed label="FunctionLit"]
-  257 -> 280 [style=dashed label="PrimaryExpr"]
-  258 [label="State 258\n\l184 assign_op: ASSIGN •\l"]
-  258 -> "258R184" [style=solid]
- "258R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
-  259 [label="State 259\n\l185 assign_op: ADD_ASSIGN •\l"]
-  259 -> "259R185" [style=solid]
- "259R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
-  260 [label="State 260\n\l186 assign_op: SUB_ASSIGN •\l"]
-  260 -> "260R186" [style=solid]
- "260R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
-  261 [label="State 261\n\l187 assign_op: MUL_ASSIGN •\l"]
-  261 -> "261R187" [style=solid]
- "261R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
-  262 [label="State 262\n\l188 assign_op: QUO_ASSIGN •\l"]
-  262 -> "262R188" [style=solid]
- "262R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
-  263 [label="State 263\n\l189 assign_op: REM_ASSIGN •\l"]
-  263 -> "263R189" [style=solid]
- "263R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
-  264 [label="State 264\n\l 25 Assignment: ExpressionList assign_op • ExpressionList\l"]
-  264 -> 97 [style=solid label="FUNC"]
-  264 -> 98 [style=solid label="IDENTIFIER"]
-  264 -> 99 [style=solid label="BYTE"]
-  264 -> 11 [style=solid label="STRING"]
-  264 -> 100 [style=solid label="INTEGER"]
-  264 -> 101 [style=solid label="FLOAT"]
-  264 -> 102 [style=solid label="ADD"]
-  264 -> 103 [style=solid label="SUB"]
-  264 -> 104 [style=solid label="MUL"]
-  264 -> 105 [style=solid label="AND"]
-  264 -> 106 [style=solid label="NOT"]
-  264 -> 107 [style=solid label="XOR"]
-  264 -> 108 [style=solid label="LPAREN"]
-  264 -> 109 [style=dashed label="Operand"]
-  264 -> 110 [style=dashed label="OperandName"]
-  264 -> 111 [style=dashed label="int_lit"]
-  264 -> 112 [style=dashed label="float_lit"]
-  264 -> 285 [style=dashed label="ExpressionList"]
-  264 -> 114 [style=dashed label="Literal"]
-  264 -> 115 [style=dashed label="string_lit"]
-  264 -> 116 [style=dashed label="byte_lit"]
-  264 -> 117 [style=dashed label="BasicLit"]
-  264 -> 118 [style=dashed label="FunctionLit"]
-  264 -> 119 [style=dashed label="PrimaryExpr"]
-  264 -> 189 [style=dashed label="Expression"]
-  264 -> 121 [style=dashed label="Expression1"]
-  264 -> 122 [style=dashed label="Expression2"]
-  264 -> 123 [style=dashed label="Expression3"]
-  264 -> 124 [style=dashed label="Expression4"]
-  264 -> 125 [style=dashed label="Expression5"]
-  264 -> 126 [style=dashed label="UnaryExpr"]
-  264 -> 127 [style=dashed label="unary_op"]
-  265 [label="State 265\n\l 38 FunctionCall: PrimaryExpr LPAREN • ArgumentList RPAREN\l"]
-  265 -> 97 [style=solid label="FUNC"]
-  265 -> 98 [style=solid label="IDENTIFIER"]
-  265 -> 99 [style=solid label="BYTE"]
-  265 -> 11 [style=solid label="STRING"]
-  265 -> 100 [style=solid label="INTEGER"]
-  265 -> 101 [style=solid label="FLOAT"]
-  265 -> 108 [style=solid label="LPAREN"]
-  265 -> 286 [style=dashed label="FunctionCall"]
-  265 -> 287 [style=dashed label="ArgumentList"]
-  265 -> 288 [style=dashed label="Arguments"]
-  265 -> 109 [style=dashed label="Operand"]
-  265 -> 110 [style=dashed label="OperandName"]
-  265 -> 111 [style=dashed label="int_lit"]
-  265 -> 112 [style=dashed label="float_lit"]
-  265 -> 114 [style=dashed label="Literal"]
-  265 -> 115 [style=dashed label="string_lit"]
-  265 -> 116 [style=dashed label="byte_lit"]
-  265 -> 117 [style=dashed label="BasicLit"]
-  265 -> 118 [style=dashed label="FunctionLit"]
-  265 -> 289 [style=dashed label="PrimaryExpr"]
-  265 -> "265R41" [style=solid]
- "265R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
-  266 [label="State 266\n\l 23 IncDecStmt: Expression INC •\l"]
-  266 -> "266R23" [style=solid]
- "266R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
-  267 [label="State 267\n\l 24 IncDecStmt: Expression DEC •\l"]
-  267 -> "267R24" [style=solid]
- "267R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
-  268 [label="State 268\n\l 56 TypeList: TypeList COMMA Type •\l"]
-  268 -> "268R56" [style=solid]
- "268R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
-  269 [label="State 269\n\l144 KeyValList: KeyValList COMMA Expression • COLON Expression\l"]
-  269 -> 290 [style=solid label="COLON"]
-  270 [label="State 270\n\l143 KeyValList: Expression COLON Expression •\l"]
-  270 -> "270R143" [style=solid]
- "270R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
-  271 [label="State 271\n\l147 TypeAssertion: PERIOD LPAREN Type RPAREN •\l"]
-  271 -> "271R147" [style=solid]
- "271R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
-  272 [label="State 272\n\l 96 InitStmt: SimpleStmt •\l"]
-  272 -> "272R96" [style=solid]
- "272R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
-  273 [label="State 273\n\l 92 ForStmt: FOR OPENB Condition • Block CLOSEB\l"]
-  273 -> 137 [style=solid label="LBRACE"]
-  273 -> 291 [style=dashed label="Block"]
-  274 [label="State 274\n\l 93 ForStmt: FOR OPENB ForClause • Block CLOSEB\l"]
-  274 -> 137 [style=solid label="LBRACE"]
-  274 -> 292 [style=dashed label="Block"]
-  275 [label="State 275\n\l 95 ForClause: InitStmt • SEMICOLON Condition SEMICOLON PostStmt\l"]
-  275 -> 293 [style=solid label="SEMICOLON"]
-  276 [label="State 276\n\l 23 IncDecStmt: Expression • INC\l 24           | Expression • DEC\l 94 Condition: Expression •\l118 ExpressionList: Expression •\l"]
-  276 -> 266 [style=solid label="INC"]
-  276 -> 267 [style=solid label="DEC"]
-  276 -> "276R94" [label="[LBRACE]", style=solid]
- "276R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
-  276 -> "276R118" [style=solid]
- "276R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  277 [label="State 277\n\l 87 IfStmt: IF OPENB SimpleStmt • SEMICOLON Expression Block CLOSEB\l 88       | IF OPENB SimpleStmt • SEMICOLON Expression Block ELSE IfStmt CLOSEB\l 89       | IF OPENB SimpleStmt • SEMICOLON Expression Block ELSE Block CLOSEB\l"]
-  277 -> 294 [style=solid label="SEMICOLON"]
-  278 [label="State 278\n\l 23 IncDecStmt: Expression • INC\l 24           | Expression • DEC\l 86 IfStmt: IF OPENB Expression • Block CLOSEB\l 90       | IF OPENB Expression • Block ELSE IfStmt CLOSEB\l 91       | IF OPENB Expression • Block ELSE Block CLOSEB\l118 ExpressionList: Expression •\l"]
-  278 -> 266 [style=solid label="INC"]
-  278 -> 267 [style=solid label="DEC"]
-  278 -> 137 [style=solid label="LBRACE"]
-  278 -> 295 [style=dashed label="Block"]
-  278 -> "278R118" [style=solid]
- "278R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
-  279 [label="State 279\n\l 37 FunctionStmt: IDENTIFIER DEFINE FunctionCall •\l"]
-  279 -> "279R37" [style=solid]
- "279R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
-  280 [label="State 280\n\l 38 FunctionCall: PrimaryExpr • LPAREN ArgumentList RPAREN\l137 PrimaryExpr: PrimaryExpr • Selector\l138            | PrimaryExpr • Index\l139            | PrimaryExpr • TypeAssertion\l"]
-  280 -> 265 [style=solid label="LPAREN"]
-  280 -> 157 [style=solid label="LBRACK"]
-  280 -> 158 [style=solid label="PERIOD"]
-  280 -> 159 [style=dashed label="Selector"]
-  280 -> 160 [style=dashed label="Index"]
-  280 -> 161 [style=dashed label="TypeAssertion"]
-  281 [label="State 281\n\l 22 LabeledStmt: IDENTIFIER COLON Statement •\l"]
-  281 -> "281R22" [style=solid]
- "281R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
-  282 [label="State 282\n\l  2 Block: LBRACE OPENB StatementList CLOSEB RBRACE •\l"]
-  282 -> "282R2" [style=solid]
- "282R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
-  283 [label="State 283\n\l  5 StatementList: StatementList Statement SEMICOLON •\l"]
-  283 -> "283R5" [style=solid]
- "283R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
-  284 [label="State 284\n\l 36 FunctionStmt: VarDecl DEFINE FunctionCall •\l"]
-  284 -> "284R36" [style=solid]
- "284R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
-  285 [label="State 285\n\l 25 Assignment: ExpressionList assign_op ExpressionList •\l117 ExpressionList: ExpressionList • COMMA Expression\l"]
-  285 -> 209 [style=solid label="COMMA"]
-  285 -> "285R25" [style=solid]
- "285R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
-  286 [label="State 286\n\l 43 Arguments: FunctionCall •\l"]
-  286 -> "286R43" [style=solid]
- "286R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
-  287 [label="State 287\n\l 38 FunctionCall: PrimaryExpr LPAREN ArgumentList • RPAREN\l 39 ArgumentList: ArgumentList • COMMA Arguments\l"]
-  287 -> 296 [style=solid label="RPAREN"]
-  287 -> 297 [style=solid label="COMMA"]
-  288 [label="State 288\n\l 40 ArgumentList: Arguments •\l"]
-  288 -> "288R40" [style=solid]
- "288R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
-  289 [label="State 289\n\l 38 FunctionCall: PrimaryExpr • LPAREN ArgumentList RPAREN\l 42 Arguments: PrimaryExpr •\l137 PrimaryExpr: PrimaryExpr • Selector\l138            | PrimaryExpr • Index\l139            | PrimaryExpr • TypeAssertion\l"]
-  289 -> 265 [style=solid label="LPAREN"]
-  289 -> 157 [style=solid label="LBRACK"]
-  289 -> 158 [style=solid label="PERIOD"]
-  289 -> 159 [style=dashed label="Selector"]
-  289 -> 160 [style=dashed label="Index"]
-  289 -> 161 [style=dashed label="TypeAssertion"]
-  289 -> "289R42" [style=solid]
- "289R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
-  290 [label="State 290\n\l144 KeyValList: KeyValList COMMA Expression COLON • Expression\l"]
-  290 -> 97 [style=solid label="FUNC"]
-  290 -> 98 [style=solid label="IDENTIFIER"]
-  290 -> 99 [style=solid label="BYTE"]
-  290 -> 11 [style=solid label="STRING"]
-  290 -> 100 [style=solid label="INTEGER"]
-  290 -> 101 [style=solid label="FLOAT"]
-  290 -> 102 [style=solid label="ADD"]
-  290 -> 103 [style=solid label="SUB"]
-  290 -> 104 [style=solid label="MUL"]
-  290 -> 105 [style=solid label="AND"]
-  290 -> 106 [style=solid label="NOT"]
-  290 -> 107 [style=solid label="XOR"]
-  290 -> 108 [style=solid label="LPAREN"]
-  290 -> 109 [style=dashed label="Operand"]
-  290 -> 110 [style=dashed label="OperandName"]
-  290 -> 111 [style=dashed label="int_lit"]
-  290 -> 112 [style=dashed label="float_lit"]
-  290 -> 114 [style=dashed label="Literal"]
-  290 -> 115 [style=dashed label="string_lit"]
-  290 -> 116 [style=dashed label="byte_lit"]
-  290 -> 117 [style=dashed label="BasicLit"]
-  290 -> 118 [style=dashed label="FunctionLit"]
-  290 -> 119 [style=dashed label="PrimaryExpr"]
-  290 -> 298 [style=dashed label="Expression"]
-  290 -> 121 [style=dashed label="Expression1"]
-  290 -> 122 [style=dashed label="Expression2"]
-  290 -> 123 [style=dashed label="Expression3"]
-  290 -> 124 [style=dashed label="Expression4"]
-  290 -> 125 [style=dashed label="Expression5"]
-  290 -> 126 [style=dashed label="UnaryExpr"]
-  290 -> 127 [style=dashed label="unary_op"]
-  291 [label="State 291\n\l 92 ForStmt: FOR OPENB Condition Block • CLOSEB\l"]
-  291 -> 299 [style=dashed label="CLOSEB"]
-  291 -> "291R4" [style=solid]
- "291R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  292 [label="State 292\n\l 93 ForStmt: FOR OPENB ForClause Block • CLOSEB\l"]
-  292 -> 300 [style=dashed label="CLOSEB"]
-  292 -> "292R4" [style=solid]
- "292R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  293 [label="State 293\n\l 95 ForClause: InitStmt SEMICOLON • Condition SEMICOLON PostStmt\l"]
-  293 -> 97 [style=solid label="FUNC"]
-  293 -> 98 [style=solid label="IDENTIFIER"]
-  293 -> 99 [style=solid label="BYTE"]
-  293 -> 11 [style=solid label="STRING"]
-  293 -> 100 [style=solid label="INTEGER"]
-  293 -> 101 [style=solid label="FLOAT"]
-  293 -> 102 [style=solid label="ADD"]
-  293 -> 103 [style=solid label="SUB"]
-  293 -> 104 [style=solid label="MUL"]
-  293 -> 105 [style=solid label="AND"]
-  293 -> 106 [style=solid label="NOT"]
-  293 -> 107 [style=solid label="XOR"]
-  293 -> 108 [style=solid label="LPAREN"]
-  293 -> 109 [style=dashed label="Operand"]
-  293 -> 110 [style=dashed label="OperandName"]
-  293 -> 301 [style=dashed label="Condition"]
-  293 -> 111 [style=dashed label="int_lit"]
-  293 -> 112 [style=dashed label="float_lit"]
-  293 -> 114 [style=dashed label="Literal"]
-  293 -> 115 [style=dashed label="string_lit"]
-  293 -> 116 [style=dashed label="byte_lit"]
-  293 -> 117 [style=dashed label="BasicLit"]
-  293 -> 118 [style=dashed label="FunctionLit"]
-  293 -> 119 [style=dashed label="PrimaryExpr"]
-  293 -> 302 [style=dashed label="Expression"]
-  293 -> 121 [style=dashed label="Expression1"]
-  293 -> 122 [style=dashed label="Expression2"]
-  293 -> 123 [style=dashed label="Expression3"]
-  293 -> 124 [style=dashed label="Expression4"]
-  293 -> 125 [style=dashed label="Expression5"]
-  293 -> 126 [style=dashed label="UnaryExpr"]
-  293 -> 127 [style=dashed label="unary_op"]
-  294 [label="State 294\n\l 87 IfStmt: IF OPENB SimpleStmt SEMICOLON • Expression Block CLOSEB\l 88       | IF OPENB SimpleStmt SEMICOLON • Expression Block ELSE IfStmt CLOSEB\l 89       | IF OPENB SimpleStmt SEMICOLON • Expression Block ELSE Block CLOSEB\l"]
-  294 -> 97 [style=solid label="FUNC"]
-  294 -> 98 [style=solid label="IDENTIFIER"]
-  294 -> 99 [style=solid label="BYTE"]
-  294 -> 11 [style=solid label="STRING"]
-  294 -> 100 [style=solid label="INTEGER"]
-  294 -> 101 [style=solid label="FLOAT"]
-  294 -> 102 [style=solid label="ADD"]
-  294 -> 103 [style=solid label="SUB"]
-  294 -> 104 [style=solid label="MUL"]
-  294 -> 105 [style=solid label="AND"]
-  294 -> 106 [style=solid label="NOT"]
-  294 -> 107 [style=solid label="XOR"]
-  294 -> 108 [style=solid label="LPAREN"]
-  294 -> 109 [style=dashed label="Operand"]
-  294 -> 110 [style=dashed label="OperandName"]
-  294 -> 111 [style=dashed label="int_lit"]
-  294 -> 112 [style=dashed label="float_lit"]
-  294 -> 114 [style=dashed label="Literal"]
-  294 -> 115 [style=dashed label="string_lit"]
-  294 -> 116 [style=dashed label="byte_lit"]
-  294 -> 117 [style=dashed label="BasicLit"]
-  294 -> 118 [style=dashed label="FunctionLit"]
-  294 -> 119 [style=dashed label="PrimaryExpr"]
-  294 -> 303 [style=dashed label="Expression"]
-  294 -> 121 [style=dashed label="Expression1"]
-  294 -> 122 [style=dashed label="Expression2"]
-  294 -> 123 [style=dashed label="Expression3"]
-  294 -> 124 [style=dashed label="Expression4"]
-  294 -> 125 [style=dashed label="Expression5"]
-  294 -> 126 [style=dashed label="UnaryExpr"]
-  294 -> 127 [style=dashed label="unary_op"]
-  295 [label="State 295\n\l 86 IfStmt: IF OPENB Expression Block • CLOSEB\l 90       | IF OPENB Expression Block • ELSE IfStmt CLOSEB\l 91       | IF OPENB Expression Block • ELSE Block CLOSEB\l"]
-  295 -> 304 [style=solid label="ELSE"]
-  295 -> 305 [style=dashed label="CLOSEB"]
-  295 -> "295R4" [style=solid]
- "295R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  296 [label="State 296\n\l 38 FunctionCall: PrimaryExpr LPAREN ArgumentList RPAREN •\l"]
-  296 -> "296R38" [style=solid]
- "296R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
-  297 [label="State 297\n\l 39 ArgumentList: ArgumentList COMMA • Arguments\l"]
-  297 -> 97 [style=solid label="FUNC"]
-  297 -> 98 [style=solid label="IDENTIFIER"]
-  297 -> 99 [style=solid label="BYTE"]
-  297 -> 11 [style=solid label="STRING"]
-  297 -> 100 [style=solid label="INTEGER"]
-  297 -> 101 [style=solid label="FLOAT"]
-  297 -> 108 [style=solid label="LPAREN"]
-  297 -> 286 [style=dashed label="FunctionCall"]
-  297 -> 306 [style=dashed label="Arguments"]
-  297 -> 109 [style=dashed label="Operand"]
-  297 -> 110 [style=dashed label="OperandName"]
-  297 -> 111 [style=dashed label="int_lit"]
-  297 -> 112 [style=dashed label="float_lit"]
-  297 -> 114 [style=dashed label="Literal"]
-  297 -> 115 [style=dashed label="string_lit"]
-  297 -> 116 [style=dashed label="byte_lit"]
-  297 -> 117 [style=dashed label="BasicLit"]
-  297 -> 118 [style=dashed label="FunctionLit"]
-  297 -> 289 [style=dashed label="PrimaryExpr"]
-  298 [label="State 298\n\l144 KeyValList: KeyValList COMMA Expression COLON Expression •\l"]
-  298 -> "298R144" [style=solid]
- "298R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
-  299 [label="State 299\n\l 92 ForStmt: FOR OPENB Condition Block CLOSEB •\l"]
-  299 -> "299R92" [style=solid]
- "299R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
-  300 [label="State 300\n\l 93 ForStmt: FOR OPENB ForClause Block CLOSEB •\l"]
-  300 -> "300R93" [style=solid]
- "300R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
-  301 [label="State 301\n\l 95 ForClause: InitStmt SEMICOLON Condition • SEMICOLON PostStmt\l"]
-  301 -> 307 [style=solid label="SEMICOLON"]
-  302 [label="State 302\n\l 94 Condition: Expression •\l"]
-  302 -> "302R94" [style=solid]
- "302R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
-  303 [label="State 303\n\l 87 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression • Block CLOSEB\l 88       | IF OPENB SimpleStmt SEMICOLON Expression • Block ELSE IfStmt CLOSEB\l 89       | IF OPENB SimpleStmt SEMICOLON Expression • Block ELSE Block CLOSEB\l"]
-  303 -> 137 [style=solid label="LBRACE"]
-  303 -> 308 [style=dashed label="Block"]
-  304 [label="State 304\n\l 90 IfStmt: IF OPENB Expression Block ELSE • IfStmt CLOSEB\l 91       | IF OPENB Expression Block ELSE • Block CLOSEB\l"]
-  304 -> 213 [style=solid label="IF"]
-  304 -> 137 [style=solid label="LBRACE"]
-  304 -> 309 [style=dashed label="Block"]
-  304 -> 310 [style=dashed label="IfStmt"]
-  305 [label="State 305\n\l 86 IfStmt: IF OPENB Expression Block CLOSEB •\l"]
-  305 -> "305R86" [style=solid]
- "305R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
-  306 [label="State 306\n\l 39 ArgumentList: ArgumentList COMMA Arguments •\l"]
-  306 -> "306R39" [style=solid]
- "306R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
-  307 [label="State 307\n\l 95 ForClause: InitStmt SEMICOLON Condition SEMICOLON • PostStmt\l"]
-  307 -> 97 [style=solid label="FUNC"]
-  307 -> 98 [style=solid label="IDENTIFIER"]
-  307 -> 99 [style=solid label="BYTE"]
-  307 -> 11 [style=solid label="STRING"]
-  307 -> 100 [style=solid label="INTEGER"]
-  307 -> 101 [style=solid label="FLOAT"]
-  307 -> 102 [style=solid label="ADD"]
-  307 -> 103 [style=solid label="SUB"]
-  307 -> 104 [style=solid label="MUL"]
-  307 -> 105 [style=solid label="AND"]
-  307 -> 106 [style=solid label="NOT"]
-  307 -> 107 [style=solid label="XOR"]
-  307 -> 108 [style=solid label="LPAREN"]
-  307 -> 311 [style=dashed label="SimpleStmt"]
-  307 -> 220 [style=dashed label="EmptyStmt"]
-  307 -> 222 [style=dashed label="IncDecStmt"]
-  307 -> 223 [style=dashed label="Assignment"]
-  307 -> 109 [style=dashed label="Operand"]
-  307 -> 110 [style=dashed label="OperandName"]
-  307 -> 312 [style=dashed label="PostStmt"]
-  307 -> 111 [style=dashed label="int_lit"]
-  307 -> 112 [style=dashed label="float_lit"]
-  307 -> 233 [style=dashed label="ExpressionList"]
-  307 -> 114 [style=dashed label="Literal"]
-  307 -> 115 [style=dashed label="string_lit"]
-  307 -> 116 [style=dashed label="byte_lit"]
-  307 -> 117 [style=dashed label="BasicLit"]
-  307 -> 118 [style=dashed label="FunctionLit"]
-  307 -> 119 [style=dashed label="PrimaryExpr"]
-  307 -> 235 [style=dashed label="Expression"]
-  307 -> 121 [style=dashed label="Expression1"]
-  307 -> 122 [style=dashed label="Expression2"]
-  307 -> 123 [style=dashed label="Expression3"]
-  307 -> 124 [style=dashed label="Expression4"]
-  307 -> 125 [style=dashed label="Expression5"]
-  307 -> 126 [style=dashed label="UnaryExpr"]
-  307 -> 127 [style=dashed label="unary_op"]
-  307 -> "307R21" [style=solid]
- "307R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
-  308 [label="State 308\n\l 87 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block • CLOSEB\l 88       | IF OPENB SimpleStmt SEMICOLON Expression Block • ELSE IfStmt CLOSEB\l 89       | IF OPENB SimpleStmt SEMICOLON Expression Block • ELSE Block CLOSEB\l"]
-  308 -> 313 [style=solid label="ELSE"]
-  308 -> 314 [style=dashed label="CLOSEB"]
-  308 -> "308R4" [style=solid]
- "308R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  309 [label="State 309\n\l 91 IfStmt: IF OPENB Expression Block ELSE Block • CLOSEB\l"]
-  309 -> 315 [style=dashed label="CLOSEB"]
-  309 -> "309R4" [style=solid]
- "309R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  310 [label="State 310\n\l 90 IfStmt: IF OPENB Expression Block ELSE IfStmt • CLOSEB\l"]
-  310 -> 316 [style=dashed label="CLOSEB"]
-  310 -> "310R4" [style=solid]
- "310R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  311 [label="State 311\n\l 97 PostStmt: SimpleStmt •\l"]
-  311 -> "311R97" [style=solid]
- "311R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
-  312 [label="State 312\n\l 95 ForClause: InitStmt SEMICOLON Condition SEMICOLON PostStmt •\l"]
-  312 -> "312R95" [style=solid]
- "312R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
-  313 [label="State 313\n\l 88 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE • IfStmt CLOSEB\l 89       | IF OPENB SimpleStmt SEMICOLON Expression Block ELSE • Block CLOSEB\l"]
-  313 -> 213 [style=solid label="IF"]
-  313 -> 137 [style=solid label="LBRACE"]
-  313 -> 317 [style=dashed label="Block"]
-  313 -> 318 [style=dashed label="IfStmt"]
-  314 [label="State 314\n\l 87 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block CLOSEB •\l"]
-  314 -> "314R87" [style=solid]
- "314R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
-  315 [label="State 315\n\l 91 IfStmt: IF OPENB Expression Block ELSE Block CLOSEB •\l"]
-  315 -> "315R91" [style=solid]
- "315R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
-  316 [label="State 316\n\l 90 IfStmt: IF OPENB Expression Block ELSE IfStmt CLOSEB •\l"]
-  316 -> "316R90" [style=solid]
- "316R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
-  317 [label="State 317\n\l 89 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE Block • CLOSEB\l"]
-  317 -> 319 [style=dashed label="CLOSEB"]
-  317 -> "317R4" [style=solid]
- "317R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  318 [label="State 318\n\l 88 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE IfStmt • CLOSEB\l"]
-  318 -> 320 [style=dashed label="CLOSEB"]
-  318 -> "318R4" [style=solid]
- "318R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
-  319 [label="State 319\n\l 89 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE Block CLOSEB •\l"]
-  319 -> "319R89" [style=solid]
- "319R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
-  320 [label="State 320\n\l 88 IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE IfStmt CLOSEB •\l"]
-  320 -> "320R88" [style=solid]
- "320R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
-}
diff --git a/parser.tab.cpp b/parser.tab.cpp
index 03f00f6..5405316 100644
--- a/parser.tab.cpp
+++ b/parser.tab.cpp
@@ -78,12 +78,9 @@ void yyerror (const char *s) {fprintf (stderr, "%s\n", s);}
 extern int yylineno;
 extern char* yytext;
 astnode *theprogram;
-umap<string, Type*> symtab;
-int currscope = 0;
-string fullscope = "0";


-#line 87 "parser.tab.cpp"
+#line 84 "parser.tab.cpp"

 # ifndef YY_CAST
 #  ifdef __cplusplus
@@ -115,14 +112,13 @@ string fullscope = "0";
 extern int yydebug;
 #endif
 /* "%code requires" blocks.  */
-#line 21 "src/parser.ypp"
+#line 18 "src/parser.ypp"

         #include <bits/stdc++.h>
 	#include "src/ast.h"
-	#include "src/symtab.h"
 	using namespace std;

-#line 126 "parser.tab.cpp"
+#line 122 "parser.tab.cpp"

 /* Token kinds.  */
 #ifndef YYTOKENTYPE
@@ -214,12 +210,12 @@ extern int yydebug;
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 union YYSTYPE
 {
-#line 28 "src/parser.ypp"
+#line 24 "src/parser.ypp"

 	Data* data;
 	astnode *node;

-#line 223 "parser.tab.cpp"
+#line 219 "parser.tab.cpp"

 };
 typedef union YYSTYPE YYSTYPE;
@@ -798,27 +794,27 @@ static const yytype_int8 yytranslate[] =
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_int16 yyrline[] =
 {
-       0,    73,    73,    77,    81,    88,    95,    96,   100,   101,
-     102,   103,   104,   105,   106,   107,   108,   109,   110,   113,
-     114,   115,   118,   123,   126,   127,   130,   134,   137,   138,
-     142,   143,   144,   147,   149,   153,   156,   159,   160,   163,
-     167,   168,   169,   172,   173,   177,   178,   181,   182,   185,
-     186,   187,   190,   191,   195,   196,   197,   201,   202,   206,
-     207,   210,   211,   215,   216,   220,   223,   224,   228,   229,
-     230,   234,   235,   236,   237,   241,   242,   246,   247,   248,
-     251,   255,   256,   259,   260,   263,   264,   268,   269,   270,
-     271,   272,   273,   277,   278,   281,   284,   287,   289,   292,
-     295,   299,   300,   304,   308,   312,   313,   317,   318,   322,
-     323,   327,   331,   334,   339,   343,   347,   348,   352,   353,
-     357,   358,   362,   363,   366,   367,   371,   375,   379,   380,
-     384,   388,   392,   393,   394,   395,   399,   403,   404,   405,
-     406,   407,   411,   414,   416,   417,   421,   424,   429,   438,
-     442,   443,   447,   448,   452,   453,   457,   458,   462,   463,
-     467,   468,   473,   474,   475,   476,   477,   478,   481,   482,
-     483,   484,   487,   488,   489,   490,   491,   492,   493,   496,
-     497,   498,   499,   500,   501,   505,   506,   507,   508,   509,
-     510,   514,   517,   521,   522,   523,   527,   528,   532,   533,
-     536,   537,   538,   541,   544
+       0,    69,    69,    73,    77,    81,    85,    86,    90,    91,
+      92,    93,    94,    95,    96,    97,    98,    99,   100,   103,
+     104,   105,   109,   113,   116,   117,   120,   124,   127,   128,
+     132,   133,   134,   137,   138,   141,   144,   147,   148,   151,
+     155,   156,   157,   160,   161,   165,   166,   169,   170,   173,
+     174,   175,   178,   179,   183,   184,   185,   189,   190,   194,
+     195,   198,   199,   203,   204,   208,   211,   212,   216,   217,
+     218,   222,   223,   224,   225,   229,   230,   234,   235,   236,
+     239,   243,   244,   247,   248,   251,   252,   256,   257,   258,
+     259,   260,   261,   265,   266,   269,   272,   275,   277,   280,
+     283,   287,   288,   292,   296,   300,   301,   305,   306,   310,
+     311,   315,   319,   322,   327,   331,   335,   336,   340,   341,
+     345,   346,   350,   351,   354,   355,   359,   363,   367,   368,
+     372,   376,   380,   381,   382,   383,   387,   391,   392,   393,
+     394,   395,   399,   403,   404,   405,   409,   412,   417,   426,
+     430,   431,   435,   436,   440,   441,   445,   446,   450,   451,
+     455,   456,   461,   462,   463,   464,   465,   466,   469,   470,
+     471,   472,   475,   476,   477,   478,   479,   480,   481,   484,
+     485,   486,   487,   488,   489,   493,   494,   495,   496,   497,
+     498,   502,   505,   509,   510,   511,   515,   516,   520,   521,
+     524,   525,   526,   529,   532
 };
 #endif

@@ -1916,1215 +1912,1219 @@ yyreduce:
   switch (yyn)
     {
   case 2: /* StartFile: PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar  */
-#line 73 "src/parser.ypp"
+#line 69 "src/parser.ypp"
                                                             { theprogram = new astnode("StartFile",false, {(yyvsp[-3].node),(yyvsp[-1].node),(yyvsp[0].node)});}
-#line 1922 "parser.tab.cpp"
+#line 1918 "parser.tab.cpp"
     break;

   case 3: /* Block: LBRACE OPENB StatementList CLOSEB RBRACE  */
-#line 77 "src/parser.ypp"
+#line 73 "src/parser.ypp"
                                                  { (yyval.node) = newId((yyvsp[-2].node), "Block"); }
-#line 1928 "parser.tab.cpp"
+#line 1924 "parser.tab.cpp"
     break;

   case 4: /* OPENB: %empty  */
-#line 81 "src/parser.ypp"
-                  {
-		currscope++;
-		fullscope = fullscope + "/" + to_string(currscope);
-	}
-#line 1937 "parser.tab.cpp"
+#line 77 "src/parser.ypp"
+                  { (yyval.node) = new astnode(); }
+#line 1930 "parser.tab.cpp"
     break;

   case 5: /* CLOSEB: %empty  */
-#line 88 "src/parser.ypp"
-                  {
-		currscope--;
-		fullscope = fullscope.substr(0, fullscope.find_last_of("/") );
-	}
-#line 1946 "parser.tab.cpp"
+#line 81 "src/parser.ypp"
+                  { (yyval.node) = new astnode(); }
+#line 1936 "parser.tab.cpp"
     break;

   case 6: /* StatementList: StatementList Statement SEMICOLON  */
-#line 95 "src/parser.ypp"
+#line 85 "src/parser.ypp"
                                       { (yyval.node) = new astnode("StatementList", false, {(yyvsp[-2].node), (yyvsp[-1].node)});}
-#line 1952 "parser.tab.cpp"
+#line 1942 "parser.tab.cpp"
     break;

   case 7: /* StatementList: Statement SEMICOLON  */
-#line 96 "src/parser.ypp"
+#line 86 "src/parser.ypp"
                           { (yyval.node) = newId((yyvsp[-1].node), "StatementList"); }
-#line 1958 "parser.tab.cpp"
+#line 1948 "parser.tab.cpp"
     break;

   case 8: /* Statement: Declaration  */
-#line 100 "src/parser.ypp"
+#line 90 "src/parser.ypp"
                     {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 1964 "parser.tab.cpp"
+#line 1954 "parser.tab.cpp"
     break;

   case 9: /* Statement: LabeledStmt  */
-#line 101 "src/parser.ypp"
+#line 91 "src/parser.ypp"
                       {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 1970 "parser.tab.cpp"
+#line 1960 "parser.tab.cpp"
     break;

   case 10: /* Statement: SimpleStmt  */
-#line 102 "src/parser.ypp"
+#line 92 "src/parser.ypp"
                      {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 1976 "parser.tab.cpp"
+#line 1966 "parser.tab.cpp"
     break;

   case 11: /* Statement: ReturnStmt  */
-#line 103 "src/parser.ypp"
+#line 93 "src/parser.ypp"
                      {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 1982 "parser.tab.cpp"
+#line 1972 "parser.tab.cpp"
     break;

   case 12: /* Statement: BreakStmt  */
-#line 104 "src/parser.ypp"
+#line 94 "src/parser.ypp"
                     {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 1988 "parser.tab.cpp"
+#line 1978 "parser.tab.cpp"
     break;

   case 13: /* Statement: ContinueStmt  */
-#line 105 "src/parser.ypp"
+#line 95 "src/parser.ypp"
                        {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 1994 "parser.tab.cpp"
+#line 1984 "parser.tab.cpp"
     break;

   case 14: /* Statement: Block  */
-#line 106 "src/parser.ypp"
+#line 96 "src/parser.ypp"
                 {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2000 "parser.tab.cpp"
+#line 1990 "parser.tab.cpp"
     break;

   case 15: /* Statement: IfStmt  */
-#line 107 "src/parser.ypp"
+#line 97 "src/parser.ypp"
                  {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2006 "parser.tab.cpp"
+#line 1996 "parser.tab.cpp"
     break;

   case 16: /* Statement: ForStmt  */
-#line 108 "src/parser.ypp"
+#line 98 "src/parser.ypp"
                   {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2012 "parser.tab.cpp"
+#line 2002 "parser.tab.cpp"
     break;

   case 17: /* Statement: FunctionCall  */
-#line 109 "src/parser.ypp"
+#line 99 "src/parser.ypp"
                        {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2018 "parser.tab.cpp"
+#line 2008 "parser.tab.cpp"
     break;

   case 18: /* Statement: FunctionStmt  */
-#line 110 "src/parser.ypp"
+#line 100 "src/parser.ypp"
                        {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2024 "parser.tab.cpp"
+#line 2014 "parser.tab.cpp"
     break;

   case 19: /* SimpleStmt: EmptyStmt  */
-#line 113 "src/parser.ypp"
+#line 103 "src/parser.ypp"
                   {(yyval.node) = newId((yyvsp[0].node), "SimpleStmt");}
-#line 2030 "parser.tab.cpp"
+#line 2020 "parser.tab.cpp"
     break;

   case 20: /* SimpleStmt: IncDecStmt  */
-#line 114 "src/parser.ypp"
+#line 104 "src/parser.ypp"
                      {(yyval.node) = newId((yyvsp[0].node), "SimpleStmt");}
-#line 2036 "parser.tab.cpp"
+#line 2026 "parser.tab.cpp"
     break;

   case 21: /* SimpleStmt: Assignment  */
-#line 115 "src/parser.ypp"
+#line 105 "src/parser.ypp"
                      {(yyval.node) = newId((yyvsp[0].node), "SimpleStmt");}
-#line 2042 "parser.tab.cpp"
+#line 2032 "parser.tab.cpp"
+    break;
+
+  case 22: /* EmptyStmt: %empty  */
+#line 109 "src/parser.ypp"
+                  { (yyval.node) = new astnode(); }
+#line 2038 "parser.tab.cpp"
     break;

   case 23: /* LabeledStmt: IDENTIFIER COLON Statement  */
-#line 123 "src/parser.ypp"
+#line 113 "src/parser.ypp"
                                    {(yyval.node) = new astnode("LabeledStmt", false, {new astnode(IDENTIFIER, (yyvsp[-2].data)), new astnode(COLON), (yyvsp[0].node)});}
-#line 2048 "parser.tab.cpp"
+#line 2044 "parser.tab.cpp"
     break;

   case 24: /* IncDecStmt: Expression INC  */
-#line 126 "src/parser.ypp"
+#line 116 "src/parser.ypp"
                        {(yyval.node) = new astnode("IncDecStmt", false, {(yyvsp[-1].node), new astnode(INC, (yyvsp[0].data))});}
-#line 2054 "parser.tab.cpp"
+#line 2050 "parser.tab.cpp"
     break;

   case 25: /* IncDecStmt: Expression DEC  */
-#line 127 "src/parser.ypp"
+#line 117 "src/parser.ypp"
                          {(yyval.node) = new astnode("IncDecStmt", false, {(yyvsp[-1].node), new astnode(INC, (yyvsp[0].data))});}
-#line 2060 "parser.tab.cpp"
+#line 2056 "parser.tab.cpp"
     break;

   case 26: /* Assignment: ExpressionList assign_op ExpressionList  */
-#line 130 "src/parser.ypp"
+#line 120 "src/parser.ypp"
                                                 {(yyval.node) = new astnode("Assignment", false, {(yyvsp[-2].node),(yyvsp[-1].node), (yyvsp[0].node)});}
-#line 2066 "parser.tab.cpp"
+#line 2062 "parser.tab.cpp"
     break;

   case 27: /* VarDecl: VAR VarSpec  */
-#line 134 "src/parser.ypp"
+#line 124 "src/parser.ypp"
                             {(yyval.node) = new astnode("VarDecl", false, {new astnode(VAR, (yyvsp[-1].data)), (yyvsp[0].node)});}
-#line 2072 "parser.tab.cpp"
+#line 2068 "parser.tab.cpp"
     break;

   case 28: /* VarSpec: IdentifierList Type ASSIGN ExpressionList  */
-#line 137 "src/parser.ypp"
+#line 127 "src/parser.ypp"
                                                           {(yyval.node) = new astnode("VarSpec", false, {(yyvsp[-3].node), (yyvsp[-2].node), new astnode(ASSIGN, (yyvsp[-1].data)),  (yyvsp[0].node)});}
-#line 2078 "parser.tab.cpp"
+#line 2074 "parser.tab.cpp"
     break;

   case 29: /* VarSpec: IdentifierList Type  */
-#line 138 "src/parser.ypp"
+#line 128 "src/parser.ypp"
                                       {(yyval.node) = new astnode("VarSpec", false, {(yyvsp[-1].node), (yyvsp[0].node)});}
-#line 2084 "parser.tab.cpp"
+#line 2080 "parser.tab.cpp"
     break;

   case 30: /* Declaration: ConstDecl  */
-#line 142 "src/parser.ypp"
+#line 132 "src/parser.ypp"
                   {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2090 "parser.tab.cpp"
+#line 2086 "parser.tab.cpp"
     break;

   case 31: /* Declaration: TypeDecl  */
-#line 143 "src/parser.ypp"
+#line 133 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2096 "parser.tab.cpp"
+#line 2092 "parser.tab.cpp"
     break;

   case 32: /* Declaration: VarDecl  */
-#line 144 "src/parser.ypp"
+#line 134 "src/parser.ypp"
                   {(yyval.node) = newId((yyvsp[0].node), "Declaration");}
-#line 2102 "parser.tab.cpp"
+#line 2098 "parser.tab.cpp"
     break;

   case 33: /* FunctionDecl: FUNC IDENTIFIER OPENB Function CLOSEB  */
-#line 147 "src/parser.ypp"
-                                                      { (yyval.node) = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, (yyvsp[-3].data)), (yyvsp[-1].node)});
-			symadd( fullscope + " " + (yyvsp[-3].data)->v_str, (yyvsp[-1].node)->type);  }
-#line 2109 "parser.tab.cpp"
+#line 137 "src/parser.ypp"
+                                                      { (yyval.node) = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, (yyvsp[-3].data)), (yyvsp[-1].node)});}
+#line 2104 "parser.tab.cpp"
     break;

   case 34: /* FunctionDecl: FUNC IDENTIFIER OPENB Signature CLOSEB  */
-#line 149 "src/parser.ypp"
-                                                         { (yyval.node) = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, (yyvsp[-3].data)), (yyvsp[-1].node)});
-		        symadd( fullscope + " " + (yyvsp[-3].data)->v_str, (yyvsp[-1].node)->type); }
-#line 2116 "parser.tab.cpp"
+#line 138 "src/parser.ypp"
+                                                         { (yyval.node) = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, (yyvsp[-3].data)), (yyvsp[-1].node)});}
+#line 2110 "parser.tab.cpp"
     break;

   case 35: /* Function: Signature FunctionBody  */
-#line 153 "src/parser.ypp"
+#line 141 "src/parser.ypp"
                                        {(yyval.node) = new astnode("Function", false, {(yyvsp[-1].node), (yyvsp[0].node)});}
-#line 2122 "parser.tab.cpp"
+#line 2116 "parser.tab.cpp"
     break;

   case 36: /* FunctionBody: Block  */
-#line 156 "src/parser.ypp"
+#line 144 "src/parser.ypp"
                       {(yyval.node) = newId((yyvsp[0].node), "FunctionBody");}
-#line 2128 "parser.tab.cpp"
+#line 2122 "parser.tab.cpp"
     break;

   case 37: /* FunctionStmt: VarDecl DEFINE FunctionCall  */
-#line 159 "src/parser.ypp"
+#line 147 "src/parser.ypp"
                                             {(yyval.node) = new astnode("FunctionStmt", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2134 "parser.tab.cpp"
+#line 2128 "parser.tab.cpp"
     break;

   case 38: /* FunctionStmt: IDENTIFIER DEFINE FunctionCall  */
-#line 160 "src/parser.ypp"
+#line 148 "src/parser.ypp"
                                                  {(yyval.node) = new astnode("FunctionStmt", false, {new astnode(IDENTIFIER, (yyvsp[-2].data)), (yyvsp[0].node)});}
-#line 2140 "parser.tab.cpp"
+#line 2134 "parser.tab.cpp"
     break;

   case 39: /* FunctionCall: PrimaryExpr LPAREN ArgumentList RPAREN  */
-#line 163 "src/parser.ypp"
+#line 151 "src/parser.ypp"
                                                        {(yyval.node) = new astnode("FunctionCall", false, {(yyvsp[-3].node), (yyvsp[-1].node)});}
-#line 2146 "parser.tab.cpp"
+#line 2140 "parser.tab.cpp"
     break;

   case 40: /* ArgumentList: ArgumentList COMMA Arguments  */
-#line 167 "src/parser.ypp"
+#line 155 "src/parser.ypp"
                                              {(yyval.node) = new astnode("ArgumentList", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2152 "parser.tab.cpp"
+#line 2146 "parser.tab.cpp"
     break;

   case 41: /* ArgumentList: Arguments  */
-#line 168 "src/parser.ypp"
+#line 156 "src/parser.ypp"
                             {(yyval.node) = newId((yyvsp[0].node), "ArgumentList");}
-#line 2158 "parser.tab.cpp"
+#line 2152 "parser.tab.cpp"
     break;

   case 42: /* ArgumentList: %empty  */
-#line 169 "src/parser.ypp"
+#line 157 "src/parser.ypp"
                             { (yyval.node) = new astnode();}
-#line 2164 "parser.tab.cpp"
+#line 2158 "parser.tab.cpp"
     break;

   case 43: /* Arguments: PrimaryExpr  */
-#line 172 "src/parser.ypp"
+#line 160 "src/parser.ypp"
                             {(yyval.node) = newId((yyvsp[0].node), "Arguments");}
-#line 2170 "parser.tab.cpp"
+#line 2164 "parser.tab.cpp"
     break;

   case 44: /* Arguments: FunctionCall  */
-#line 173 "src/parser.ypp"
+#line 161 "src/parser.ypp"
                                {(yyval.node) = newId((yyvsp[0].node), "Arguments");}
-#line 2176 "parser.tab.cpp"
+#line 2170 "parser.tab.cpp"
     break;

   case 45: /* Signature: Parameters  */
-#line 177 "src/parser.ypp"
+#line 165 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "Signature");}
-#line 2182 "parser.tab.cpp"
+#line 2176 "parser.tab.cpp"
     break;

   case 46: /* Signature: Parameters Result  */
-#line 178 "src/parser.ypp"
+#line 166 "src/parser.ypp"
                             {(yyval.node) = new astnode("Signature", false, {(yyvsp[-1].node), (yyvsp[0].node)});}
-#line 2188 "parser.tab.cpp"
+#line 2182 "parser.tab.cpp"
     break;

   case 47: /* Result: LPAREN TypeList RPAREN  */
-#line 181 "src/parser.ypp"
+#line 169 "src/parser.ypp"
                                {(yyval.node) = newId((yyvsp[-1].node), "Result");}
-#line 2194 "parser.tab.cpp"
+#line 2188 "parser.tab.cpp"
     break;

   case 48: /* Result: Type  */
-#line 182 "src/parser.ypp"
+#line 170 "src/parser.ypp"
                {(yyval.node) = newId((yyvsp[0].node), "Result");}
-#line 2200 "parser.tab.cpp"
+#line 2194 "parser.tab.cpp"
     break;

   case 49: /* Parameters: LPAREN RPAREN  */
-#line 185 "src/parser.ypp"
+#line 173 "src/parser.ypp"
                       {(yyval.node) = new astnode(LPAREN);}
-#line 2206 "parser.tab.cpp"
+#line 2200 "parser.tab.cpp"
     break;

   case 50: /* Parameters: LPAREN ParameterDeclStar RPAREN  */
-#line 186 "src/parser.ypp"
+#line 174 "src/parser.ypp"
                                           {(yyval.node) = newId((yyvsp[-1].node), "Parameters");}
-#line 2212 "parser.tab.cpp"
+#line 2206 "parser.tab.cpp"
     break;

   case 51: /* Parameters: LPAREN ParameterDeclStar COMMA RPAREN  */
-#line 187 "src/parser.ypp"
+#line 175 "src/parser.ypp"
                                                 {(yyval.node) = newId((yyvsp[-2].node), "Parameters");}
-#line 2218 "parser.tab.cpp"
+#line 2212 "parser.tab.cpp"
     break;

   case 52: /* ParameterDeclStar: ParameterDecl  */
-#line 190 "src/parser.ypp"
+#line 178 "src/parser.ypp"
                       {(yyval.node) = newId((yyvsp[0].node), "ParameterDeclStar");}
-#line 2224 "parser.tab.cpp"
+#line 2218 "parser.tab.cpp"
     break;

   case 53: /* ParameterDeclStar: ParameterDeclStar COMMA ParameterDecl  */
-#line 191 "src/parser.ypp"
+#line 179 "src/parser.ypp"
                                                 {(yyval.node) = new astnode("ParameterDeclStar", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2230 "parser.tab.cpp"
+#line 2224 "parser.tab.cpp"
     break;

   case 54: /* ParameterDecl: IdentifierList Type  */
-#line 195 "src/parser.ypp"
+#line 183 "src/parser.ypp"
                             {(yyval.node) = new astnode("ParameterDecl", false, {(yyvsp[-1].node), (yyvsp[0].node)});}
-#line 2236 "parser.tab.cpp"
+#line 2230 "parser.tab.cpp"
     break;

   case 55: /* ParameterDecl: IdentifierList ELLIPSIS Type  */
-#line 196 "src/parser.ypp"
+#line 184 "src/parser.ypp"
                                         {(yyval.node) = new astnode("ParameterDecl", false, {(yyvsp[-2].node), new astnode(ELLIPSIS,(yyvsp[-1].data)), (yyvsp[0].node)});}
-#line 2242 "parser.tab.cpp"
+#line 2236 "parser.tab.cpp"
     break;

   case 56: /* ParameterDecl: ELLIPSIS Type  */
-#line 197 "src/parser.ypp"
+#line 185 "src/parser.ypp"
                         {(yyval.node) = new astnode("ParameterDecl", false, {new astnode(ELLIPSIS, (yyvsp[-1].data)), (yyvsp[0].node)});}
-#line 2248 "parser.tab.cpp"
+#line 2242 "parser.tab.cpp"
     break;

   case 57: /* TypeList: TypeList COMMA Type  */
-#line 201 "src/parser.ypp"
+#line 189 "src/parser.ypp"
                         {(yyval.node) = new astnode("TypeList", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2254 "parser.tab.cpp"
+#line 2248 "parser.tab.cpp"
     break;

   case 58: /* TypeList: Type  */
-#line 202 "src/parser.ypp"
+#line 190 "src/parser.ypp"
            {(yyval.node) = new astnode("TypeList", false, {(yyvsp[0].node)});}
-#line 2260 "parser.tab.cpp"
+#line 2254 "parser.tab.cpp"
     break;

   case 59: /* IdentifierList: IDENTIFIER IdentifierLIST  */
-#line 206 "src/parser.ypp"
+#line 194 "src/parser.ypp"
                                           {(yyval.node) = new astnode("IdentifierList", false, {new astnode(IDENTIFIER, (yyvsp[-1].data)), (yyvsp[0].node)});}
-#line 2266 "parser.tab.cpp"
+#line 2260 "parser.tab.cpp"
     break;

   case 60: /* IdentifierList: IDENTIFIER  */
-#line 207 "src/parser.ypp"
+#line 195 "src/parser.ypp"
                              {(yyval.node) = new astnode(IDENTIFIER, (yyvsp[0].data));}
-#line 2272 "parser.tab.cpp"
+#line 2266 "parser.tab.cpp"
     break;

   case 61: /* IdentifierLIST: IdentifierLIST COMMA IDENTIFIER  */
-#line 210 "src/parser.ypp"
+#line 198 "src/parser.ypp"
                                                 {(yyval.node) = newId((yyvsp[-2].node), "IdentifierLIST");}
-#line 2278 "parser.tab.cpp"
+#line 2272 "parser.tab.cpp"
     break;

   case 62: /* IdentifierLIST: COMMA IDENTIFIER  */
-#line 211 "src/parser.ypp"
+#line 199 "src/parser.ypp"
                                    {(yyval.node) = new astnode(IDENTIFIER, (yyvsp[0].data));}
-#line 2284 "parser.tab.cpp"
+#line 2278 "parser.tab.cpp"
     break;

   case 63: /* MethodDecl: FUNC Receiver IDENTIFIER Function  */
-#line 215 "src/parser.ypp"
+#line 203 "src/parser.ypp"
                                           {(yyval.node) = new astnode("MethodDecl", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2290 "parser.tab.cpp"
+#line 2284 "parser.tab.cpp"
     break;

   case 64: /* MethodDecl: FUNC Receiver IDENTIFIER Signature  */
-#line 216 "src/parser.ypp"
+#line 204 "src/parser.ypp"
                                              {(yyval.node) = new astnode("MethodDecl", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2296 "parser.tab.cpp"
+#line 2290 "parser.tab.cpp"
     break;

   case 65: /* Receiver: Parameters  */
-#line 220 "src/parser.ypp"
+#line 208 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "Receiver");}
-#line 2302 "parser.tab.cpp"
+#line 2296 "parser.tab.cpp"
     break;

   case 66: /* TopLevelDeclStar: TopLevelDeclStar SEMICOLON TopLevelDecl  */
-#line 223 "src/parser.ypp"
+#line 211 "src/parser.ypp"
                                                            {(yyval.node) = new astnode("TopLevelDeclStar", false, {(yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2308 "parser.tab.cpp"
+#line 2302 "parser.tab.cpp"
     break;

   case 67: /* TopLevelDeclStar: TopLevelDecl  */
-#line 224 "src/parser.ypp"
+#line 212 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "TopLevelDeclStar");}
-#line 2314 "parser.tab.cpp"
+#line 2308 "parser.tab.cpp"
     break;

   case 68: /* TopLevelDecl: Declaration  */
-#line 228 "src/parser.ypp"
+#line 216 "src/parser.ypp"
                     {(yyval.node) = newId((yyvsp[0].node), "TopLevelDecl");}
-#line 2320 "parser.tab.cpp"
+#line 2314 "parser.tab.cpp"
     break;

   case 69: /* TopLevelDecl: FunctionDecl  */
-#line 229 "src/parser.ypp"
+#line 217 "src/parser.ypp"
                        {(yyval.node) = newId((yyvsp[0].node), "TopLevelDecl");}
-#line 2326 "parser.tab.cpp"
+#line 2320 "parser.tab.cpp"
     break;

   case 70: /* TopLevelDecl: MethodDecl  */
-#line 230 "src/parser.ypp"
+#line 218 "src/parser.ypp"
                      {(yyval.node) = newId((yyvsp[0].node), "TopLevelDecl");}
-#line 2332 "parser.tab.cpp"
+#line 2326 "parser.tab.cpp"
     break;

   case 71: /* TypeLit: ArrayType  */
-#line 234 "src/parser.ypp"
+#line 222 "src/parser.ypp"
                   {(yyval.node) = newId((yyvsp[0].node), "TypeLit");}
-#line 2338 "parser.tab.cpp"
+#line 2332 "parser.tab.cpp"
     break;

   case 72: /* TypeLit: StructType  */
-#line 235 "src/parser.ypp"
+#line 223 "src/parser.ypp"
                      {(yyval.node) = newId((yyvsp[0].node), "TypeLit");}
-#line 2344 "parser.tab.cpp"
+#line 2338 "parser.tab.cpp"
     break;

   case 73: /* TypeLit: PointerType  */
-#line 236 "src/parser.ypp"
+#line 224 "src/parser.ypp"
                       {(yyval.node) = newId((yyvsp[0].node), "TypeLit");}
-#line 2350 "parser.tab.cpp"
+#line 2344 "parser.tab.cpp"
     break;

   case 74: /* TypeLit: FunctionType  */
-#line 237 "src/parser.ypp"
+#line 225 "src/parser.ypp"
                        {(yyval.node) = newId((yyvsp[0].node), "TypeLit");}
-#line 2356 "parser.tab.cpp"
+#line 2350 "parser.tab.cpp"
     break;

   case 75: /* Type: TypeName  */
-#line 241 "src/parser.ypp"
+#line 229 "src/parser.ypp"
                  {(yyval.node) = newId((yyvsp[0].node), "Type");}
-#line 2362 "parser.tab.cpp"
+#line 2356 "parser.tab.cpp"
     break;

   case 76: /* Type: TypeLit  */
-#line 242 "src/parser.ypp"
+#line 230 "src/parser.ypp"
                   {(yyval.node) = newId((yyvsp[0].node), "Type");}
-#line 2368 "parser.tab.cpp"
+#line 2362 "parser.tab.cpp"
     break;

   case 77: /* Operand: Literal  */
-#line 246 "src/parser.ypp"
+#line 234 "src/parser.ypp"
                 {(yyval.node) = newId((yyvsp[0].node), "Operand");}
-#line 2374 "parser.tab.cpp"
+#line 2368 "parser.tab.cpp"
     break;

   case 78: /* Operand: OperandName  */
-#line 247 "src/parser.ypp"
+#line 235 "src/parser.ypp"
                       {(yyval.node) = newId((yyvsp[0].node), "Operand");}
-#line 2380 "parser.tab.cpp"
+#line 2374 "parser.tab.cpp"
     break;

   case 79: /* Operand: LPAREN Expression RPAREN  */
-#line 248 "src/parser.ypp"
+#line 236 "src/parser.ypp"
                                    {(yyval.node) = newId((yyvsp[-1].node), "Operand");}
-#line 2386 "parser.tab.cpp"
+#line 2380 "parser.tab.cpp"
     break;

   case 80: /* OperandName: IDENTIFIER  */
-#line 251 "src/parser.ypp"
+#line 239 "src/parser.ypp"
                    {(yyval.node) = new astnode(IDENTIFIER);}
-#line 2392 "parser.tab.cpp"
+#line 2386 "parser.tab.cpp"
     break;

   case 81: /* ReturnStmt: RETURN Expression  */
-#line 255 "src/parser.ypp"
+#line 243 "src/parser.ypp"
                           {(yyval.node) = newId((yyvsp[0].node), "ReturnStmt");}
-#line 2398 "parser.tab.cpp"
+#line 2392 "parser.tab.cpp"
     break;

   case 82: /* ReturnStmt: RETURN  */
-#line 256 "src/parser.ypp"
+#line 244 "src/parser.ypp"
                  {(yyval.node) = new astnode(RETURN);}
-#line 2404 "parser.tab.cpp"
+#line 2398 "parser.tab.cpp"
     break;

   case 83: /* BreakStmt: BREAK IDENTIFIER  */
-#line 259 "src/parser.ypp"
+#line 247 "src/parser.ypp"
                          {(yyval.node) = new astnode("BreakStmt", false, {new astnode(BREAK, (yyvsp[-1].data)), new astnode(IDENTIFIER, (yyvsp[0].data))});}
-#line 2410 "parser.tab.cpp"
+#line 2404 "parser.tab.cpp"
     break;

   case 84: /* BreakStmt: BREAK  */
-#line 260 "src/parser.ypp"
+#line 248 "src/parser.ypp"
                 {(yyval.node) = new astnode(BREAK);}
-#line 2416 "parser.tab.cpp"
+#line 2410 "parser.tab.cpp"
     break;

   case 85: /* ContinueStmt: CONTINUE IDENTIFIER  */
-#line 263 "src/parser.ypp"
+#line 251 "src/parser.ypp"
                             {(yyval.node) = new astnode("ContinueStmt", false, {new astnode(BREAK, (yyvsp[-1].data)), new astnode(IDENTIFIER, (yyvsp[0].data))});}
-#line 2422 "parser.tab.cpp"
+#line 2416 "parser.tab.cpp"
     break;

   case 86: /* ContinueStmt: CONTINUE  */
-#line 264 "src/parser.ypp"
+#line 252 "src/parser.ypp"
                    {(yyval.node) = new astnode(CONTINUE);}
-#line 2428 "parser.tab.cpp"
+#line 2422 "parser.tab.cpp"
     break;

   case 87: /* IfStmt: IF OPENB Expression Block CLOSEB  */
-#line 268 "src/parser.ypp"
+#line 256 "src/parser.ypp"
                                          {(yyval.node) = new astnode("IfStmt", false, {(yyvsp[-2].node), (yyvsp[-1].node)});}
-#line 2434 "parser.tab.cpp"
+#line 2428 "parser.tab.cpp"
     break;

   case 88: /* IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block CLOSEB  */
-#line 269 "src/parser.ypp"
+#line 257 "src/parser.ypp"
                                                                {(yyval.node) = new astnode("IfStmt", false, {(yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node)});}
-#line 2440 "parser.tab.cpp"
+#line 2434 "parser.tab.cpp"
     break;

   case 89: /* IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE IfStmt CLOSEB  */
-#line 270 "src/parser.ypp"
+#line 258 "src/parser.ypp"
                                                                            {(yyval.node) = new astnode("IfStmt", false, {(yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-3].node), (yyvsp[-1].node)});}
-#line 2446 "parser.tab.cpp"
+#line 2440 "parser.tab.cpp"
     break;

   case 90: /* IfStmt: IF OPENB SimpleStmt SEMICOLON Expression Block ELSE Block CLOSEB  */
-#line 271 "src/parser.ypp"
+#line 259 "src/parser.ypp"
                                                                            {(yyval.node) = new astnode("IfStmt", false, {(yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-3].node), (yyvsp[-1].node)});}
-#line 2452 "parser.tab.cpp"
+#line 2446 "parser.tab.cpp"
     break;

   case 91: /* IfStmt: IF OPENB Expression Block ELSE IfStmt CLOSEB  */
-#line 272 "src/parser.ypp"
+#line 260 "src/parser.ypp"
                                                       {(yyval.node) = new astnode("IfStmt", false, {(yyvsp[-4].node), (yyvsp[-3].node), (yyvsp[-1].node)});}
-#line 2458 "parser.tab.cpp"
+#line 2452 "parser.tab.cpp"
     break;

   case 92: /* IfStmt: IF OPENB Expression Block ELSE Block CLOSEB  */
-#line 273 "src/parser.ypp"
+#line 261 "src/parser.ypp"
                                                       {(yyval.node) = new astnode("IfStmt", false, {(yyvsp[-4].node), (yyvsp[-3].node), (yyvsp[-1].node)});}
-#line 2464 "parser.tab.cpp"
+#line 2458 "parser.tab.cpp"
     break;

   case 93: /* ForStmt: FOR OPENB Condition Block CLOSEB  */
-#line 277 "src/parser.ypp"
+#line 265 "src/parser.ypp"
                                          {(yyval.node) = new astnode("ForStmt", false, {(yyvsp[-2].node), (yyvsp[-1].node)});}
-#line 2470 "parser.tab.cpp"
+#line 2464 "parser.tab.cpp"
     break;

   case 94: /* ForStmt: FOR OPENB ForClause Block CLOSEB  */
-#line 278 "src/parser.ypp"
+#line 266 "src/parser.ypp"
                                           {(yyval.node) = new astnode("ForStmt", false, {(yyvsp[-2].node), (yyvsp[-1].node)});}
-#line 2476 "parser.tab.cpp"
+#line 2470 "parser.tab.cpp"
     break;

   case 95: /* Condition: Expression  */
-#line 281 "src/parser.ypp"
+#line 269 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "Condition");}
-#line 2482 "parser.tab.cpp"
+#line 2476 "parser.tab.cpp"
     break;

   case 96: /* ForClause: InitStmt SEMICOLON Condition SEMICOLON PostStmt  */
-#line 284 "src/parser.ypp"
+#line 272 "src/parser.ypp"
                                                         {(yyval.node) = new astnode("ForClause", false, {(yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)});}
-#line 2488 "parser.tab.cpp"
+#line 2482 "parser.tab.cpp"
     break;

   case 97: /* InitStmt: SimpleStmt  */
-#line 287 "src/parser.ypp"
+#line 275 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "InitStmt");}
-#line 2494 "parser.tab.cpp"
+#line 2488 "parser.tab.cpp"
     break;

   case 98: /* PostStmt: SimpleStmt  */
-#line 289 "src/parser.ypp"
+#line 277 "src/parser.ypp"
                    {(yyval.node) = newId((yyvsp[0].node), "InitStmt");}
-#line 2500 "parser.tab.cpp"
+#line 2494 "parser.tab.cpp"
     break;

   case 99: /* int_lit: INTEGER  */
-#line 292 "src/parser.ypp"
+#line 280 "src/parser.ypp"
                  { (yyval.node) = new astnode(INTEGER,(yyvsp[0].data));}
-#line 2506 "parser.tab.cpp"
+#line 2500 "parser.tab.cpp"
     break;

   case 100: /* float_lit: FLOAT  */
-#line 295 "src/parser.ypp"
+#line 283 "src/parser.ypp"
                 { (yyval.node) = new astnode(FLOAT,(yyvsp[0].data));}
-#line 2512 "parser.tab.cpp"
+#line 2506 "parser.tab.cpp"
     break;

   case 101: /* TypeName: IDENTIFIER  */
-#line 299 "src/parser.ypp"
+#line 287 "src/parser.ypp"
                    { (yyval.node) = new astnode(IDENTIFIER,(yyvsp[0].data));}
-#line 2518 "parser.tab.cpp"
+#line 2512 "parser.tab.cpp"
     break;

   case 102: /* TypeName: VAR_TYPE  */
-#line 300 "src/parser.ypp"
+#line 288 "src/parser.ypp"
                    { (yyval.node) = new astnode(VAR_TYPE,(yyvsp[0].data));}
-#line 2524 "parser.tab.cpp"
+#line 2518 "parser.tab.cpp"
     break;

   case 103: /* ArrayType: LBRACK ArrayLength RBRACK Type  */
-#line 304 "src/parser.ypp"
+#line 292 "src/parser.ypp"
                                        { (yyval.node) = new astnode("",false,{(yyvsp[-2].node),(yyvsp[0].node)}); }
-#line 2530 "parser.tab.cpp"
+#line 2524 "parser.tab.cpp"
     break;

   case 104: /* ArrayLength: Expression  */
-#line 308 "src/parser.ypp"
+#line 296 "src/parser.ypp"
                    { (yyval.node) = newId((yyvsp[0].node), "ArrayLength"); }
-#line 2536 "parser.tab.cpp"
+#line 2530 "parser.tab.cpp"
     break;

   case 105: /* StructType: STRUCT LBRACE FieldDeclStar RBRACE  */
-#line 312 "src/parser.ypp"
+#line 300 "src/parser.ypp"
                                        { (yyval.node) = newId((yyvsp[-1].node), "StructType"); }
-#line 2542 "parser.tab.cpp"
+#line 2536 "parser.tab.cpp"
     break;

   case 106: /* StructType: STRUCT LBRACE RBRACE  */
-#line 313 "src/parser.ypp"
+#line 301 "src/parser.ypp"
                            { (yyval.node) = new astnode(STRUCT, (yyvsp[-2].data)); }
-#line 2548 "parser.tab.cpp"
+#line 2542 "parser.tab.cpp"
     break;

   case 107: /* FieldDeclStar: FieldDecl SEMICOLON  */
-#line 317 "src/parser.ypp"
+#line 305 "src/parser.ypp"
                         { (yyval.node) = newId((yyvsp[-1].node), "FieldDeclStar"); }
-#line 2554 "parser.tab.cpp"
+#line 2548 "parser.tab.cpp"
     break;

   case 108: /* FieldDeclStar: FieldDeclStar FieldDecl SEMICOLON  */
-#line 318 "src/parser.ypp"
+#line 306 "src/parser.ypp"
                                         { (yyval.node) = new astnode("FieldDeclStar",false,{(yyvsp[-2].node),(yyvsp[-1].node)}); }
-#line 2560 "parser.tab.cpp"
+#line 2554 "parser.tab.cpp"
     break;

   case 109: /* FieldDecl: IdentifierList Type  */
-#line 322 "src/parser.ypp"
+#line 310 "src/parser.ypp"
                             { (yyval.node) = new astnode("FieldDecl",false,{(yyvsp[-1].node),(yyvsp[0].node)}); }
-#line 2566 "parser.tab.cpp"
+#line 2560 "parser.tab.cpp"
     break;

   case 110: /* FieldDecl: IdentifierList Type Tag  */
-#line 323 "src/parser.ypp"
+#line 311 "src/parser.ypp"
                                   { (yyval.node) = new astnode("FieldDecl",false,{(yyvsp[-2].node),(yyvsp[-1].node),(yyvsp[0].node)}); }
-#line 2572 "parser.tab.cpp"
+#line 2566 "parser.tab.cpp"
     break;

   case 111: /* Tag: STRING  */
-#line 327 "src/parser.ypp"
+#line 315 "src/parser.ypp"
                { (yyval.node) = new astnode(new DefinedType("string"), STRING, (yyvsp[0].data));}
-#line 2578 "parser.tab.cpp"
+#line 2572 "parser.tab.cpp"
     break;

   case 112: /* PointerType: MUL BaseType  */
-#line 331 "src/parser.ypp"
+#line 319 "src/parser.ypp"
                      { (yyval.node) = new astnode(new PointerType((yyvsp[0].node)->type),"PointerType",false,{(yyvsp[0].node)}); }
-#line 2584 "parser.tab.cpp"
+#line 2578 "parser.tab.cpp"
     break;

   case 113: /* BaseType: Type  */
-#line 334 "src/parser.ypp"
+#line 322 "src/parser.ypp"
              { (yyval.node) = new astnode((yyvsp[0].node)->type, "BaseType",false,{(yyvsp[0].node)}); }
-#line 2590 "parser.tab.cpp"
+#line 2584 "parser.tab.cpp"
     break;

   case 114: /* FunctionType: FUNC Signature  */
-#line 339 "src/parser.ypp"
+#line 327 "src/parser.ypp"
                        { (yyval.node) = newId((yyvsp[0].node), "FunctionType"); }
-#line 2596 "parser.tab.cpp"
+#line 2590 "parser.tab.cpp"
     break;

   case 115: /* ConstDecl: CONST ConstSpec  */
-#line 343 "src/parser.ypp"
+#line 331 "src/parser.ypp"
                                 { (yyval.node) = newId((yyvsp[0].node), "ConstDecl"); }
-#line 2602 "parser.tab.cpp"
+#line 2596 "parser.tab.cpp"
     break;

   case 116: /* ConstSpec: IDENTIFIER Type ASSIGN Expression  */
-#line 347 "src/parser.ypp"
+#line 335 "src/parser.ypp"
                                                   { (yyval.node) = new astnode("ConstSpec",false,{(yyvsp[-2].node),(yyvsp[0].node)}); }
-#line 2608 "parser.tab.cpp"
+#line 2602 "parser.tab.cpp"
     break;

   case 117: /* ConstSpec: IDENTIFIER Type  */
-#line 348 "src/parser.ypp"
+#line 336 "src/parser.ypp"
                                   { (yyval.node) = newId((yyvsp[0].node), "ConstSpec"); }
-#line 2614 "parser.tab.cpp"
+#line 2608 "parser.tab.cpp"
     break;

   case 118: /* ExpressionList: ExpressionList COMMA Expression  */
-#line 352 "src/parser.ypp"
+#line 340 "src/parser.ypp"
                                                 { (yyval.node) = new astnode("ExpressionList",false,{(yyvsp[-2].node),(yyvsp[0].node)}); }
-#line 2620 "parser.tab.cpp"
+#line 2614 "parser.tab.cpp"
     break;

   case 119: /* ExpressionList: Expression  */
-#line 353 "src/parser.ypp"
+#line 341 "src/parser.ypp"
                              { (yyval.node) = newId((yyvsp[0].node), "ExpressionList"); }
-#line 2626 "parser.tab.cpp"
+#line 2620 "parser.tab.cpp"
     break;

   case 120: /* TypeDecl: TYPE TypeSpec  */
-#line 357 "src/parser.ypp"
+#line 345 "src/parser.ypp"
                                { (yyval.node) = new astnode("TypeDecl",false,{new astnode(TYPE,(yyvsp[-1].data)),(yyvsp[0].node)}); }
-#line 2632 "parser.tab.cpp"
+#line 2626 "parser.tab.cpp"
     break;

   case 121: /* TypeDecl: TYPE LPAREN TypeSpecList RPAREN  */
-#line 358 "src/parser.ypp"
+#line 346 "src/parser.ypp"
                                                   { (yyval.node) = new astnode("TypeDecl",false,{new astnode(TYPE,(yyvsp[-3].data)), (yyvsp[-1].node)}); }
-#line 2638 "parser.tab.cpp"
+#line 2632 "parser.tab.cpp"
     break;

   case 122: /* TypeSpecList: TypeSpecList TypeSpec SEMICOLON  */
-#line 362 "src/parser.ypp"
+#line 350 "src/parser.ypp"
                                                 { (yyval.node) = new astnode("TypeSpecList",false,{(yyvsp[-2].node),(yyvsp[-1].node)}); }
-#line 2644 "parser.tab.cpp"
+#line 2638 "parser.tab.cpp"
     break;

   case 123: /* TypeSpecList: TypeSpec SEMICOLON  */
-#line 363 "src/parser.ypp"
+#line 351 "src/parser.ypp"
                                      { (yyval.node) = newId((yyvsp[-1].node), "TypeSpecList"); }
-#line 2650 "parser.tab.cpp"
+#line 2644 "parser.tab.cpp"
     break;

   case 124: /* TypeSpec: AliasDecl  */
-#line 366 "src/parser.ypp"
+#line 354 "src/parser.ypp"
                           { (yyval.node) = newId((yyvsp[0].node), "TypeSpec"); }
-#line 2656 "parser.tab.cpp"
+#line 2650 "parser.tab.cpp"
     break;

   case 125: /* TypeSpec: TypeDef  */
-#line 367 "src/parser.ypp"
+#line 355 "src/parser.ypp"
                           { (yyval.node) = newId((yyvsp[0].node), "TypeSpec"); }
-#line 2662 "parser.tab.cpp"
+#line 2656 "parser.tab.cpp"
     break;

   case 126: /* AliasDecl: IDENTIFIER ASSIGN Type  */
-#line 371 "src/parser.ypp"
+#line 359 "src/parser.ypp"
                                        { (yyval.node) = new astnode("AliasDecl",false,{new astnode(IDENTIFIER,(yyvsp[-2].data)), new astnode(ASSIGN,(yyvsp[-1].data)), (yyvsp[0].node)}); }
-#line 2668 "parser.tab.cpp"
+#line 2662 "parser.tab.cpp"
     break;

   case 127: /* TypeDef: IDENTIFIER Type  */
-#line 375 "src/parser.ypp"
+#line 363 "src/parser.ypp"
                                 { (yyval.node) = new astnode("TypeDef",false,{new astnode(IDENTIFIER,(yyvsp[-1].data)), (yyvsp[0].node)}); }
-#line 2674 "parser.tab.cpp"
+#line 2668 "parser.tab.cpp"
     break;

   case 128: /* Literal: BasicLit  */
-#line 379 "src/parser.ypp"
+#line 367 "src/parser.ypp"
                  { (yyval.node) = newId((yyvsp[0].node), "Literal"); }
-#line 2680 "parser.tab.cpp"
+#line 2674 "parser.tab.cpp"
     break;

   case 129: /* Literal: FunctionLit  */
-#line 380 "src/parser.ypp"
+#line 368 "src/parser.ypp"
                       { (yyval.node) = newId((yyvsp[0].node), "Literal"); }
-#line 2686 "parser.tab.cpp"
+#line 2680 "parser.tab.cpp"
     break;

   case 130: /* string_lit: STRING  */
-#line 384 "src/parser.ypp"
+#line 372 "src/parser.ypp"
                { new astnode(new PointerType(new DefinedType("string")) , STRING, (yyvsp[0].data));}
-#line 2692 "parser.tab.cpp"
+#line 2686 "parser.tab.cpp"
     break;

   case 131: /* byte_lit: BYTE  */
-#line 388 "src/parser.ypp"
+#line 376 "src/parser.ypp"
               { (yyval.node) = new astnode(new DefinedType("byte") , BYTE, (yyvsp[0].data));}
-#line 2698 "parser.tab.cpp"
+#line 2692 "parser.tab.cpp"
     break;

   case 132: /* BasicLit: int_lit  */
-#line 392 "src/parser.ypp"
+#line 380 "src/parser.ypp"
                 { (yyval.node) = newId((yyvsp[0].node), "BasicLit"); }
-#line 2704 "parser.tab.cpp"
+#line 2698 "parser.tab.cpp"
     break;

   case 133: /* BasicLit: float_lit  */
-#line 393 "src/parser.ypp"
+#line 381 "src/parser.ypp"
                     { (yyval.node) = newId((yyvsp[0].node), "BasicLit"); }
-#line 2710 "parser.tab.cpp"
+#line 2704 "parser.tab.cpp"
     break;

   case 134: /* BasicLit: string_lit  */
-#line 394 "src/parser.ypp"
+#line 382 "src/parser.ypp"
                      { (yyval.node) = newId((yyvsp[0].node), "BasicLit"); }
-#line 2716 "parser.tab.cpp"
+#line 2710 "parser.tab.cpp"
     break;

   case 135: /* BasicLit: byte_lit  */
-#line 395 "src/parser.ypp"
+#line 383 "src/parser.ypp"
                    { (yyval.node) = newId((yyvsp[0].node), "BasicLit"); }
-#line 2722 "parser.tab.cpp"
+#line 2716 "parser.tab.cpp"
     break;

   case 136: /* FunctionLit: FUNC Function  */
-#line 399 "src/parser.ypp"
+#line 387 "src/parser.ypp"
                       { (yyval.node) = new astnode("FunctionLit",false,{new astnode(FUNC,(yyvsp[-1].data)), (yyvsp[0].node)}); }
-#line 2728 "parser.tab.cpp"
+#line 2722 "parser.tab.cpp"
     break;

   case 137: /* PrimaryExpr: Operand  */
-#line 403 "src/parser.ypp"
+#line 391 "src/parser.ypp"
                 { (yyval.node) = newId((yyvsp[0].node), "PrimaryExpr"); }
-#line 2734 "parser.tab.cpp"
+#line 2728 "parser.tab.cpp"
     break;

   case 138: /* PrimaryExpr: PrimaryExpr Selector  */
-#line 404 "src/parser.ypp"
+#line 392 "src/parser.ypp"
                                { (yyval.node) = new astnode("PrimaryExpr",false,{(yyvsp[-1].node),(yyvsp[0].node)}); }
-#line 2740 "parser.tab.cpp"
+#line 2734 "parser.tab.cpp"
     break;

   case 139: /* PrimaryExpr: PrimaryExpr Index  */
-#line 405 "src/parser.ypp"
+#line 393 "src/parser.ypp"
                             { (yyval.node) = new astnode("PrimaryExpr",false,{(yyvsp[-1].node),(yyvsp[0].node)}); }
-#line 2746 "parser.tab.cpp"
+#line 2740 "parser.tab.cpp"
     break;

   case 140: /* PrimaryExpr: PrimaryExpr TypeAssertion  */
-#line 406 "src/parser.ypp"
+#line 394 "src/parser.ypp"
                                     { (yyval.node) = new astnode("PrimaryExpr",false,{(yyvsp[-1].node),(yyvsp[0].node)}); }
-#line 2752 "parser.tab.cpp"
+#line 2746 "parser.tab.cpp"
     break;

   case 141: /* PrimaryExpr: OperandName StructLiteral  */
-#line 407 "src/parser.ypp"
+#line 395 "src/parser.ypp"
                                     { (yyval.node) = new astnode("PrimaryExpr",false,{(yyvsp[-1].node),(yyvsp[0].node)}); }
-#line 2758 "parser.tab.cpp"
+#line 2752 "parser.tab.cpp"
     break;

   case 142: /* StructLiteral: LBRACE KeyValList RBRACE  */
-#line 411 "src/parser.ypp"
+#line 399 "src/parser.ypp"
                              { (yyval.node) = newId((yyvsp[-1].node), "StructLiteral"); }
+#line 2758 "parser.tab.cpp"
+    break;
+
+  case 143: /* KeyValList: %empty  */
+#line 403 "src/parser.ypp"
+                    { (yyval.node) = new astnode(); }
 #line 2764 "parser.tab.cpp"
     break;

   case 144: /* KeyValList: Expression COLON Expression  */
-#line 416 "src/parser.ypp"
+#line 404 "src/parser.ypp"
                                       { (yyval.node) = new astnode("",false,{(yyvsp[-2].node),(yyvsp[0].node)}); }
 #line 2770 "parser.tab.cpp"
     break;

   case 145: /* KeyValList: KeyValList COMMA Expression COLON Expression  */
-#line 417 "src/parser.ypp"
+#line 405 "src/parser.ypp"
                                                        { (yyval.node) = new astnode("",false,{(yyvsp[-4].node),(yyvsp[-2].node),(yyvsp[0].node)}); }
 #line 2776 "parser.tab.cpp"
     break;

   case 146: /* Selector: PERIOD IDENTIFIER  */
-#line 421 "src/parser.ypp"
+#line 409 "src/parser.ypp"
                           { (yyval.node) = new astnode("Selector",false,{new astnode(PERIOD,(yyvsp[-1].data)), new astnode(IDENTIFIER,(yyvsp[0].data))}); }
 #line 2782 "parser.tab.cpp"
     break;

   case 147: /* Index: LBRACK Expression RBRACK  */
-#line 424 "src/parser.ypp"
+#line 412 "src/parser.ypp"
                                  { (yyval.node) = newId((yyvsp[-1].node), "Index"); }
 #line 2788 "parser.tab.cpp"
     break;

   case 148: /* TypeAssertion: PERIOD LPAREN Type RPAREN  */
-#line 429 "src/parser.ypp"
+#line 417 "src/parser.ypp"
                                   { (yyval.node) = new astnode("TypeAssertion",false,{new astnode(PERIOD, (yyvsp[-3].data)), (yyvsp[-1].node)}); }
 #line 2794 "parser.tab.cpp"
     break;

   case 149: /* Expression: Expression1  */
-#line 438 "src/parser.ypp"
+#line 426 "src/parser.ypp"
                 { (yyval.node) = newId((yyvsp[0].node),"Expression");}
 #line 2800 "parser.tab.cpp"
     break;

   case 150: /* Expression1: Expression1 LOR Expression2  */
-#line 442 "src/parser.ypp"
+#line 430 "src/parser.ypp"
                                 { (yyval.node) = new astnode("Expression1",false,{(yyvsp[-2].node),new astnode(LOR),(yyvsp[0].node)}); }
 #line 2806 "parser.tab.cpp"
     break;

   case 151: /* Expression1: Expression2  */
-#line 443 "src/parser.ypp"
+#line 431 "src/parser.ypp"
                   { newId((yyvsp[0].node),"Expression1"); }
 #line 2812 "parser.tab.cpp"
     break;

   case 152: /* Expression2: Expression2 LAND Expression3  */
-#line 447 "src/parser.ypp"
+#line 435 "src/parser.ypp"
                                  { (yyval.node) = new astnode("Expression2",false,{(yyvsp[-2].node),new astnode(LAND),(yyvsp[0].node)}); }
 #line 2818 "parser.tab.cpp"
     break;

   case 153: /* Expression2: Expression3  */
-#line 448 "src/parser.ypp"
+#line 436 "src/parser.ypp"
                   { newId((yyvsp[0].node),"Expression2"); }
 #line 2824 "parser.tab.cpp"
     break;

   case 154: /* Expression3: Expression3 rel_op Expression4  */
-#line 452 "src/parser.ypp"
+#line 440 "src/parser.ypp"
                                    { (yyval.node) = new astnode("Expression3",false,{(yyvsp[-2].node),(yyvsp[-1].node),(yyvsp[0].node)}); }
 #line 2830 "parser.tab.cpp"
     break;

   case 155: /* Expression3: Expression4  */
-#line 453 "src/parser.ypp"
+#line 441 "src/parser.ypp"
                   { newId((yyvsp[0].node),"Expression3"); }
 #line 2836 "parser.tab.cpp"
     break;

   case 156: /* Expression4: Expression4 add_op Expression5  */
-#line 457 "src/parser.ypp"
+#line 445 "src/parser.ypp"
                                    { (yyval.node) = new astnode("Expression4",false,{(yyvsp[-2].node),(yyvsp[-1].node),(yyvsp[0].node)}); }
 #line 2842 "parser.tab.cpp"
     break;

   case 157: /* Expression4: Expression5  */
-#line 458 "src/parser.ypp"
+#line 446 "src/parser.ypp"
                   { newId((yyvsp[0].node),"Expression4"); }
 #line 2848 "parser.tab.cpp"
     break;

   case 158: /* Expression5: Expression5 mul_op PrimaryExpr  */
-#line 462 "src/parser.ypp"
+#line 450 "src/parser.ypp"
                                    { (yyval.node) = new astnode("Expression5",false,{(yyvsp[-2].node),(yyvsp[-1].node),(yyvsp[0].node)}); }
 #line 2854 "parser.tab.cpp"
     break;

   case 159: /* Expression5: UnaryExpr  */
-#line 463 "src/parser.ypp"
+#line 451 "src/parser.ypp"
                 { (yyval.node) = newId((yyvsp[0].node), "Expression5"); }
 #line 2860 "parser.tab.cpp"
     break;

   case 160: /* UnaryExpr: PrimaryExpr  */
-#line 467 "src/parser.ypp"
+#line 455 "src/parser.ypp"
                     { (yyval.node) = newId((yyvsp[0].node),"UnaryExpr"); }
 #line 2866 "parser.tab.cpp"
     break;

   case 161: /* UnaryExpr: unary_op PrimaryExpr  */
-#line 468 "src/parser.ypp"
+#line 456 "src/parser.ypp"
                                { (yyval.node) = new astnode("UnaryExpr",false,{(yyvsp[-1].node),(yyvsp[0].node)}); }
 #line 2872 "parser.tab.cpp"
     break;

   case 162: /* rel_op: EQL  */
-#line 473 "src/parser.ypp"
+#line 461 "src/parser.ypp"
               { (yyval.node) = new astnode(EQL);}
 #line 2878 "parser.tab.cpp"
     break;

   case 163: /* rel_op: NEQ  */
-#line 474 "src/parser.ypp"
+#line 462 "src/parser.ypp"
               { (yyval.node) = new astnode(NEQ);}
 #line 2884 "parser.tab.cpp"
     break;

   case 164: /* rel_op: LSS  */
-#line 475 "src/parser.ypp"
+#line 463 "src/parser.ypp"
               { (yyval.node) = new astnode(LSS);}
 #line 2890 "parser.tab.cpp"
     break;

   case 165: /* rel_op: LEQ  */
-#line 476 "src/parser.ypp"
+#line 464 "src/parser.ypp"
               { (yyval.node) = new astnode(LEQ);}
 #line 2896 "parser.tab.cpp"
     break;

   case 166: /* rel_op: GTR  */
-#line 477 "src/parser.ypp"
+#line 465 "src/parser.ypp"
               { (yyval.node) = new astnode(GTR);}
 #line 2902 "parser.tab.cpp"
     break;

   case 167: /* rel_op: GEQ  */
-#line 478 "src/parser.ypp"
+#line 466 "src/parser.ypp"
               { (yyval.node) = new astnode(GEQ);}
 #line 2908 "parser.tab.cpp"
     break;

   case 168: /* add_op: ADD  */
-#line 481 "src/parser.ypp"
+#line 469 "src/parser.ypp"
             { (yyval.node) = new astnode(ADD);}
 #line 2914 "parser.tab.cpp"
     break;

   case 169: /* add_op: SUB  */
-#line 482 "src/parser.ypp"
+#line 470 "src/parser.ypp"
               { (yyval.node) = new astnode(SUB);}
 #line 2920 "parser.tab.cpp"
     break;

   case 170: /* add_op: OR  */
-#line 483 "src/parser.ypp"
+#line 471 "src/parser.ypp"
               { (yyval.node) = new astnode(OR);}
 #line 2926 "parser.tab.cpp"
     break;

   case 171: /* add_op: XOR  */
-#line 484 "src/parser.ypp"
+#line 472 "src/parser.ypp"
               { (yyval.node) = new astnode(XOR);}
 #line 2932 "parser.tab.cpp"
     break;

   case 172: /* mul_op: MUL  */
-#line 487 "src/parser.ypp"
+#line 475 "src/parser.ypp"
               { (yyval.node) = new astnode(MUL);}
 #line 2938 "parser.tab.cpp"
     break;

   case 173: /* mul_op: QUO  */
-#line 488 "src/parser.ypp"
+#line 476 "src/parser.ypp"
               { (yyval.node) = new astnode(QUO);}
 #line 2944 "parser.tab.cpp"
     break;

   case 174: /* mul_op: REM  */
-#line 489 "src/parser.ypp"
+#line 477 "src/parser.ypp"
               { (yyval.node) = new astnode(REM);}
 #line 2950 "parser.tab.cpp"
     break;

   case 175: /* mul_op: SHL  */
-#line 490 "src/parser.ypp"
+#line 478 "src/parser.ypp"
               { (yyval.node) = new astnode(SHL);}
 #line 2956 "parser.tab.cpp"
     break;

   case 176: /* mul_op: SHR  */
-#line 491 "src/parser.ypp"
+#line 479 "src/parser.ypp"
               { (yyval.node) = new astnode(SHR);}
 #line 2962 "parser.tab.cpp"
     break;

   case 177: /* mul_op: AND  */
-#line 492 "src/parser.ypp"
+#line 480 "src/parser.ypp"
               { (yyval.node) = new astnode(AND);}
 #line 2968 "parser.tab.cpp"
     break;

   case 178: /* mul_op: AND_NOT  */
-#line 493 "src/parser.ypp"
+#line 481 "src/parser.ypp"
                    { (yyval.node) = new astnode(AND_NOT);}
 #line 2974 "parser.tab.cpp"
     break;

   case 179: /* unary_op: ADD  */
-#line 496 "src/parser.ypp"
+#line 484 "src/parser.ypp"
              { (yyval.node) = new astnode(ADD);}
 #line 2980 "parser.tab.cpp"
     break;

   case 180: /* unary_op: SUB  */
-#line 497 "src/parser.ypp"
+#line 485 "src/parser.ypp"
               { (yyval.node) = new astnode(SUB);}
 #line 2986 "parser.tab.cpp"
     break;

   case 181: /* unary_op: NOT  */
-#line 498 "src/parser.ypp"
+#line 486 "src/parser.ypp"
               { (yyval.node) = new astnode(NOT);}
 #line 2992 "parser.tab.cpp"
     break;

   case 182: /* unary_op: XOR  */
-#line 499 "src/parser.ypp"
+#line 487 "src/parser.ypp"
               { (yyval.node) = new astnode(XOR);}
 #line 2998 "parser.tab.cpp"
     break;

   case 183: /* unary_op: MUL  */
-#line 500 "src/parser.ypp"
+#line 488 "src/parser.ypp"
               { (yyval.node) = new astnode(MUL);}
 #line 3004 "parser.tab.cpp"
     break;

   case 184: /* unary_op: AND  */
-#line 501 "src/parser.ypp"
+#line 489 "src/parser.ypp"
               { (yyval.node) = new astnode(AND);}
 #line 3010 "parser.tab.cpp"
     break;

   case 185: /* assign_op: ASSIGN  */
-#line 505 "src/parser.ypp"
+#line 493 "src/parser.ypp"
                { (yyval.node) = new astnode(ASSIGN);}
 #line 3016 "parser.tab.cpp"
     break;

   case 186: /* assign_op: ADD_ASSIGN  */
-#line 506 "src/parser.ypp"
+#line 494 "src/parser.ypp"
                      { (yyval.node) = new astnode(ADD_ASSIGN);}
 #line 3022 "parser.tab.cpp"
     break;

   case 187: /* assign_op: SUB_ASSIGN  */
-#line 507 "src/parser.ypp"
+#line 495 "src/parser.ypp"
                      { (yyval.node) = new astnode(SUB_ASSIGN);}
 #line 3028 "parser.tab.cpp"
     break;

   case 188: /* assign_op: MUL_ASSIGN  */
-#line 508 "src/parser.ypp"
+#line 496 "src/parser.ypp"
                      { (yyval.node) = new astnode(MUL_ASSIGN);}
 #line 3034 "parser.tab.cpp"
     break;

   case 189: /* assign_op: QUO_ASSIGN  */
-#line 509 "src/parser.ypp"
+#line 497 "src/parser.ypp"
                      { (yyval.node) = new astnode(QUO_ASSIGN);}
 #line 3040 "parser.tab.cpp"
     break;

   case 190: /* assign_op: REM_ASSIGN  */
-#line 510 "src/parser.ypp"
+#line 498 "src/parser.ypp"
                      { (yyval.node) = new astnode(REM_ASSIGN);}
 #line 3046 "parser.tab.cpp"
     break;

   case 191: /* PackageClause: PACKAGE PackageName  */
-#line 514 "src/parser.ypp"
+#line 502 "src/parser.ypp"
                             { (yyval.node) = new astnode("PackageClause", false, {new astnode(PACKAGE), (yyvsp[0].node)});}
 #line 3052 "parser.tab.cpp"
     break;

   case 192: /* PackageName: IDENTIFIER  */
-#line 517 "src/parser.ypp"
+#line 505 "src/parser.ypp"
                    { (yyval.node) = new astnode(new DefinedType("fillTypeUsingSymbolTable"),IDENTIFIER);}
 #line 3058 "parser.tab.cpp"
     break;

   case 193: /* ImportDeclStar: ImportDeclStar ImportDecl  */
-#line 521 "src/parser.ypp"
+#line 509 "src/parser.ypp"
                               { (yyval.node) = new astnode("ImportDeclStar", false,{(yyvsp[-1].node),(yyvsp[0].node)});}
 #line 3064 "parser.tab.cpp"
     break;

   case 194: /* ImportDeclStar: ImportDecl  */
-#line 522 "src/parser.ypp"
+#line 510 "src/parser.ypp"
                  { (yyval.node) = newId((yyvsp[0].node), "ImportDeclStar"); }
 #line 3070 "parser.tab.cpp"
     break;

   case 195: /* ImportDeclStar: %empty  */
-#line 523 "src/parser.ypp"
+#line 511 "src/parser.ypp"
                 { (yyval.node) = new astnode(); }
 #line 3076 "parser.tab.cpp"
     break;

   case 196: /* ImportDecl: IMPORT ImportSpec SEMICOLON  */
-#line 527 "src/parser.ypp"
+#line 515 "src/parser.ypp"
                                     { (yyval.node) = new astnode("ImportDecl", false, {new astnode(IMPORT),(yyvsp[-1].node)}); }
 #line 3082 "parser.tab.cpp"
     break;

   case 197: /* ImportDecl: IMPORT LPAREN ImportSpecStar RPAREN  */
-#line 528 "src/parser.ypp"
+#line 516 "src/parser.ypp"
                                               { (yyval.node) = new astnode("ImportDecl", false, {new astnode(IMPORT), (yyvsp[-1].node)}); }
 #line 3088 "parser.tab.cpp"
     break;

   case 198: /* ImportSpecStar: ImportSpecStar ImportSpec SEMICOLON  */
-#line 532 "src/parser.ypp"
+#line 520 "src/parser.ypp"
                                             { (yyval.node) = new astnode("ImportSpecStar", false, {(yyvsp[-2].node),(yyvsp[-1].node)}); }
 #line 3094 "parser.tab.cpp"
     break;

   case 199: /* ImportSpecStar: ImportSpec SEMICOLON  */
-#line 533 "src/parser.ypp"
+#line 521 "src/parser.ypp"
                                { (yyval.node) = newId((yyvsp[-1].node), "ImportSpecStar"); }
 #line 3100 "parser.tab.cpp"
     break;

   case 200: /* ImportSpec: PERIOD ImportPath  */
-#line 536 "src/parser.ypp"
+#line 524 "src/parser.ypp"
                            { (yyval.node) = new astnode("ImportSpec", false, {new astnode(PERIOD), (yyvsp[0].node)}); }
 #line 3106 "parser.tab.cpp"
     break;

   case 201: /* ImportSpec: AlternatePackageName ImportPath  */
-#line 537 "src/parser.ypp"
+#line 525 "src/parser.ypp"
                                           { (yyval.node) = new astnode("ImportSpec", false, {(yyvsp[-1].node),(yyvsp[0].node)}); }
 #line 3112 "parser.tab.cpp"
     break;

   case 202: /* ImportSpec: AlternatePackageName  */
-#line 538 "src/parser.ypp"
+#line 526 "src/parser.ypp"
                                { (yyval.node) = newId((yyvsp[0].node),"ImportSpec"); }
 #line 3118 "parser.tab.cpp"
     break;

   case 203: /* ImportPath: string_lit  */
-#line 541 "src/parser.ypp"
+#line 529 "src/parser.ypp"
                     { (yyval.node) = newId((yyvsp[0].node),"ImportPath");}
 #line 3124 "parser.tab.cpp"
     break;

   case 204: /* AlternatePackageName: string_lit  */
-#line 544 "src/parser.ypp"
+#line 532 "src/parser.ypp"
                    { (yyval.node) = newId((yyvsp[0].node), "AlternatePackageName");}
 #line 3130 "parser.tab.cpp"
     break;
@@ -3355,11 +3355,26 @@ yyreturn:
   return yyresult;
 }

-#line 547 "src/parser.ypp"
+#line 535 "src/parser.ypp"


-int main (int argc, char **argv) {
+int nodeId = 0;
+void prettyPrint(astnode* root){
+	cout << nodeId << " [label=\"" << root->id << "\"]" << endl;
+	int parentId = nodeId;
+	for(auto child : root->children){
+		cout << parentId << "->" << ++nodeId << endl;
+		prettyPrint(child);
+	}
+}

+int main (int argc, char **argv) {
 	yyparse ( );
-	print_symtab();
+	// redirect ostream to file
+	ofstream myfile;
+	myfile.open ("ast.dot");
+	cout.rdbuf(myfile.rdbuf());
+	cout << "digraph \"src/parser.ypp\" \n { \n node [fontname = courier, shape = box, colorscheme = paired6] \n edge [fontname = courier]" << endl;
+	prettyPrint(theprogram);
+	cout << "}" << endl;
 }
diff --git a/parser.tab.hpp b/parser.tab.hpp
index c7dd9f0..abe08a1 100644
--- a/parser.tab.hpp
+++ b/parser.tab.hpp
@@ -45,14 +45,13 @@
 extern int yydebug;
 #endif
 /* "%code requires" blocks.  */
-#line 21 "src/parser.ypp"
+#line 18 "src/parser.ypp"

         #include <bits/stdc++.h>
 	#include "src/ast.h"
-	#include "src/symtab.h"
 	using namespace std;

-#line 56 "parser.tab.hpp"
+#line 55 "parser.tab.hpp"

 /* Token kinds.  */
 #ifndef YYTOKENTYPE
@@ -144,12 +143,12 @@ extern int yydebug;
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 union YYSTYPE
 {
-#line 28 "src/parser.ypp"
+#line 24 "src/parser.ypp"

 	Data* data;
 	astnode *node;

-#line 153 "parser.tab.hpp"
+#line 152 "parser.tab.hpp"

 };
 typedef union YYSTYPE YYSTYPE;
diff --git a/src/parser.ypp b/src/parser.ypp
index ff7465e..04dd8fa 100644
--- a/src/parser.ypp
+++ b/src/parser.ypp
@@ -8,9 +8,6 @@ void yyerror (const char *s) {fprintf (stderr, "%s\n", s);}
 extern int yylineno;
 extern char* yytext;
 astnode *theprogram;
-umap<string, Type*> symtab;
-int currscope = 0;
-string fullscope = "0";

 %}

@@ -21,7 +18,6 @@ string fullscope = "0";
 %code requires{
         #include <bits/stdc++.h>
 	#include "src/ast.h"
-	#include "src/symtab.h"
 	using namespace std;
 }

@@ -78,17 +74,11 @@ Block:
 	;

 OPENB:
-	/*empty*/ {
-		currscope++;
-		fullscope = fullscope + "/" + to_string(currscope);
-	}
+	/*empty*/ { $$ = new astnode(); }
 	;

 CLOSEB:
-	/*empty*/ {
-		currscope--;
-		fullscope = fullscope.substr(0, fullscope.find_last_of("/") );
-	}
+	/*empty*/ { $$ = new astnode(); }
 	;

 StatementList:
@@ -116,7 +106,7 @@ SimpleStmt:
 ;

 EmptyStmt:
-	/*empty*/
+	/*empty*/ { $$ = new astnode(); }
 	;

 LabeledStmt:
@@ -144,13 +134,11 @@ Declaration:
 	| VarDecl {$$ = newId($1, "Declaration");};

 FunctionDecl:
-		FUNC IDENTIFIER OPENB Function CLOSEB { $$ = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, $2), $4});
-			symadd( fullscope + " " + $2->v_str, $4->type);  }
-		| FUNC IDENTIFIER OPENB Signature CLOSEB { $$ = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, $2), $4});
-		        symadd( fullscope + " " + $2->v_str, $4->type); }
+		FUNC IDENTIFIER OPENB Function CLOSEB { $$ = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, $2), $4});}
+		| FUNC IDENTIFIER OPENB Signature CLOSEB { $$ = new astnode("FunctionDecl", false, {new astnode(IDENTIFIER, $2), $4});}
 		;
 Function:
-		Signature FunctionBody {$$ = new astnode("Function", false, {$1, $2});};
+		Signature FunctionBody {$$ = new astnode("Function", false, {$1, $2});}

 FunctionBody:
 		Block {$$ = newId($1, "FunctionBody");};
@@ -412,7 +400,7 @@ StructLiteral:
     ;

 KeyValList:
-    	/* empty */
+    	/* empty */ { $$ = new astnode(); }
  	| Expression COLON Expression { $$ = new astnode("",false,{$1,$3}); }
 	| KeyValList COMMA Expression COLON Expression { $$ = new astnode("",false,{$1,$3,$5}); }
 	;
@@ -546,8 +534,23 @@ AlternatePackageName:

 %%

-int main (int argc, char **argv) {
+int nodeId = 0;
+void prettyPrint(astnode* root){
+	cout << nodeId << " [label=\"" << root->id << "\"]" << endl;
+	int parentId = nodeId;
+	for(auto child : root->children){
+		cout << parentId << "->" << ++nodeId << endl;
+		prettyPrint(child);
+	}
+}

+int main (int argc, char **argv) {
 	yyparse ( );
-	print_symtab();
-}
+	// redirect ostream to file
+	ofstream myfile;
+	myfile.open ("ast.dot");
+	cout.rdbuf(myfile.rdbuf());
+	cout << "digraph \"src/parser.ypp\" \n { \n node [fontname = courier, shape = box, colorscheme = paired6] \n edge [fontname = courier]" << endl;
+	prettyPrint(theprogram);
+	cout << "}" << endl;
+}
\ No newline at end of file
diff --git a/src/symtab.cpp b/src/symtab.cpp
deleted file mode 100644
index d551e77..0000000
--- a/src/symtab.cpp
+++ /dev/null
@@ -1,22 +0,0 @@
-#include "symtab.h"
-#include "type.h"
-using namespace std;
-
-int symadd(string symname, Type* symtype){
-	//check new sym
-	if( symtab.find(symname) != symtab.end() ){
-		cout<< "ERROR: Repeat entry symbol table -"<<symname<<endl;
-		return -1;
-	}
-
-	symtab[symname] = symtype;
-	return 0;
-}
-
-void print_symtab(){
-	cout<<"----SYMBOL TABLE----"<<endl;
-	cout<<"Scope_num Sym_name"<<endl<<endl;
-	for( auto i : symtab){
-		cout<<i.first<<endl;
-	}
-}
diff --git a/src/symtab.h b/src/symtab.h
deleted file mode 100644
index 1e7b3f4..0000000
--- a/src/symtab.h
+++ /dev/null
@@ -1,13 +0,0 @@
-#ifndef SYMTAB_H
-#define SYMTAB_H
-
-#include "type.h"
-#include <string>
-
-extern umap<string, Type*> symtab; //see parser.ypp
-//extern string fullscope;
-
-int symadd(string symname, Type* symtype);
-void print_symtab();
-
-#endif
